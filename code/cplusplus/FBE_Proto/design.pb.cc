// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: design.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "design.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FabByExample {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Design_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Design_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Functionality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Functionality_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Functionality_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Functionality_Axis_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeafNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeafNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LeafNode_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_design_2eproto() {
  protobuf_AddDesc_design_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "design.proto");
  GOOGLE_CHECK(file != NULL);
  Design_descriptor_ = file->message_type(0);
  static const int Design_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Design, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Design, root_),
  };
  Design_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Design_descriptor_,
      Design::default_instance_,
      Design_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Design, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Design, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Design));
  Transformation_descriptor_ = file->message_type(1);
  static const int Transformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transformation, rotation_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transformation, translation_vector_),
  };
  Transformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transformation_descriptor_,
      Transformation::default_instance_,
      Transformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transformation));
  Functionality_descriptor_ = file->message_type(2);
  static const int Functionality_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Functionality, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Functionality, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Functionality, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Functionality, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Functionality, axis_),
  };
  Functionality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Functionality_descriptor_,
      Functionality::default_instance_,
      Functionality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Functionality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Functionality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Functionality));
  Functionality_Type_descriptor_ = Functionality_descriptor_->enum_type(0);
  Functionality_Axis_descriptor_ = Functionality_descriptor_->enum_type(1);
  Node_descriptor_ = file->message_type(3);
  static const int Node_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, transformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, func_),
  };
  Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Node));
  LeafNode_descriptor_ = file->message_type(4);
  static const int LeafNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNode, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNode, type_),
  };
  LeafNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeafNode_descriptor_,
      LeafNode::default_instance_,
      LeafNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeafNode));
  LeafNode_Type_descriptor_ = LeafNode_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_design_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Design_descriptor_, &Design::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transformation_descriptor_, &Transformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Functionality_descriptor_, &Functionality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeafNode_descriptor_, &LeafNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_design_2eproto() {
  delete Design::default_instance_;
  delete Design_reflection_;
  delete Transformation::default_instance_;
  delete Transformation_reflection_;
  delete Functionality::default_instance_;
  delete Functionality_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete LeafNode::default_instance_;
  delete LeafNode_reflection_;
}

void protobuf_AddDesc_design_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::FabByExample::proto::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014design.proto\022\022FabByExample.proto\032\014comm"
    "on.proto\">\n\006Design\022\014\n\004name\030\001 \001(\t\022&\n\004root"
    "\030\002 \001(\0132\030.FabByExample.proto.Node\"}\n\016Tran"
    "sformation\0223\n\017rotation_matrix\030\001 \001(\0132\032.Fa"
    "bByExample.proto.Matrix\0226\n\022translation_v"
    "ector\030\002 \001(\0132\032.FabByExample.proto.Vector\""
    "\216\002\n\rFunctionality\022\n\n\002ID\030\001 \001(\005\022*\n\006center\030"
    "\002 \001(\0132\032.FabByExample.proto.Vector\022\014\n\004nam"
    "e\030\003 \001(\t\0224\n\004type\030\004 \001(\0162&.FabByExample.pro"
    "to.Functionality.Type\0224\n\004axis\030\005 \001(\0162&.Fa"
    "bByExample.proto.Functionality.Axis\"$\n\004T"
    "ype\022\007\n\003ROT\020\000\022\t\n\005TRANS\020\001\022\010\n\004PROT\020\002\"%\n\004Axi"
    "s\022\010\n\004NONE\020\000\022\005\n\001X\020\001\022\005\n\001Y\020\002\022\005\n\001Z\020\003\"\303\001\n\004Nod"
    "e\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\022*\n\010children\030"
    "\003 \003(\0132\030.FabByExample.proto.Node\022:\n\016trans"
    "formation\030\004 \001(\0132\".FabByExample.proto.Tra"
    "nsformation\022/\n\004func\030\005 \001(\0132!.FabByExample"
    ".proto.Functionality*\010\010d\020\200\200\200\200\002\"\277\001\n\010LeafN"
    "ode\022\020\n\010geometry\030\001 \001(\t\0225\n\004type\030\002 \001(\0162!.Fa"
    "bByExample.proto.LeafNode.Type:\004PART\"\037\n\004"
    "Type\022\010\n\004PART\020\001\022\r\n\tCONNECTOR\020\0022I\n\tleaf_no"
    "de\022\030.FabByExample.proto.Node\030d \001(\0132\034.Fab"
    "ByExample.proto.LeafNode", 904);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "design.proto", &protobuf_RegisterTypes);
  Design::default_instance_ = new Design();
  Transformation::default_instance_ = new Transformation();
  Functionality::default_instance_ = new Functionality();
  Node::default_instance_ = new Node();
  LeafNode::default_instance_ = new LeafNode();
  Design::default_instance_->InitAsDefaultInstance();
  Transformation::default_instance_->InitAsDefaultInstance();
  Functionality::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  LeafNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::FabByExample::proto::Node::default_instance(),
    100, 11, false, false,
    &::FabByExample::proto::LeafNode::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_design_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_design_2eproto {
  StaticDescriptorInitializer_design_2eproto() {
    protobuf_AddDesc_design_2eproto();
  }
} static_descriptor_initializer_design_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Design::kNameFieldNumber;
const int Design::kRootFieldNumber;
#endif  // !_MSC_VER

Design::Design()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Design::InitAsDefaultInstance() {
  root_ = const_cast< ::FabByExample::proto::Node*>(&::FabByExample::proto::Node::default_instance());
}

Design::Design(const Design& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Design::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  root_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Design::~Design() {
  SharedDtor();
}

void Design::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete root_;
  }
}

void Design::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Design::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Design_descriptor_;
}

const Design& Design::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_design_2eproto();
  return *default_instance_;
}

Design* Design::default_instance_ = NULL;

Design* Design::New() const {
  return new Design;
}

void Design::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_root()) {
      if (root_ != NULL) root_->::FabByExample::proto::Node::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Design::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_root;
        break;
      }

      // optional .FabByExample.proto.Node root = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Design::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .FabByExample.proto.Node root = 2;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->root(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Design::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .FabByExample.proto.Node root = 2;
  if (has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->root(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Design::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .FabByExample.proto.Node root = 2;
    if (has_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->root());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Design::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Design* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Design*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Design::MergeFrom(const Design& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_root()) {
      mutable_root()->::FabByExample::proto::Node::MergeFrom(from.root());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Design::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Design::CopyFrom(const Design& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Design::IsInitialized() const {

  if (has_root()) {
    if (!this->root().IsInitialized()) return false;
  }
  return true;
}

void Design::Swap(Design* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(root_, other->root_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Design::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Design_descriptor_;
  metadata.reflection = Design_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Transformation::kRotationMatrixFieldNumber;
const int Transformation::kTranslationVectorFieldNumber;
#endif  // !_MSC_VER

Transformation::Transformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transformation::InitAsDefaultInstance() {
  rotation_matrix_ = const_cast< ::FabByExample::proto::Matrix*>(&::FabByExample::proto::Matrix::default_instance());
  translation_vector_ = const_cast< ::FabByExample::proto::Vector*>(&::FabByExample::proto::Vector::default_instance());
}

Transformation::Transformation(const Transformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transformation::SharedCtor() {
  _cached_size_ = 0;
  rotation_matrix_ = NULL;
  translation_vector_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transformation::~Transformation() {
  SharedDtor();
}

void Transformation::SharedDtor() {
  if (this != default_instance_) {
    delete rotation_matrix_;
    delete translation_vector_;
  }
}

void Transformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transformation_descriptor_;
}

const Transformation& Transformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_design_2eproto();
  return *default_instance_;
}

Transformation* Transformation::default_instance_ = NULL;

Transformation* Transformation::New() const {
  return new Transformation;
}

void Transformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rotation_matrix()) {
      if (rotation_matrix_ != NULL) rotation_matrix_->::FabByExample::proto::Matrix::Clear();
    }
    if (has_translation_vector()) {
      if (translation_vector_ != NULL) translation_vector_->::FabByExample::proto::Vector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.Matrix rotation_matrix = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation_matrix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_translation_vector;
        break;
      }

      // optional .FabByExample.proto.Vector translation_vector = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_translation_vector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation_vector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.Matrix rotation_matrix = 1;
  if (has_rotation_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rotation_matrix(), output);
  }

  // optional .FabByExample.proto.Vector translation_vector = 2;
  if (has_translation_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->translation_vector(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.Matrix rotation_matrix = 1;
  if (has_rotation_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rotation_matrix(), target);
  }

  // optional .FabByExample.proto.Vector translation_vector = 2;
  if (has_translation_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->translation_vector(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.Matrix rotation_matrix = 1;
    if (has_rotation_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation_matrix());
    }

    // optional .FabByExample.proto.Vector translation_vector = 2;
    if (has_translation_vector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translation_vector());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transformation::MergeFrom(const Transformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rotation_matrix()) {
      mutable_rotation_matrix()->::FabByExample::proto::Matrix::MergeFrom(from.rotation_matrix());
    }
    if (from.has_translation_vector()) {
      mutable_translation_vector()->::FabByExample::proto::Vector::MergeFrom(from.translation_vector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transformation::CopyFrom(const Transformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transformation::IsInitialized() const {

  return true;
}

void Transformation::Swap(Transformation* other) {
  if (other != this) {
    std::swap(rotation_matrix_, other->rotation_matrix_);
    std::swap(translation_vector_, other->translation_vector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transformation_descriptor_;
  metadata.reflection = Transformation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Functionality_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Functionality_Type_descriptor_;
}
bool Functionality_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Functionality_Type Functionality::ROT;
const Functionality_Type Functionality::TRANS;
const Functionality_Type Functionality::PROT;
const Functionality_Type Functionality::Type_MIN;
const Functionality_Type Functionality::Type_MAX;
const int Functionality::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Functionality_Axis_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Functionality_Axis_descriptor_;
}
bool Functionality_Axis_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Functionality_Axis Functionality::NONE;
const Functionality_Axis Functionality::X;
const Functionality_Axis Functionality::Y;
const Functionality_Axis Functionality::Z;
const Functionality_Axis Functionality::Axis_MIN;
const Functionality_Axis Functionality::Axis_MAX;
const int Functionality::Axis_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Functionality::kIDFieldNumber;
const int Functionality::kCenterFieldNumber;
const int Functionality::kNameFieldNumber;
const int Functionality::kTypeFieldNumber;
const int Functionality::kAxisFieldNumber;
#endif  // !_MSC_VER

Functionality::Functionality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Functionality::InitAsDefaultInstance() {
  center_ = const_cast< ::FabByExample::proto::Vector*>(&::FabByExample::proto::Vector::default_instance());
}

Functionality::Functionality(const Functionality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Functionality::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  center_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  type_ = 0;
  axis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Functionality::~Functionality() {
  SharedDtor();
}

void Functionality::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete center_;
  }
}

void Functionality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Functionality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Functionality_descriptor_;
}

const Functionality& Functionality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_design_2eproto();
  return *default_instance_;
}

Functionality* Functionality::default_instance_ = NULL;

Functionality* Functionality::New() const {
  return new Functionality;
}

void Functionality::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_center()) {
      if (center_ != NULL) center_->::FabByExample::proto::Vector::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    type_ = 0;
    axis_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Functionality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_center;
        break;
      }

      // optional .FabByExample.proto.Vector center = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .FabByExample.proto.Functionality.Type type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FabByExample::proto::Functionality_Type_IsValid(value)) {
            set_type(static_cast< ::FabByExample::proto::Functionality_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_axis;
        break;
      }

      // optional .FabByExample.proto.Functionality.Axis axis = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_axis:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FabByExample::proto::Functionality_Axis_IsValid(value)) {
            set_axis(static_cast< ::FabByExample::proto::Functionality_Axis >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Functionality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .FabByExample.proto.Vector center = 2;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->center(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional .FabByExample.proto.Functionality.Type type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional .FabByExample.proto.Functionality.Axis axis = 5;
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->axis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Functionality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .FabByExample.proto.Vector center = 2;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->center(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .FabByExample.proto.Functionality.Type type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional .FabByExample.proto.Functionality.Axis axis = 5;
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->axis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Functionality::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .FabByExample.proto.Vector center = 2;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .FabByExample.proto.Functionality.Type type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .FabByExample.proto.Functionality.Axis axis = 5;
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->axis());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Functionality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Functionality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Functionality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Functionality::MergeFrom(const Functionality& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_center()) {
      mutable_center()->::FabByExample::proto::Vector::MergeFrom(from.center());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Functionality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Functionality::CopyFrom(const Functionality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Functionality::IsInitialized() const {

  return true;
}

void Functionality::Swap(Functionality* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(center_, other->center_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(axis_, other->axis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Functionality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Functionality_descriptor_;
  metadata.reflection = Functionality_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Node::kNameFieldNumber;
const int Node::kIdFieldNumber;
const int Node::kChildrenFieldNumber;
const int Node::kTransformationFieldNumber;
const int Node::kFuncFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Node::InitAsDefaultInstance() {
  transformation_ = const_cast< ::FabByExample::proto::Transformation*>(&::FabByExample::proto::Transformation::default_instance());
  func_ = const_cast< ::FabByExample::proto::Functionality*>(&::FabByExample::proto::Functionality::default_instance());
}

Node::Node(const Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Node::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  id_ = 0;
  transformation_ = NULL;
  func_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  SharedDtor();
}

void Node::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete transformation_;
    delete func_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_design_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New() const {
  return new Node;
}

void Node::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    id_ = 0;
    if (has_transformation()) {
      if (transformation_ != NULL) transformation_->::FabByExample::proto::Transformation::Clear();
    }
    if (has_func()) {
      if (func_ != NULL) func_->::FabByExample::proto::Functionality::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        break;
      }

      // repeated .FabByExample.proto.Node children = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        if (input->ExpectTag(34)) goto parse_transformation;
        break;
      }

      // optional .FabByExample.proto.Transformation transformation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transformation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transformation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_func;
        break;
      }

      // optional .FabByExample.proto.Functionality func = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_func:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_func()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated .FabByExample.proto.Node children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->children(i), output);
  }

  // optional .FabByExample.proto.Transformation transformation = 4;
  if (has_transformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transformation(), output);
  }

  // optional .FabByExample.proto.Functionality func = 5;
  if (has_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->func(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated .FabByExample.proto.Node children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->children(i), target);
  }

  // optional .FabByExample.proto.Transformation transformation = 4;
  if (has_transformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transformation(), target);
  }

  // optional .FabByExample.proto.Functionality func = 5;
  if (has_func()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->func(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .FabByExample.proto.Transformation transformation = 4;
    if (has_transformation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transformation());
    }

    // optional .FabByExample.proto.Functionality func = 5;
    if (has_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->func());
    }

  }
  // repeated .FabByExample.proto.Node children = 3;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_transformation()) {
      mutable_transformation()->::FabByExample::proto::Transformation::MergeFrom(from.transformation());
    }
    if (from.has_func()) {
      mutable_func()->::FabByExample::proto::Functionality::MergeFrom(from.func());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Node::Swap(Node* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    children_.Swap(&other->children_);
    std::swap(transformation_, other->transformation_);
    std::swap(func_, other->func_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LeafNode_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeafNode_Type_descriptor_;
}
bool LeafNode_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LeafNode_Type LeafNode::PART;
const LeafNode_Type LeafNode::CONNECTOR;
const LeafNode_Type LeafNode::Type_MIN;
const LeafNode_Type LeafNode::Type_MAX;
const int LeafNode::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LeafNode::kGeometryFieldNumber;
const int LeafNode::kTypeFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int LeafNode::kLeafNodeFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::FabByExample::proto::Node,
    ::google::protobuf::internal::MessageTypeTraits< ::FabByExample::proto::LeafNode >, 11, false >
  LeafNode::leaf_node(kLeafNodeFieldNumber, ::FabByExample::proto::LeafNode::default_instance());
LeafNode::LeafNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeafNode::InitAsDefaultInstance() {
}

LeafNode::LeafNode(const LeafNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeafNode::SharedCtor() {
  _cached_size_ = 0;
  geometry_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeafNode::~LeafNode() {
  SharedDtor();
}

void LeafNode::SharedDtor() {
  if (geometry_ != &::google::protobuf::internal::GetEmptyString()) {
    delete geometry_;
  }
  if (this != default_instance_) {
  }
}

void LeafNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeafNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeafNode_descriptor_;
}

const LeafNode& LeafNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_design_2eproto();
  return *default_instance_;
}

LeafNode* LeafNode::default_instance_ = NULL;

LeafNode* LeafNode::New() const {
  return new LeafNode;
}

void LeafNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_geometry()) {
      if (geometry_ != &::google::protobuf::internal::GetEmptyString()) {
        geometry_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeafNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string geometry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geometry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geometry().data(), this->geometry().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .FabByExample.proto.LeafNode.Type type = 2 [default = PART];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FabByExample::proto::LeafNode_Type_IsValid(value)) {
            set_type(static_cast< ::FabByExample::proto::LeafNode_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeafNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string geometry = 1;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geometry().data(), this->geometry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->geometry(), output);
  }

  // optional .FabByExample.proto.LeafNode.Type type = 2 [default = PART];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeafNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string geometry = 1;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geometry().data(), this->geometry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->geometry(), target);
  }

  // optional .FabByExample.proto.LeafNode.Type type = 2 [default = PART];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeafNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string geometry = 1;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geometry());
    }

    // optional .FabByExample.proto.LeafNode.Type type = 2 [default = PART];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeafNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeafNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeafNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeafNode::MergeFrom(const LeafNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_geometry()) {
      set_geometry(from.geometry());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeafNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeafNode::CopyFrom(const LeafNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafNode::IsInitialized() const {

  return true;
}

void LeafNode::Swap(LeafNode* other) {
  if (other != this) {
    std::swap(geometry_, other->geometry_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeafNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeafNode_descriptor_;
  metadata.reflection = LeafNode_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace FabByExample

// @@protoc_insertion_point(global_scope)
