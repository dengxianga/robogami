// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symbolic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "symbolic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FabByExample {
namespace proto {
namespace symbolic {

namespace {

const ::google::protobuf::Descriptor* Parameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinearExpr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinearExpr_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point3S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point3S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vertex2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vertex2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edge2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Face2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Face2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Drawing2S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Drawing2S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vertex3S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vertex3S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edge3S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge3S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Face3S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Face3S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mesh3S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mesh3S_reflection_ = NULL;
const ::google::protobuf::Descriptor* AffineMatrix3S_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AffineMatrix3S_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transform_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Transform_TransformType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Control_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Control_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlMappingFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlMappingFunction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParametricPiecewiseLinearFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParametricPiecewiseLinearFunction_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrammarControllerMappingFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrammarControllerMappingFunction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GrammarControllerMappingFunction_GrammarControllerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LinearMappingFuction1D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinearMappingFuction1D_reflection_ = NULL;
const ::google::protobuf::Descriptor* PiecewiseLinearFunction1D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PiecewiseLinearFunction1D_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeAndValuePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeAndValuePair_reflection_ = NULL;
const ::google::protobuf::Descriptor* PWLinear_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PWLinear_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_symbolic_2eproto() {
  protobuf_AddDesc_symbolic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "symbolic.proto");
  GOOGLE_CHECK(file != NULL);
  Parameter_descriptor_ = file->message_type(0);
  static const int Parameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, default__),
  };
  Parameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parameter_descriptor_,
      Parameter::default_instance_,
      Parameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parameter));
  LinearExpr_descriptor_ = file->message_type(1);
  static const int LinearExpr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearExpr, parameter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearExpr, coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearExpr, const__),
  };
  LinearExpr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinearExpr_descriptor_,
      LinearExpr::default_instance_,
      LinearExpr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearExpr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearExpr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinearExpr));
  Point2S_descriptor_ = file->message_type(2);
  static const int Point2S_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2S, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2S, y_),
  };
  Point2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point2S_descriptor_,
      Point2S::default_instance_,
      Point2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point2S));
  Point3S_descriptor_ = file->message_type(3);
  static const int Point3S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3S, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3S, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3S, z_),
  };
  Point3S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point3S_descriptor_,
      Point3S::default_instance_,
      Point3S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point3S));
  Vertex2S_descriptor_ = file->message_type(4);
  static const int Vertex2S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2S, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2S, point_),
  };
  Vertex2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vertex2S_descriptor_,
      Vertex2S::default_instance_,
      Vertex2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vertex2S));
  Edge2S_descriptor_ = file->message_type(5);
  static const int Edge2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge2S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge2S, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge2S, vertex1_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge2S, vertex2_id_),
  };
  Edge2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Edge2S_descriptor_,
      Edge2S::default_instance_,
      Edge2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Edge2S));
  Face2S_descriptor_ = file->message_type(6);
  static const int Face2S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face2S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face2S, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face2S, vertex_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face2S, edge_id_),
  };
  Face2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Face2S_descriptor_,
      Face2S::default_instance_,
      Face2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Face2S));
  Drawing2S_descriptor_ = file->message_type(7);
  static const int Drawing2S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drawing2S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drawing2S, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drawing2S, vertex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drawing2S, edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drawing2S, face_),
  };
  Drawing2S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Drawing2S_descriptor_,
      Drawing2S::default_instance_,
      Drawing2S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drawing2S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Drawing2S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Drawing2S));
  Vertex3S_descriptor_ = file->message_type(8);
  static const int Vertex3S_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex3S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex3S, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex3S, point_),
  };
  Vertex3S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vertex3S_descriptor_,
      Vertex3S::default_instance_,
      Vertex3S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex3S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex3S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vertex3S));
  Edge3S_descriptor_ = file->message_type(9);
  static const int Edge3S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge3S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge3S, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge3S, vertex1_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge3S, vertex2_id_),
  };
  Edge3S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Edge3S_descriptor_,
      Edge3S::default_instance_,
      Edge3S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge3S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge3S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Edge3S));
  Face3S_descriptor_ = file->message_type(10);
  static const int Face3S_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face3S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face3S, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face3S, vertex_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face3S, edge_id_),
  };
  Face3S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Face3S_descriptor_,
      Face3S::default_instance_,
      Face3S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face3S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face3S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Face3S));
  Mesh3S_descriptor_ = file->message_type(11);
  static const int Mesh3S_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh3S, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh3S, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh3S, vertex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh3S, edge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh3S, face_),
  };
  Mesh3S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mesh3S_descriptor_,
      Mesh3S::default_instance_,
      Mesh3S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh3S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh3S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mesh3S));
  AffineMatrix3S_descriptor_ = file->message_type(12);
  static const int AffineMatrix3S_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffineMatrix3S, value_),
  };
  AffineMatrix3S_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AffineMatrix3S_descriptor_,
      AffineMatrix3S::default_instance_,
      AffineMatrix3S_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffineMatrix3S, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AffineMatrix3S, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AffineMatrix3S));
  Transform_descriptor_ = file->message_type(13);
  static const int Transform_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, minval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, maxval_),
  };
  Transform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transform_descriptor_,
      Transform::default_instance_,
      Transform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transform));
  Transform_TransformType_descriptor_ = Transform_descriptor_->enum_type(0);
  Control_descriptor_ = file->message_type(14);
  static const int Control_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, inputs_),
  };
  Control_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Control_descriptor_,
      Control::default_instance_,
      Control_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Control));
  ControlMappingFunction_descriptor_ = file->message_type(15);
  static const int ControlMappingFunction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMappingFunction, linear_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMappingFunction, piecewiselinear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMappingFunction, piecewisefunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMappingFunction, symboliccontroller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMappingFunction, grammarfunction_),
  };
  ControlMappingFunction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControlMappingFunction_descriptor_,
      ControlMappingFunction::default_instance_,
      ControlMappingFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMappingFunction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMappingFunction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControlMappingFunction));
  ParametricPiecewiseLinearFunction_descriptor_ = file->message_type(16);
  static const int ParametricPiecewiseLinearFunction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParametricPiecewiseLinearFunction, pairs_),
  };
  ParametricPiecewiseLinearFunction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParametricPiecewiseLinearFunction_descriptor_,
      ParametricPiecewiseLinearFunction::default_instance_,
      ParametricPiecewiseLinearFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParametricPiecewiseLinearFunction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParametricPiecewiseLinearFunction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParametricPiecewiseLinearFunction));
  GrammarControllerMappingFunction_descriptor_ = file->message_type(17);
  static const int GrammarControllerMappingFunction_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrammarControllerMappingFunction, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrammarControllerMappingFunction, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrammarControllerMappingFunction, n_intervals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrammarControllerMappingFunction, i_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrammarControllerMappingFunction, multi_),
  };
  GrammarControllerMappingFunction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrammarControllerMappingFunction_descriptor_,
      GrammarControllerMappingFunction::default_instance_,
      GrammarControllerMappingFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrammarControllerMappingFunction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrammarControllerMappingFunction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrammarControllerMappingFunction));
  GrammarControllerMappingFunction_GrammarControllerType_descriptor_ = GrammarControllerMappingFunction_descriptor_->enum_type(0);
  LinearMappingFuction1D_descriptor_ = file->message_type(18);
  static const int LinearMappingFuction1D_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearMappingFuction1D, lineartimemap_),
  };
  LinearMappingFuction1D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinearMappingFuction1D_descriptor_,
      LinearMappingFuction1D::default_instance_,
      LinearMappingFuction1D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearMappingFuction1D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearMappingFuction1D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinearMappingFuction1D));
  PiecewiseLinearFunction1D_descriptor_ = file->message_type(19);
  static const int PiecewiseLinearFunction1D_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseLinearFunction1D, timesandvalues_),
  };
  PiecewiseLinearFunction1D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PiecewiseLinearFunction1D_descriptor_,
      PiecewiseLinearFunction1D::default_instance_,
      PiecewiseLinearFunction1D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseLinearFunction1D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PiecewiseLinearFunction1D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PiecewiseLinearFunction1D));
  TimeAndValuePair_descriptor_ = file->message_type(20);
  static const int TimeAndValuePair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndValuePair, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndValuePair, value_),
  };
  TimeAndValuePair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeAndValuePair_descriptor_,
      TimeAndValuePair::default_instance_,
      TimeAndValuePair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndValuePair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeAndValuePair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeAndValuePair));
  PWLinear_descriptor_ = file->message_type(21);
  static const int PWLinear_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PWLinear, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PWLinear, value_),
  };
  PWLinear_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PWLinear_descriptor_,
      PWLinear::default_instance_,
      PWLinear_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PWLinear, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PWLinear, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PWLinear));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_symbolic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parameter_descriptor_, &Parameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinearExpr_descriptor_, &LinearExpr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point2S_descriptor_, &Point2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point3S_descriptor_, &Point3S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vertex2S_descriptor_, &Vertex2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Edge2S_descriptor_, &Edge2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Face2S_descriptor_, &Face2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Drawing2S_descriptor_, &Drawing2S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vertex3S_descriptor_, &Vertex3S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Edge3S_descriptor_, &Edge3S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Face3S_descriptor_, &Face3S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mesh3S_descriptor_, &Mesh3S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AffineMatrix3S_descriptor_, &AffineMatrix3S::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transform_descriptor_, &Transform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Control_descriptor_, &Control::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControlMappingFunction_descriptor_, &ControlMappingFunction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParametricPiecewiseLinearFunction_descriptor_, &ParametricPiecewiseLinearFunction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrammarControllerMappingFunction_descriptor_, &GrammarControllerMappingFunction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinearMappingFuction1D_descriptor_, &LinearMappingFuction1D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PiecewiseLinearFunction1D_descriptor_, &PiecewiseLinearFunction1D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeAndValuePair_descriptor_, &TimeAndValuePair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PWLinear_descriptor_, &PWLinear::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_symbolic_2eproto() {
  delete Parameter::default_instance_;
  delete Parameter_reflection_;
  delete LinearExpr::default_instance_;
  delete LinearExpr_reflection_;
  delete Point2S::default_instance_;
  delete Point2S_reflection_;
  delete Point3S::default_instance_;
  delete Point3S_reflection_;
  delete Vertex2S::default_instance_;
  delete Vertex2S_reflection_;
  delete Edge2S::default_instance_;
  delete Edge2S_reflection_;
  delete Face2S::default_instance_;
  delete Face2S_reflection_;
  delete Drawing2S::default_instance_;
  delete Drawing2S_reflection_;
  delete Vertex3S::default_instance_;
  delete Vertex3S_reflection_;
  delete Edge3S::default_instance_;
  delete Edge3S_reflection_;
  delete Face3S::default_instance_;
  delete Face3S_reflection_;
  delete Mesh3S::default_instance_;
  delete Mesh3S_reflection_;
  delete AffineMatrix3S::default_instance_;
  delete AffineMatrix3S_reflection_;
  delete Transform::default_instance_;
  delete Transform_reflection_;
  delete Control::default_instance_;
  delete Control_reflection_;
  delete ControlMappingFunction::default_instance_;
  delete ControlMappingFunction_reflection_;
  delete ParametricPiecewiseLinearFunction::default_instance_;
  delete ParametricPiecewiseLinearFunction_reflection_;
  delete GrammarControllerMappingFunction::default_instance_;
  delete GrammarControllerMappingFunction_reflection_;
  delete LinearMappingFuction1D::default_instance_;
  delete LinearMappingFuction1D_reflection_;
  delete PiecewiseLinearFunction1D::default_instance_;
  delete PiecewiseLinearFunction1D_reflection_;
  delete TimeAndValuePair::default_instance_;
  delete TimeAndValuePair_reflection_;
  delete PWLinear::default_instance_;
  delete PWLinear_reflection_;
}

void protobuf_AddDesc_symbolic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016symbolic.proto\022\033FabByExample.proto.sym"
    "bolic\"6\n\tParameter\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002"
    " \001(\t\022\017\n\007default\030\003 \001(\001\"@\n\nLinearExpr\022\024\n\014p"
    "arameter_id\030\001 \003(\005\022\r\n\005coeff\030\002 \003(\001\022\r\n\005cons"
    "t\030\003 \001(\001\"q\n\007Point2S\0222\n\001x\030\001 \001(\0132\'.FabByExa"
    "mple.proto.symbolic.LinearExpr\0222\n\001y\030\002 \001("
    "\0132\'.FabByExample.proto.symbolic.LinearEx"
    "pr\"\245\001\n\007Point3S\0222\n\001x\030\001 \001(\0132\'.FabByExample"
    ".proto.symbolic.LinearExpr\0222\n\001y\030\002 \001(\0132\'."
    "FabByExample.proto.symbolic.LinearExpr\0222"
    "\n\001z\030\003 \001(\0132\'.FabByExample.proto.symbolic."
    "LinearExpr\"Y\n\010Vertex2S\022\n\n\002id\030\001 \001(\005\022\014\n\004na"
    "me\030\002 \001(\t\0223\n\005point\030\003 \001(\0132$.FabByExample.p"
    "roto.symbolic.Point2S\"J\n\006Edge2S\022\n\n\002id\030\001 "
    "\001(\005\022\014\n\004name\030\002 \001(\t\022\022\n\nvertex1_id\030\003 \001(\005\022\022\n"
    "\nvertex2_id\030\004 \001(\005\"F\n\006Face2S\022\n\n\002id\030\001 \001(\005\022"
    "\014\n\004name\030\002 \001(\t\022\021\n\tvertex_id\030\003 \003(\005\022\017\n\007edge"
    "_id\030\004 \003(\005\"\302\001\n\tDrawing2S\022\n\n\002id\030\001 \001(\005\022\014\n\004n"
    "ame\030\002 \001(\t\0225\n\006vertex\030\003 \003(\0132%.FabByExample"
    ".proto.symbolic.Vertex2S\0221\n\004edge\030\004 \003(\0132#"
    ".FabByExample.proto.symbolic.Edge2S\0221\n\004f"
    "ace\030\005 \003(\0132#.FabByExample.proto.symbolic."
    "Face2S\"Y\n\010Vertex3S\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002"
    " \001(\t\0223\n\005point\030\003 \001(\0132$.FabByExample.proto"
    ".symbolic.Point3S\"J\n\006Edge3S\022\n\n\002id\030\001 \001(\005\022"
    "\014\n\004name\030\002 \001(\t\022\022\n\nvertex1_id\030\003 \001(\005\022\022\n\nver"
    "tex2_id\030\004 \001(\005\"F\n\006Face3S\022\n\n\002id\030\001 \001(\005\022\014\n\004n"
    "ame\030\002 \001(\t\022\021\n\tvertex_id\030\003 \003(\005\022\017\n\007edge_id\030"
    "\004 \003(\005\"\277\001\n\006Mesh3S\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001"
    "(\005\0225\n\006vertex\030\003 \003(\0132%.FabByExample.proto."
    "symbolic.Vertex3S\0221\n\004edge\030\004 \003(\0132#.FabByE"
    "xample.proto.symbolic.Edge3S\0221\n\004face\030\005 \003"
    "(\0132#.FabByExample.proto.symbolic.Face3S\""
    "H\n\016AffineMatrix3S\0226\n\005value\030\001 \003(\0132\'.FabBy"
    "Example.proto.symbolic.LinearExpr\"\234\002\n\tTr"
    "ansform\0225\n\007control\030\001 \001(\0132$.FabByExample."
    "proto.symbolic.Control\0222\n\004axis\030\002 \001(\0132$.F"
    "abByExample.proto.symbolic.Point3S\022B\n\004ty"
    "pe\030\003 \001(\01624.FabByExample.proto.symbolic.T"
    "ransform.TransformType\022\016\n\006minVal\030\004 \001(\001\022\016"
    "\n\006maxVal\030\005 \001(\001\"@\n\rTransformType\022\026\n\022REVOL"
    "UTE_TRANSFORM\020\001\022\027\n\023PRISMATIC_TRANSFORM\020\002"
    "\"h\n\007Control\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022C\n"
    "\006inputs\030\003 \001(\01323.FabByExample.proto.symbo"
    "lic.ControlMappingFunction\"\377\002\n\026ControlMa"
    "ppingFunction\022E\n\010linear_1\030\001 \001(\01323.FabByE"
    "xample.proto.symbolic.LinearMappingFucti"
    "on1D\022O\n\017piecewiselinear\030\002 \001(\01326.FabByExa"
    "mple.proto.symbolic.PiecewiseLinearFunct"
    "ion1D\022Y\n\021piecewiseFunction\030\003 \001(\0132>.FabBy"
    "Example.proto.symbolic.ParametricPiecewi"
    "seLinearFunction\022\032\n\022symbolicController\030\004"
    " \001(\005\022V\n\017grammarFunction\030\005 \001(\0132=.FabByExa"
    "mple.proto.symbolic.GrammarControllerMap"
    "pingFunction\"Y\n!ParametricPiecewiseLinea"
    "rFunction\0224\n\005pairs\030\001 \003(\0132%.FabByExample."
    "proto.symbolic.PWLinear\"\240\002\n GrammarContr"
    "ollerMappingFunction\022a\n\004type\030\001 \001(\0162S.Fab"
    "ByExample.proto.symbolic.GrammarControll"
    "erMappingFunction.GrammarControllerType\022"
    "\r\n\005theta\030\002 \001(\001\022\023\n\013N_intervals\030\003 \001(\005\022\022\n\ni"
    "_interval\030\004 \001(\005\022\r\n\005multi\030\005 \001(\001\"R\n\025Gramma"
    "rControllerType\022\t\n\005WHEEL\020\001\022\007\n\003LEG\020\002\022\023\n\017D"
    "OUBLE_SHOULDER\020\003\022\020\n\014DOUBLE_ELBOW\020\004\"X\n\026Li"
    "nearMappingFuction1D\022>\n\rlinearTimeMap\030\001 "
    "\001(\0132\'.FabByExample.proto.symbolic.Linear"
    "Expr\"b\n\031PiecewiseLinearFunction1D\022E\n\016tim"
    "esandvalues\030\001 \003(\0132-.FabByExample.proto.s"
    "ymbolic.TimeAndValuePair\"4\n\020TimeAndValue"
    "Pair\022\021\n\ttimeStamp\030\001 \001(\001\022\r\n\005value\030\002 \001(\001\"y"
    "\n\010PWLinear\0225\n\004time\030\001 \003(\0132\'.FabByExample."
    "proto.symbolic.LinearExpr\0226\n\005value\030\002 \003(\013"
    "2\'.FabByExample.proto.symbolic.LinearExp"
    "r", 2921);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "symbolic.proto", &protobuf_RegisterTypes);
  Parameter::default_instance_ = new Parameter();
  LinearExpr::default_instance_ = new LinearExpr();
  Point2S::default_instance_ = new Point2S();
  Point3S::default_instance_ = new Point3S();
  Vertex2S::default_instance_ = new Vertex2S();
  Edge2S::default_instance_ = new Edge2S();
  Face2S::default_instance_ = new Face2S();
  Drawing2S::default_instance_ = new Drawing2S();
  Vertex3S::default_instance_ = new Vertex3S();
  Edge3S::default_instance_ = new Edge3S();
  Face3S::default_instance_ = new Face3S();
  Mesh3S::default_instance_ = new Mesh3S();
  AffineMatrix3S::default_instance_ = new AffineMatrix3S();
  Transform::default_instance_ = new Transform();
  Control::default_instance_ = new Control();
  ControlMappingFunction::default_instance_ = new ControlMappingFunction();
  ParametricPiecewiseLinearFunction::default_instance_ = new ParametricPiecewiseLinearFunction();
  GrammarControllerMappingFunction::default_instance_ = new GrammarControllerMappingFunction();
  LinearMappingFuction1D::default_instance_ = new LinearMappingFuction1D();
  PiecewiseLinearFunction1D::default_instance_ = new PiecewiseLinearFunction1D();
  TimeAndValuePair::default_instance_ = new TimeAndValuePair();
  PWLinear::default_instance_ = new PWLinear();
  Parameter::default_instance_->InitAsDefaultInstance();
  LinearExpr::default_instance_->InitAsDefaultInstance();
  Point2S::default_instance_->InitAsDefaultInstance();
  Point3S::default_instance_->InitAsDefaultInstance();
  Vertex2S::default_instance_->InitAsDefaultInstance();
  Edge2S::default_instance_->InitAsDefaultInstance();
  Face2S::default_instance_->InitAsDefaultInstance();
  Drawing2S::default_instance_->InitAsDefaultInstance();
  Vertex3S::default_instance_->InitAsDefaultInstance();
  Edge3S::default_instance_->InitAsDefaultInstance();
  Face3S::default_instance_->InitAsDefaultInstance();
  Mesh3S::default_instance_->InitAsDefaultInstance();
  AffineMatrix3S::default_instance_->InitAsDefaultInstance();
  Transform::default_instance_->InitAsDefaultInstance();
  Control::default_instance_->InitAsDefaultInstance();
  ControlMappingFunction::default_instance_->InitAsDefaultInstance();
  ParametricPiecewiseLinearFunction::default_instance_->InitAsDefaultInstance();
  GrammarControllerMappingFunction::default_instance_->InitAsDefaultInstance();
  LinearMappingFuction1D::default_instance_->InitAsDefaultInstance();
  PiecewiseLinearFunction1D::default_instance_->InitAsDefaultInstance();
  TimeAndValuePair::default_instance_->InitAsDefaultInstance();
  PWLinear::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_symbolic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_symbolic_2eproto {
  StaticDescriptorInitializer_symbolic_2eproto() {
    protobuf_AddDesc_symbolic_2eproto();
  }
} static_descriptor_initializer_symbolic_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Parameter::kIdFieldNumber;
const int Parameter::kNameFieldNumber;
const int Parameter::kDefaultFieldNumber;
#endif  // !_MSC_VER

Parameter::Parameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parameter::InitAsDefaultInstance() {
}

Parameter::Parameter(const Parameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parameter::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  default__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameter::~Parameter() {
  SharedDtor();
}

void Parameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parameter_descriptor_;
}

const Parameter& Parameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

Parameter* Parameter::default_instance_ = NULL;

Parameter* Parameter::New() const {
  return new Parameter;
}

void Parameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    default__ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_default;
        break;
      }

      // optional double default = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_default:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default__)));
          set_has_default_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional double default = 3;
  if (has_default_()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->default_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional double default = 3;
  if (has_default_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->default_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double default = 3;
    if (has_default_()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_default_()) {
      set_default_(from.default_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {

  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(default__, other->default__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parameter_descriptor_;
  metadata.reflection = Parameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinearExpr::kParameterIdFieldNumber;
const int LinearExpr::kCoeffFieldNumber;
const int LinearExpr::kConstFieldNumber;
#endif  // !_MSC_VER

LinearExpr::LinearExpr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinearExpr::InitAsDefaultInstance() {
}

LinearExpr::LinearExpr(const LinearExpr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinearExpr::SharedCtor() {
  _cached_size_ = 0;
  const__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinearExpr::~LinearExpr() {
  SharedDtor();
}

void LinearExpr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LinearExpr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinearExpr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearExpr_descriptor_;
}

const LinearExpr& LinearExpr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

LinearExpr* LinearExpr::default_instance_ = NULL;

LinearExpr* LinearExpr::New() const {
  return new LinearExpr;
}

void LinearExpr::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    const__ = 0;
  }
  parameter_id_.Clear();
  coeff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinearExpr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 parameter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parameter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_parameter_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_parameter_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_parameter_id;
        if (input->ExpectTag(17)) goto parse_coeff;
        break;
      }

      // repeated double coeff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_coeff())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_coeff())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_coeff;
        if (input->ExpectTag(25)) goto parse_const;
        break;
      }

      // optional double const = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_const:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &const__)));
          set_has_const_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinearExpr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 parameter_id = 1;
  for (int i = 0; i < this->parameter_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->parameter_id(i), output);
  }

  // repeated double coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->coeff(i), output);
  }

  // optional double const = 3;
  if (has_const_()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->const_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinearExpr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 parameter_id = 1;
  for (int i = 0; i < this->parameter_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->parameter_id(i), target);
  }

  // repeated double coeff = 2;
  for (int i = 0; i < this->coeff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->coeff(i), target);
  }

  // optional double const = 3;
  if (has_const_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->const_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinearExpr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional double const = 3;
    if (has_const_()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 parameter_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->parameter_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->parameter_id(i));
    }
    total_size += 1 * this->parameter_id_size() + data_size;
  }

  // repeated double coeff = 2;
  {
    int data_size = 0;
    data_size = 8 * this->coeff_size();
    total_size += 1 * this->coeff_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinearExpr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinearExpr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinearExpr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinearExpr::MergeFrom(const LinearExpr& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_id_.MergeFrom(from.parameter_id_);
  coeff_.MergeFrom(from.coeff_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_const_()) {
      set_const_(from.const_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinearExpr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearExpr::CopyFrom(const LinearExpr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearExpr::IsInitialized() const {

  return true;
}

void LinearExpr::Swap(LinearExpr* other) {
  if (other != this) {
    parameter_id_.Swap(&other->parameter_id_);
    coeff_.Swap(&other->coeff_);
    std::swap(const__, other->const__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinearExpr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinearExpr_descriptor_;
  metadata.reflection = LinearExpr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point2S::kXFieldNumber;
const int Point2S::kYFieldNumber;
#endif  // !_MSC_VER

Point2S::Point2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point2S::InitAsDefaultInstance() {
  x_ = const_cast< ::FabByExample::proto::symbolic::LinearExpr*>(&::FabByExample::proto::symbolic::LinearExpr::default_instance());
  y_ = const_cast< ::FabByExample::proto::symbolic::LinearExpr*>(&::FabByExample::proto::symbolic::LinearExpr::default_instance());
}

Point2S::Point2S(const Point2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point2S::SharedCtor() {
  _cached_size_ = 0;
  x_ = NULL;
  y_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point2S::~Point2S() {
  SharedDtor();
}

void Point2S::SharedDtor() {
  if (this != default_instance_) {
    delete x_;
    delete y_;
  }
}

void Point2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point2S_descriptor_;
}

const Point2S& Point2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

Point2S* Point2S::default_instance_ = NULL;

Point2S* Point2S::New() const {
  return new Point2S;
}

void Point2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_x()) {
      if (x_ != NULL) x_->::FabByExample::proto::symbolic::LinearExpr::Clear();
    }
    if (has_y()) {
      if (y_ != NULL) y_->::FabByExample::proto::symbolic::LinearExpr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.LinearExpr x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_y;
        break;
      }

      // optional .FabByExample.proto.symbolic.LinearExpr y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.LinearExpr x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->x(), output);
  }

  // optional .FabByExample.proto.symbolic.LinearExpr y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.LinearExpr x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->x(), target);
  }

  // optional .FabByExample.proto.symbolic.LinearExpr y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.LinearExpr x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x());
    }

    // optional .FabByExample.proto.symbolic.LinearExpr y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point2S::MergeFrom(const Point2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      mutable_x()->::FabByExample::proto::symbolic::LinearExpr::MergeFrom(from.x());
    }
    if (from.has_y()) {
      mutable_y()->::FabByExample::proto::symbolic::LinearExpr::MergeFrom(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2S::CopyFrom(const Point2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2S::IsInitialized() const {

  return true;
}

void Point2S::Swap(Point2S* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point2S_descriptor_;
  metadata.reflection = Point2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point3S::kXFieldNumber;
const int Point3S::kYFieldNumber;
const int Point3S::kZFieldNumber;
#endif  // !_MSC_VER

Point3S::Point3S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point3S::InitAsDefaultInstance() {
  x_ = const_cast< ::FabByExample::proto::symbolic::LinearExpr*>(&::FabByExample::proto::symbolic::LinearExpr::default_instance());
  y_ = const_cast< ::FabByExample::proto::symbolic::LinearExpr*>(&::FabByExample::proto::symbolic::LinearExpr::default_instance());
  z_ = const_cast< ::FabByExample::proto::symbolic::LinearExpr*>(&::FabByExample::proto::symbolic::LinearExpr::default_instance());
}

Point3S::Point3S(const Point3S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point3S::SharedCtor() {
  _cached_size_ = 0;
  x_ = NULL;
  y_ = NULL;
  z_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point3S::~Point3S() {
  SharedDtor();
}

void Point3S::SharedDtor() {
  if (this != default_instance_) {
    delete x_;
    delete y_;
    delete z_;
  }
}

void Point3S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point3S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point3S_descriptor_;
}

const Point3S& Point3S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

Point3S* Point3S::default_instance_ = NULL;

Point3S* Point3S::New() const {
  return new Point3S;
}

void Point3S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_x()) {
      if (x_ != NULL) x_->::FabByExample::proto::symbolic::LinearExpr::Clear();
    }
    if (has_y()) {
      if (y_ != NULL) y_->::FabByExample::proto::symbolic::LinearExpr::Clear();
    }
    if (has_z()) {
      if (z_ != NULL) z_->::FabByExample::proto::symbolic::LinearExpr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point3S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.LinearExpr x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_y;
        break;
      }

      // optional .FabByExample.proto.symbolic.LinearExpr y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_z;
        break;
      }

      // optional .FabByExample.proto.symbolic.LinearExpr z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_z()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point3S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.LinearExpr x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->x(), output);
  }

  // optional .FabByExample.proto.symbolic.LinearExpr y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->y(), output);
  }

  // optional .FabByExample.proto.symbolic.LinearExpr z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point3S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.LinearExpr x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->x(), target);
  }

  // optional .FabByExample.proto.symbolic.LinearExpr y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->y(), target);
  }

  // optional .FabByExample.proto.symbolic.LinearExpr z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point3S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.LinearExpr x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x());
    }

    // optional .FabByExample.proto.symbolic.LinearExpr y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->y());
    }

    // optional .FabByExample.proto.symbolic.LinearExpr z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point3S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point3S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point3S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point3S::MergeFrom(const Point3S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      mutable_x()->::FabByExample::proto::symbolic::LinearExpr::MergeFrom(from.x());
    }
    if (from.has_y()) {
      mutable_y()->::FabByExample::proto::symbolic::LinearExpr::MergeFrom(from.y());
    }
    if (from.has_z()) {
      mutable_z()->::FabByExample::proto::symbolic::LinearExpr::MergeFrom(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point3S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3S::CopyFrom(const Point3S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3S::IsInitialized() const {

  return true;
}

void Point3S::Swap(Point3S* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point3S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point3S_descriptor_;
  metadata.reflection = Point3S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vertex2S::kIdFieldNumber;
const int Vertex2S::kNameFieldNumber;
const int Vertex2S::kPointFieldNumber;
#endif  // !_MSC_VER

Vertex2S::Vertex2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vertex2S::InitAsDefaultInstance() {
  point_ = const_cast< ::FabByExample::proto::symbolic::Point2S*>(&::FabByExample::proto::symbolic::Point2S::default_instance());
}

Vertex2S::Vertex2S(const Vertex2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vertex2S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vertex2S::~Vertex2S() {
  SharedDtor();
}

void Vertex2S::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete point_;
  }
}

void Vertex2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vertex2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vertex2S_descriptor_;
}

const Vertex2S& Vertex2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

Vertex2S* Vertex2S::default_instance_ = NULL;

Vertex2S* Vertex2S::New() const {
  return new Vertex2S;
}

void Vertex2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_point()) {
      if (point_ != NULL) point_->::FabByExample::proto::symbolic::Point2S::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vertex2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_point;
        break;
      }

      // optional .FabByExample.proto.symbolic.Point2S point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vertex2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .FabByExample.proto.symbolic.Point2S point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vertex2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .FabByExample.proto.symbolic.Point2S point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vertex2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .FabByExample.proto.symbolic.Point2S point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vertex2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vertex2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vertex2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vertex2S::MergeFrom(const Vertex2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_point()) {
      mutable_point()->::FabByExample::proto::symbolic::Point2S::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vertex2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vertex2S::CopyFrom(const Vertex2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertex2S::IsInitialized() const {

  return true;
}

void Vertex2S::Swap(Vertex2S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vertex2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vertex2S_descriptor_;
  metadata.reflection = Vertex2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Edge2S::kIdFieldNumber;
const int Edge2S::kNameFieldNumber;
const int Edge2S::kVertex1IdFieldNumber;
const int Edge2S::kVertex2IdFieldNumber;
#endif  // !_MSC_VER

Edge2S::Edge2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Edge2S::InitAsDefaultInstance() {
}

Edge2S::Edge2S(const Edge2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Edge2S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  vertex1_id_ = 0;
  vertex2_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Edge2S::~Edge2S() {
  SharedDtor();
}

void Edge2S::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Edge2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge2S_descriptor_;
}

const Edge2S& Edge2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

Edge2S* Edge2S::default_instance_ = NULL;

Edge2S* Edge2S::New() const {
  return new Edge2S;
}

void Edge2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    vertex1_id_ = 0;
    vertex2_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Edge2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vertex1_id;
        break;
      }

      // optional int32 vertex1_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertex1_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertex1_id_)));
          set_has_vertex1_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vertex2_id;
        break;
      }

      // optional int32 vertex2_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertex2_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertex2_id_)));
          set_has_vertex2_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Edge2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 vertex1_id = 3;
  if (has_vertex1_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vertex1_id(), output);
  }

  // optional int32 vertex2_id = 4;
  if (has_vertex2_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vertex2_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Edge2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 vertex1_id = 3;
  if (has_vertex1_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vertex1_id(), target);
  }

  // optional int32 vertex2_id = 4;
  if (has_vertex2_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vertex2_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Edge2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 vertex1_id = 3;
    if (has_vertex1_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertex1_id());
    }

    // optional int32 vertex2_id = 4;
    if (has_vertex2_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertex2_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Edge2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Edge2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Edge2S::MergeFrom(const Edge2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_vertex1_id()) {
      set_vertex1_id(from.vertex1_id());
    }
    if (from.has_vertex2_id()) {
      set_vertex2_id(from.vertex2_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Edge2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge2S::CopyFrom(const Edge2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge2S::IsInitialized() const {

  return true;
}

void Edge2S::Swap(Edge2S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(vertex1_id_, other->vertex1_id_);
    std::swap(vertex2_id_, other->vertex2_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Edge2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge2S_descriptor_;
  metadata.reflection = Edge2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Face2S::kIdFieldNumber;
const int Face2S::kNameFieldNumber;
const int Face2S::kVertexIdFieldNumber;
const int Face2S::kEdgeIdFieldNumber;
#endif  // !_MSC_VER

Face2S::Face2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Face2S::InitAsDefaultInstance() {
}

Face2S::Face2S(const Face2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Face2S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Face2S::~Face2S() {
  SharedDtor();
}

void Face2S::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Face2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Face2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Face2S_descriptor_;
}

const Face2S& Face2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

Face2S* Face2S::default_instance_ = NULL;

Face2S* Face2S::New() const {
  return new Face2S;
}

void Face2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
  }
  vertex_id_.Clear();
  edge_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Face2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vertex_id;
        break;
      }

      // repeated int32 vertex_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertex_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_vertex_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vertex_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vertex_id;
        if (input->ExpectTag(32)) goto parse_edge_id;
        break;
      }

      // repeated int32 edge_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_edge_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_edge_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_edge_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Face2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // repeated int32 vertex_id = 3;
  for (int i = 0; i < this->vertex_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->vertex_id(i), output);
  }

  // repeated int32 edge_id = 4;
  for (int i = 0; i < this->edge_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->edge_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Face2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated int32 vertex_id = 3;
  for (int i = 0; i < this->vertex_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->vertex_id(i), target);
  }

  // repeated int32 edge_id = 4;
  for (int i = 0; i < this->edge_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->edge_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Face2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated int32 vertex_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->vertex_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vertex_id(i));
    }
    total_size += 1 * this->vertex_id_size() + data_size;
  }

  // repeated int32 edge_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->edge_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->edge_id(i));
    }
    total_size += 1 * this->edge_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Face2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Face2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Face2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Face2S::MergeFrom(const Face2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertex_id_.MergeFrom(from.vertex_id_);
  edge_id_.MergeFrom(from.edge_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Face2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Face2S::CopyFrom(const Face2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face2S::IsInitialized() const {

  return true;
}

void Face2S::Swap(Face2S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    vertex_id_.Swap(&other->vertex_id_);
    edge_id_.Swap(&other->edge_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Face2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Face2S_descriptor_;
  metadata.reflection = Face2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Drawing2S::kIdFieldNumber;
const int Drawing2S::kNameFieldNumber;
const int Drawing2S::kVertexFieldNumber;
const int Drawing2S::kEdgeFieldNumber;
const int Drawing2S::kFaceFieldNumber;
#endif  // !_MSC_VER

Drawing2S::Drawing2S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Drawing2S::InitAsDefaultInstance() {
}

Drawing2S::Drawing2S(const Drawing2S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Drawing2S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Drawing2S::~Drawing2S() {
  SharedDtor();
}

void Drawing2S::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Drawing2S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Drawing2S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Drawing2S_descriptor_;
}

const Drawing2S& Drawing2S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

Drawing2S* Drawing2S::default_instance_ = NULL;

Drawing2S* Drawing2S::New() const {
  return new Drawing2S;
}

void Drawing2S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
  }
  vertex_.Clear();
  edge_.Clear();
  face_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Drawing2S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vertex;
        break;
      }

      // repeated .FabByExample.proto.symbolic.Vertex2S vertex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vertex;
        if (input->ExpectTag(34)) goto parse_edge;
        break;
      }

      // repeated .FabByExample.proto.symbolic.Edge2S edge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_edge;
        if (input->ExpectTag(42)) goto parse_face;
        break;
      }

      // repeated .FabByExample.proto.symbolic.Face2S face = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_face()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_face;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Drawing2S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // repeated .FabByExample.proto.symbolic.Vertex2S vertex = 3;
  for (int i = 0; i < this->vertex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vertex(i), output);
  }

  // repeated .FabByExample.proto.symbolic.Edge2S edge = 4;
  for (int i = 0; i < this->edge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->edge(i), output);
  }

  // repeated .FabByExample.proto.symbolic.Face2S face = 5;
  for (int i = 0; i < this->face_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->face(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Drawing2S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .FabByExample.proto.symbolic.Vertex2S vertex = 3;
  for (int i = 0; i < this->vertex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vertex(i), target);
  }

  // repeated .FabByExample.proto.symbolic.Edge2S edge = 4;
  for (int i = 0; i < this->edge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->edge(i), target);
  }

  // repeated .FabByExample.proto.symbolic.Face2S face = 5;
  for (int i = 0; i < this->face_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->face(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Drawing2S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .FabByExample.proto.symbolic.Vertex2S vertex = 3;
  total_size += 1 * this->vertex_size();
  for (int i = 0; i < this->vertex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertex(i));
  }

  // repeated .FabByExample.proto.symbolic.Edge2S edge = 4;
  total_size += 1 * this->edge_size();
  for (int i = 0; i < this->edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge(i));
  }

  // repeated .FabByExample.proto.symbolic.Face2S face = 5;
  total_size += 1 * this->face_size();
  for (int i = 0; i < this->face_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->face(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Drawing2S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Drawing2S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Drawing2S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Drawing2S::MergeFrom(const Drawing2S& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertex_.MergeFrom(from.vertex_);
  edge_.MergeFrom(from.edge_);
  face_.MergeFrom(from.face_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Drawing2S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Drawing2S::CopyFrom(const Drawing2S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Drawing2S::IsInitialized() const {

  return true;
}

void Drawing2S::Swap(Drawing2S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    vertex_.Swap(&other->vertex_);
    edge_.Swap(&other->edge_);
    face_.Swap(&other->face_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Drawing2S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Drawing2S_descriptor_;
  metadata.reflection = Drawing2S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vertex3S::kIdFieldNumber;
const int Vertex3S::kNameFieldNumber;
const int Vertex3S::kPointFieldNumber;
#endif  // !_MSC_VER

Vertex3S::Vertex3S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vertex3S::InitAsDefaultInstance() {
  point_ = const_cast< ::FabByExample::proto::symbolic::Point3S*>(&::FabByExample::proto::symbolic::Point3S::default_instance());
}

Vertex3S::Vertex3S(const Vertex3S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vertex3S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vertex3S::~Vertex3S() {
  SharedDtor();
}

void Vertex3S::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete point_;
  }
}

void Vertex3S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vertex3S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vertex3S_descriptor_;
}

const Vertex3S& Vertex3S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

Vertex3S* Vertex3S::default_instance_ = NULL;

Vertex3S* Vertex3S::New() const {
  return new Vertex3S;
}

void Vertex3S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_point()) {
      if (point_ != NULL) point_->::FabByExample::proto::symbolic::Point3S::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vertex3S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_point;
        break;
      }

      // optional .FabByExample.proto.symbolic.Point3S point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vertex3S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .FabByExample.proto.symbolic.Point3S point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vertex3S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .FabByExample.proto.symbolic.Point3S point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vertex3S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .FabByExample.proto.symbolic.Point3S point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vertex3S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vertex3S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vertex3S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vertex3S::MergeFrom(const Vertex3S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_point()) {
      mutable_point()->::FabByExample::proto::symbolic::Point3S::MergeFrom(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vertex3S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vertex3S::CopyFrom(const Vertex3S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertex3S::IsInitialized() const {

  return true;
}

void Vertex3S::Swap(Vertex3S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vertex3S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vertex3S_descriptor_;
  metadata.reflection = Vertex3S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Edge3S::kIdFieldNumber;
const int Edge3S::kNameFieldNumber;
const int Edge3S::kVertex1IdFieldNumber;
const int Edge3S::kVertex2IdFieldNumber;
#endif  // !_MSC_VER

Edge3S::Edge3S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Edge3S::InitAsDefaultInstance() {
}

Edge3S::Edge3S(const Edge3S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Edge3S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  vertex1_id_ = 0;
  vertex2_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Edge3S::~Edge3S() {
  SharedDtor();
}

void Edge3S::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Edge3S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge3S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge3S_descriptor_;
}

const Edge3S& Edge3S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

Edge3S* Edge3S::default_instance_ = NULL;

Edge3S* Edge3S::New() const {
  return new Edge3S;
}

void Edge3S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    vertex1_id_ = 0;
    vertex2_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Edge3S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vertex1_id;
        break;
      }

      // optional int32 vertex1_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertex1_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertex1_id_)));
          set_has_vertex1_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_vertex2_id;
        break;
      }

      // optional int32 vertex2_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertex2_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertex2_id_)));
          set_has_vertex2_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Edge3S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 vertex1_id = 3;
  if (has_vertex1_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vertex1_id(), output);
  }

  // optional int32 vertex2_id = 4;
  if (has_vertex2_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vertex2_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Edge3S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 vertex1_id = 3;
  if (has_vertex1_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vertex1_id(), target);
  }

  // optional int32 vertex2_id = 4;
  if (has_vertex2_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vertex2_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Edge3S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 vertex1_id = 3;
    if (has_vertex1_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertex1_id());
    }

    // optional int32 vertex2_id = 4;
    if (has_vertex2_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertex2_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge3S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Edge3S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Edge3S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Edge3S::MergeFrom(const Edge3S& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_vertex1_id()) {
      set_vertex1_id(from.vertex1_id());
    }
    if (from.has_vertex2_id()) {
      set_vertex2_id(from.vertex2_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Edge3S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge3S::CopyFrom(const Edge3S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge3S::IsInitialized() const {

  return true;
}

void Edge3S::Swap(Edge3S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(vertex1_id_, other->vertex1_id_);
    std::swap(vertex2_id_, other->vertex2_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Edge3S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge3S_descriptor_;
  metadata.reflection = Edge3S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Face3S::kIdFieldNumber;
const int Face3S::kNameFieldNumber;
const int Face3S::kVertexIdFieldNumber;
const int Face3S::kEdgeIdFieldNumber;
#endif  // !_MSC_VER

Face3S::Face3S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Face3S::InitAsDefaultInstance() {
}

Face3S::Face3S(const Face3S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Face3S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Face3S::~Face3S() {
  SharedDtor();
}

void Face3S::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Face3S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Face3S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Face3S_descriptor_;
}

const Face3S& Face3S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

Face3S* Face3S::default_instance_ = NULL;

Face3S* Face3S::New() const {
  return new Face3S;
}

void Face3S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
  }
  vertex_id_.Clear();
  edge_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Face3S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vertex_id;
        break;
      }

      // repeated int32 vertex_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vertex_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_vertex_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vertex_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vertex_id;
        if (input->ExpectTag(32)) goto parse_edge_id;
        break;
      }

      // repeated int32 edge_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edge_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_edge_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_edge_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_edge_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Face3S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // repeated int32 vertex_id = 3;
  for (int i = 0; i < this->vertex_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->vertex_id(i), output);
  }

  // repeated int32 edge_id = 4;
  for (int i = 0; i < this->edge_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->edge_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Face3S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated int32 vertex_id = 3;
  for (int i = 0; i < this->vertex_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->vertex_id(i), target);
  }

  // repeated int32 edge_id = 4;
  for (int i = 0; i < this->edge_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->edge_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Face3S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated int32 vertex_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->vertex_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vertex_id(i));
    }
    total_size += 1 * this->vertex_id_size() + data_size;
  }

  // repeated int32 edge_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->edge_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->edge_id(i));
    }
    total_size += 1 * this->edge_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Face3S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Face3S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Face3S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Face3S::MergeFrom(const Face3S& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertex_id_.MergeFrom(from.vertex_id_);
  edge_id_.MergeFrom(from.edge_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Face3S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Face3S::CopyFrom(const Face3S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face3S::IsInitialized() const {

  return true;
}

void Face3S::Swap(Face3S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    vertex_id_.Swap(&other->vertex_id_);
    edge_id_.Swap(&other->edge_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Face3S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Face3S_descriptor_;
  metadata.reflection = Face3S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mesh3S::kIdFieldNumber;
const int Mesh3S::kNameFieldNumber;
const int Mesh3S::kVertexFieldNumber;
const int Mesh3S::kEdgeFieldNumber;
const int Mesh3S::kFaceFieldNumber;
#endif  // !_MSC_VER

Mesh3S::Mesh3S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Mesh3S::InitAsDefaultInstance() {
}

Mesh3S::Mesh3S(const Mesh3S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Mesh3S::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mesh3S::~Mesh3S() {
  SharedDtor();
}

void Mesh3S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mesh3S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh3S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh3S_descriptor_;
}

const Mesh3S& Mesh3S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

Mesh3S* Mesh3S::default_instance_ = NULL;

Mesh3S* Mesh3S::New() const {
  return new Mesh3S;
}

void Mesh3S::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    name_ = 0;
  }
  vertex_.Clear();
  edge_.Clear();
  face_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mesh3S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // optional int32 name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vertex;
        break;
      }

      // repeated .FabByExample.proto.symbolic.Vertex3S vertex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vertex;
        if (input->ExpectTag(34)) goto parse_edge;
        break;
      }

      // repeated .FabByExample.proto.symbolic.Edge3S edge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_edge;
        if (input->ExpectTag(42)) goto parse_face;
        break;
      }

      // repeated .FabByExample.proto.symbolic.Face3S face = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_face()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_face;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Mesh3S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->name(), output);
  }

  // repeated .FabByExample.proto.symbolic.Vertex3S vertex = 3;
  for (int i = 0; i < this->vertex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vertex(i), output);
  }

  // repeated .FabByExample.proto.symbolic.Edge3S edge = 4;
  for (int i = 0; i < this->edge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->edge(i), output);
  }

  // repeated .FabByExample.proto.symbolic.Face3S face = 5;
  for (int i = 0; i < this->face_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->face(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Mesh3S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->name(), target);
  }

  // repeated .FabByExample.proto.symbolic.Vertex3S vertex = 3;
  for (int i = 0; i < this->vertex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vertex(i), target);
  }

  // repeated .FabByExample.proto.symbolic.Edge3S edge = 4;
  for (int i = 0; i < this->edge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->edge(i), target);
  }

  // repeated .FabByExample.proto.symbolic.Face3S face = 5;
  for (int i = 0; i < this->face_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->face(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Mesh3S::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name());
    }

  }
  // repeated .FabByExample.proto.symbolic.Vertex3S vertex = 3;
  total_size += 1 * this->vertex_size();
  for (int i = 0; i < this->vertex_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertex(i));
  }

  // repeated .FabByExample.proto.symbolic.Edge3S edge = 4;
  total_size += 1 * this->edge_size();
  for (int i = 0; i < this->edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge(i));
  }

  // repeated .FabByExample.proto.symbolic.Face3S face = 5;
  total_size += 1 * this->face_size();
  for (int i = 0; i < this->face_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->face(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh3S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mesh3S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mesh3S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mesh3S::MergeFrom(const Mesh3S& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertex_.MergeFrom(from.vertex_);
  edge_.MergeFrom(from.edge_);
  face_.MergeFrom(from.face_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mesh3S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh3S::CopyFrom(const Mesh3S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh3S::IsInitialized() const {

  return true;
}

void Mesh3S::Swap(Mesh3S* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    vertex_.Swap(&other->vertex_);
    edge_.Swap(&other->edge_);
    face_.Swap(&other->face_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mesh3S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mesh3S_descriptor_;
  metadata.reflection = Mesh3S_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AffineMatrix3S::kValueFieldNumber;
#endif  // !_MSC_VER

AffineMatrix3S::AffineMatrix3S()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AffineMatrix3S::InitAsDefaultInstance() {
}

AffineMatrix3S::AffineMatrix3S(const AffineMatrix3S& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AffineMatrix3S::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AffineMatrix3S::~AffineMatrix3S() {
  SharedDtor();
}

void AffineMatrix3S::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AffineMatrix3S::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AffineMatrix3S::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AffineMatrix3S_descriptor_;
}

const AffineMatrix3S& AffineMatrix3S::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

AffineMatrix3S* AffineMatrix3S::default_instance_ = NULL;

AffineMatrix3S* AffineMatrix3S::New() const {
  return new AffineMatrix3S;
}

void AffineMatrix3S::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AffineMatrix3S::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FabByExample.proto.symbolic.LinearExpr value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AffineMatrix3S::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FabByExample.proto.symbolic.LinearExpr value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AffineMatrix3S::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FabByExample.proto.symbolic.LinearExpr value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AffineMatrix3S::ByteSize() const {
  int total_size = 0;

  // repeated .FabByExample.proto.symbolic.LinearExpr value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AffineMatrix3S::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AffineMatrix3S* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AffineMatrix3S*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AffineMatrix3S::MergeFrom(const AffineMatrix3S& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AffineMatrix3S::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AffineMatrix3S::CopyFrom(const AffineMatrix3S& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AffineMatrix3S::IsInitialized() const {

  return true;
}

void AffineMatrix3S::Swap(AffineMatrix3S* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AffineMatrix3S::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AffineMatrix3S_descriptor_;
  metadata.reflection = AffineMatrix3S_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Transform_TransformType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transform_TransformType_descriptor_;
}
bool Transform_TransformType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Transform_TransformType Transform::REVOLUTE_TRANSFORM;
const Transform_TransformType Transform::PRISMATIC_TRANSFORM;
const Transform_TransformType Transform::TransformType_MIN;
const Transform_TransformType Transform::TransformType_MAX;
const int Transform::TransformType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Transform::kControlFieldNumber;
const int Transform::kAxisFieldNumber;
const int Transform::kTypeFieldNumber;
const int Transform::kMinValFieldNumber;
const int Transform::kMaxValFieldNumber;
#endif  // !_MSC_VER

Transform::Transform()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Transform::InitAsDefaultInstance() {
  control_ = const_cast< ::FabByExample::proto::symbolic::Control*>(&::FabByExample::proto::symbolic::Control::default_instance());
  axis_ = const_cast< ::FabByExample::proto::symbolic::Point3S*>(&::FabByExample::proto::symbolic::Point3S::default_instance());
}

Transform::Transform(const Transform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Transform::SharedCtor() {
  _cached_size_ = 0;
  control_ = NULL;
  axis_ = NULL;
  type_ = 1;
  minval_ = 0;
  maxval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transform::~Transform() {
  SharedDtor();
}

void Transform::SharedDtor() {
  if (this != default_instance_) {
    delete control_;
    delete axis_;
  }
}

void Transform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transform_descriptor_;
}

const Transform& Transform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

Transform* Transform::default_instance_ = NULL;

Transform* Transform::New() const {
  return new Transform;
}

void Transform::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_control()) {
      if (control_ != NULL) control_->::FabByExample::proto::symbolic::Control::Clear();
    }
    if (has_axis()) {
      if (axis_ != NULL) axis_->::FabByExample::proto::symbolic::Point3S::Clear();
    }
    type_ = 1;
    minval_ = 0;
    maxval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.Control control = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_axis;
        break;
      }

      // optional .FabByExample.proto.symbolic.Point3S axis = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_axis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .FabByExample.proto.symbolic.Transform.TransformType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FabByExample::proto::symbolic::Transform_TransformType_IsValid(value)) {
            set_type(static_cast< ::FabByExample::proto::symbolic::Transform_TransformType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_minVal;
        break;
      }

      // optional double minVal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minval_)));
          set_has_minval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_maxVal;
        break;
      }

      // optional double maxVal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxval_)));
          set_has_maxval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Transform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.Control control = 1;
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->control(), output);
  }

  // optional .FabByExample.proto.symbolic.Point3S axis = 2;
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->axis(), output);
  }

  // optional .FabByExample.proto.symbolic.Transform.TransformType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional double minVal = 4;
  if (has_minval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->minval(), output);
  }

  // optional double maxVal = 5;
  if (has_maxval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->maxval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Transform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.Control control = 1;
  if (has_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->control(), target);
  }

  // optional .FabByExample.proto.symbolic.Point3S axis = 2;
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->axis(), target);
  }

  // optional .FabByExample.proto.symbolic.Transform.TransformType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional double minVal = 4;
  if (has_minval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->minval(), target);
  }

  // optional double maxVal = 5;
  if (has_maxval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->maxval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Transform::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.Control control = 1;
    if (has_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control());
    }

    // optional .FabByExample.proto.symbolic.Point3S axis = 2;
    if (has_axis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->axis());
    }

    // optional .FabByExample.proto.symbolic.Transform.TransformType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double minVal = 4;
    if (has_minval()) {
      total_size += 1 + 8;
    }

    // optional double maxVal = 5;
    if (has_maxval()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control()) {
      mutable_control()->::FabByExample::proto::symbolic::Control::MergeFrom(from.control());
    }
    if (from.has_axis()) {
      mutable_axis()->::FabByExample::proto::symbolic::Point3S::MergeFrom(from.axis());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_minval()) {
      set_minval(from.minval());
    }
    if (from.has_maxval()) {
      set_maxval(from.maxval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {

  return true;
}

void Transform::Swap(Transform* other) {
  if (other != this) {
    std::swap(control_, other->control_);
    std::swap(axis_, other->axis_);
    std::swap(type_, other->type_);
    std::swap(minval_, other->minval_);
    std::swap(maxval_, other->maxval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transform_descriptor_;
  metadata.reflection = Transform_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Control::kIdFieldNumber;
const int Control::kNameFieldNumber;
const int Control::kInputsFieldNumber;
#endif  // !_MSC_VER

Control::Control()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Control::InitAsDefaultInstance() {
  inputs_ = const_cast< ::FabByExample::proto::symbolic::ControlMappingFunction*>(&::FabByExample::proto::symbolic::ControlMappingFunction::default_instance());
}

Control::Control(const Control& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Control::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  inputs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Control::~Control() {
  SharedDtor();
}

void Control::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete inputs_;
  }
}

void Control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_descriptor_;
}

const Control& Control::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

Control* Control::default_instance_ = NULL;

Control* Control::New() const {
  return new Control;
}

void Control::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_inputs()) {
      if (inputs_ != NULL) inputs_->::FabByExample::proto::symbolic::ControlMappingFunction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_inputs;
        break;
      }

      // optional .FabByExample.proto.symbolic.ControlMappingFunction inputs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inputs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .FabByExample.proto.symbolic.ControlMappingFunction inputs = 3;
  if (has_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->inputs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Control::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .FabByExample.proto.symbolic.ControlMappingFunction inputs = 3;
  if (has_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->inputs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Control::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .FabByExample.proto.symbolic.ControlMappingFunction inputs = 3;
    if (has_inputs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inputs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Control* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Control*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_inputs()) {
      mutable_inputs()->::FabByExample::proto::symbolic::ControlMappingFunction::MergeFrom(from.inputs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Control::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {

  return true;
}

void Control::Swap(Control* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(inputs_, other->inputs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Control::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Control_descriptor_;
  metadata.reflection = Control_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ControlMappingFunction::kLinear1FieldNumber;
const int ControlMappingFunction::kPiecewiselinearFieldNumber;
const int ControlMappingFunction::kPiecewiseFunctionFieldNumber;
const int ControlMappingFunction::kSymbolicControllerFieldNumber;
const int ControlMappingFunction::kGrammarFunctionFieldNumber;
#endif  // !_MSC_VER

ControlMappingFunction::ControlMappingFunction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControlMappingFunction::InitAsDefaultInstance() {
  linear_1_ = const_cast< ::FabByExample::proto::symbolic::LinearMappingFuction1D*>(&::FabByExample::proto::symbolic::LinearMappingFuction1D::default_instance());
  piecewiselinear_ = const_cast< ::FabByExample::proto::symbolic::PiecewiseLinearFunction1D*>(&::FabByExample::proto::symbolic::PiecewiseLinearFunction1D::default_instance());
  piecewisefunction_ = const_cast< ::FabByExample::proto::symbolic::ParametricPiecewiseLinearFunction*>(&::FabByExample::proto::symbolic::ParametricPiecewiseLinearFunction::default_instance());
  grammarfunction_ = const_cast< ::FabByExample::proto::symbolic::GrammarControllerMappingFunction*>(&::FabByExample::proto::symbolic::GrammarControllerMappingFunction::default_instance());
}

ControlMappingFunction::ControlMappingFunction(const ControlMappingFunction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControlMappingFunction::SharedCtor() {
  _cached_size_ = 0;
  linear_1_ = NULL;
  piecewiselinear_ = NULL;
  piecewisefunction_ = NULL;
  symboliccontroller_ = 0;
  grammarfunction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlMappingFunction::~ControlMappingFunction() {
  SharedDtor();
}

void ControlMappingFunction::SharedDtor() {
  if (this != default_instance_) {
    delete linear_1_;
    delete piecewiselinear_;
    delete piecewisefunction_;
    delete grammarfunction_;
  }
}

void ControlMappingFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlMappingFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlMappingFunction_descriptor_;
}

const ControlMappingFunction& ControlMappingFunction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

ControlMappingFunction* ControlMappingFunction::default_instance_ = NULL;

ControlMappingFunction* ControlMappingFunction::New() const {
  return new ControlMappingFunction;
}

void ControlMappingFunction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_linear_1()) {
      if (linear_1_ != NULL) linear_1_->::FabByExample::proto::symbolic::LinearMappingFuction1D::Clear();
    }
    if (has_piecewiselinear()) {
      if (piecewiselinear_ != NULL) piecewiselinear_->::FabByExample::proto::symbolic::PiecewiseLinearFunction1D::Clear();
    }
    if (has_piecewisefunction()) {
      if (piecewisefunction_ != NULL) piecewisefunction_->::FabByExample::proto::symbolic::ParametricPiecewiseLinearFunction::Clear();
    }
    symboliccontroller_ = 0;
    if (has_grammarfunction()) {
      if (grammarfunction_ != NULL) grammarfunction_->::FabByExample::proto::symbolic::GrammarControllerMappingFunction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControlMappingFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.LinearMappingFuction1D linear_1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_piecewiselinear;
        break;
      }

      // optional .FabByExample.proto.symbolic.PiecewiseLinearFunction1D piecewiselinear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_piecewiselinear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_piecewiselinear()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_piecewiseFunction;
        break;
      }

      // optional .FabByExample.proto.symbolic.ParametricPiecewiseLinearFunction piecewiseFunction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_piecewiseFunction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_piecewisefunction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_symbolicController;
        break;
      }

      // optional int32 symbolicController = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_symbolicController:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symboliccontroller_)));
          set_has_symboliccontroller();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_grammarFunction;
        break;
      }

      // optional .FabByExample.proto.symbolic.GrammarControllerMappingFunction grammarFunction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grammarFunction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grammarfunction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControlMappingFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.LinearMappingFuction1D linear_1 = 1;
  if (has_linear_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->linear_1(), output);
  }

  // optional .FabByExample.proto.symbolic.PiecewiseLinearFunction1D piecewiselinear = 2;
  if (has_piecewiselinear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->piecewiselinear(), output);
  }

  // optional .FabByExample.proto.symbolic.ParametricPiecewiseLinearFunction piecewiseFunction = 3;
  if (has_piecewisefunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->piecewisefunction(), output);
  }

  // optional int32 symbolicController = 4;
  if (has_symboliccontroller()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->symboliccontroller(), output);
  }

  // optional .FabByExample.proto.symbolic.GrammarControllerMappingFunction grammarFunction = 5;
  if (has_grammarfunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->grammarfunction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControlMappingFunction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.LinearMappingFuction1D linear_1 = 1;
  if (has_linear_1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->linear_1(), target);
  }

  // optional .FabByExample.proto.symbolic.PiecewiseLinearFunction1D piecewiselinear = 2;
  if (has_piecewiselinear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->piecewiselinear(), target);
  }

  // optional .FabByExample.proto.symbolic.ParametricPiecewiseLinearFunction piecewiseFunction = 3;
  if (has_piecewisefunction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->piecewisefunction(), target);
  }

  // optional int32 symbolicController = 4;
  if (has_symboliccontroller()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->symboliccontroller(), target);
  }

  // optional .FabByExample.proto.symbolic.GrammarControllerMappingFunction grammarFunction = 5;
  if (has_grammarfunction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->grammarfunction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControlMappingFunction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.LinearMappingFuction1D linear_1 = 1;
    if (has_linear_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_1());
    }

    // optional .FabByExample.proto.symbolic.PiecewiseLinearFunction1D piecewiselinear = 2;
    if (has_piecewiselinear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->piecewiselinear());
    }

    // optional .FabByExample.proto.symbolic.ParametricPiecewiseLinearFunction piecewiseFunction = 3;
    if (has_piecewisefunction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->piecewisefunction());
    }

    // optional int32 symbolicController = 4;
    if (has_symboliccontroller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->symboliccontroller());
    }

    // optional .FabByExample.proto.symbolic.GrammarControllerMappingFunction grammarFunction = 5;
    if (has_grammarfunction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grammarfunction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlMappingFunction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControlMappingFunction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControlMappingFunction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlMappingFunction::MergeFrom(const ControlMappingFunction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linear_1()) {
      mutable_linear_1()->::FabByExample::proto::symbolic::LinearMappingFuction1D::MergeFrom(from.linear_1());
    }
    if (from.has_piecewiselinear()) {
      mutable_piecewiselinear()->::FabByExample::proto::symbolic::PiecewiseLinearFunction1D::MergeFrom(from.piecewiselinear());
    }
    if (from.has_piecewisefunction()) {
      mutable_piecewisefunction()->::FabByExample::proto::symbolic::ParametricPiecewiseLinearFunction::MergeFrom(from.piecewisefunction());
    }
    if (from.has_symboliccontroller()) {
      set_symboliccontroller(from.symboliccontroller());
    }
    if (from.has_grammarfunction()) {
      mutable_grammarfunction()->::FabByExample::proto::symbolic::GrammarControllerMappingFunction::MergeFrom(from.grammarfunction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControlMappingFunction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlMappingFunction::CopyFrom(const ControlMappingFunction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMappingFunction::IsInitialized() const {

  return true;
}

void ControlMappingFunction::Swap(ControlMappingFunction* other) {
  if (other != this) {
    std::swap(linear_1_, other->linear_1_);
    std::swap(piecewiselinear_, other->piecewiselinear_);
    std::swap(piecewisefunction_, other->piecewisefunction_);
    std::swap(symboliccontroller_, other->symboliccontroller_);
    std::swap(grammarfunction_, other->grammarfunction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControlMappingFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlMappingFunction_descriptor_;
  metadata.reflection = ControlMappingFunction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParametricPiecewiseLinearFunction::kPairsFieldNumber;
#endif  // !_MSC_VER

ParametricPiecewiseLinearFunction::ParametricPiecewiseLinearFunction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParametricPiecewiseLinearFunction::InitAsDefaultInstance() {
}

ParametricPiecewiseLinearFunction::ParametricPiecewiseLinearFunction(const ParametricPiecewiseLinearFunction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParametricPiecewiseLinearFunction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParametricPiecewiseLinearFunction::~ParametricPiecewiseLinearFunction() {
  SharedDtor();
}

void ParametricPiecewiseLinearFunction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParametricPiecewiseLinearFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParametricPiecewiseLinearFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParametricPiecewiseLinearFunction_descriptor_;
}

const ParametricPiecewiseLinearFunction& ParametricPiecewiseLinearFunction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

ParametricPiecewiseLinearFunction* ParametricPiecewiseLinearFunction::default_instance_ = NULL;

ParametricPiecewiseLinearFunction* ParametricPiecewiseLinearFunction::New() const {
  return new ParametricPiecewiseLinearFunction;
}

void ParametricPiecewiseLinearFunction::Clear() {
  pairs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParametricPiecewiseLinearFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FabByExample.proto.symbolic.PWLinear pairs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pairs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pairs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParametricPiecewiseLinearFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FabByExample.proto.symbolic.PWLinear pairs = 1;
  for (int i = 0; i < this->pairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pairs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParametricPiecewiseLinearFunction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FabByExample.proto.symbolic.PWLinear pairs = 1;
  for (int i = 0; i < this->pairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pairs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParametricPiecewiseLinearFunction::ByteSize() const {
  int total_size = 0;

  // repeated .FabByExample.proto.symbolic.PWLinear pairs = 1;
  total_size += 1 * this->pairs_size();
  for (int i = 0; i < this->pairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pairs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParametricPiecewiseLinearFunction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParametricPiecewiseLinearFunction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParametricPiecewiseLinearFunction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParametricPiecewiseLinearFunction::MergeFrom(const ParametricPiecewiseLinearFunction& from) {
  GOOGLE_CHECK_NE(&from, this);
  pairs_.MergeFrom(from.pairs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParametricPiecewiseLinearFunction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParametricPiecewiseLinearFunction::CopyFrom(const ParametricPiecewiseLinearFunction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParametricPiecewiseLinearFunction::IsInitialized() const {

  return true;
}

void ParametricPiecewiseLinearFunction::Swap(ParametricPiecewiseLinearFunction* other) {
  if (other != this) {
    pairs_.Swap(&other->pairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParametricPiecewiseLinearFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParametricPiecewiseLinearFunction_descriptor_;
  metadata.reflection = ParametricPiecewiseLinearFunction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GrammarControllerMappingFunction_GrammarControllerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrammarControllerMappingFunction_GrammarControllerType_descriptor_;
}
bool GrammarControllerMappingFunction_GrammarControllerType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GrammarControllerMappingFunction_GrammarControllerType GrammarControllerMappingFunction::WHEEL;
const GrammarControllerMappingFunction_GrammarControllerType GrammarControllerMappingFunction::LEG;
const GrammarControllerMappingFunction_GrammarControllerType GrammarControllerMappingFunction::DOUBLE_SHOULDER;
const GrammarControllerMappingFunction_GrammarControllerType GrammarControllerMappingFunction::DOUBLE_ELBOW;
const GrammarControllerMappingFunction_GrammarControllerType GrammarControllerMappingFunction::GrammarControllerType_MIN;
const GrammarControllerMappingFunction_GrammarControllerType GrammarControllerMappingFunction::GrammarControllerType_MAX;
const int GrammarControllerMappingFunction::GrammarControllerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GrammarControllerMappingFunction::kTypeFieldNumber;
const int GrammarControllerMappingFunction::kThetaFieldNumber;
const int GrammarControllerMappingFunction::kNIntervalsFieldNumber;
const int GrammarControllerMappingFunction::kIIntervalFieldNumber;
const int GrammarControllerMappingFunction::kMultiFieldNumber;
#endif  // !_MSC_VER

GrammarControllerMappingFunction::GrammarControllerMappingFunction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrammarControllerMappingFunction::InitAsDefaultInstance() {
}

GrammarControllerMappingFunction::GrammarControllerMappingFunction(const GrammarControllerMappingFunction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrammarControllerMappingFunction::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  theta_ = 0;
  n_intervals_ = 0;
  i_interval_ = 0;
  multi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrammarControllerMappingFunction::~GrammarControllerMappingFunction() {
  SharedDtor();
}

void GrammarControllerMappingFunction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrammarControllerMappingFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrammarControllerMappingFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrammarControllerMappingFunction_descriptor_;
}

const GrammarControllerMappingFunction& GrammarControllerMappingFunction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

GrammarControllerMappingFunction* GrammarControllerMappingFunction::default_instance_ = NULL;

GrammarControllerMappingFunction* GrammarControllerMappingFunction::New() const {
  return new GrammarControllerMappingFunction;
}

void GrammarControllerMappingFunction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    theta_ = 0;
    n_intervals_ = 0;
    i_interval_ = 0;
    multi_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrammarControllerMappingFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.GrammarControllerMappingFunction.GrammarControllerType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FabByExample::proto::symbolic::GrammarControllerMappingFunction_GrammarControllerType_IsValid(value)) {
            set_type(static_cast< ::FabByExample::proto::symbolic::GrammarControllerMappingFunction_GrammarControllerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_theta;
        break;
      }

      // optional double theta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_N_intervals;
        break;
      }

      // optional int32 N_intervals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_N_intervals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_intervals_)));
          set_has_n_intervals();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_i_interval;
        break;
      }

      // optional int32 i_interval = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_interval_)));
          set_has_i_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_multi;
        break;
      }

      // optional double multi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_multi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &multi_)));
          set_has_multi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrammarControllerMappingFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.GrammarControllerMappingFunction.GrammarControllerType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double theta = 2;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->theta(), output);
  }

  // optional int32 N_intervals = 3;
  if (has_n_intervals()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->n_intervals(), output);
  }

  // optional int32 i_interval = 4;
  if (has_i_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->i_interval(), output);
  }

  // optional double multi = 5;
  if (has_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->multi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrammarControllerMappingFunction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.GrammarControllerMappingFunction.GrammarControllerType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double theta = 2;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->theta(), target);
  }

  // optional int32 N_intervals = 3;
  if (has_n_intervals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->n_intervals(), target);
  }

  // optional int32 i_interval = 4;
  if (has_i_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->i_interval(), target);
  }

  // optional double multi = 5;
  if (has_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->multi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrammarControllerMappingFunction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.GrammarControllerMappingFunction.GrammarControllerType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double theta = 2;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional int32 N_intervals = 3;
    if (has_n_intervals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n_intervals());
    }

    // optional int32 i_interval = 4;
    if (has_i_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i_interval());
    }

    // optional double multi = 5;
    if (has_multi()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrammarControllerMappingFunction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrammarControllerMappingFunction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrammarControllerMappingFunction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrammarControllerMappingFunction::MergeFrom(const GrammarControllerMappingFunction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_n_intervals()) {
      set_n_intervals(from.n_intervals());
    }
    if (from.has_i_interval()) {
      set_i_interval(from.i_interval());
    }
    if (from.has_multi()) {
      set_multi(from.multi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrammarControllerMappingFunction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrammarControllerMappingFunction::CopyFrom(const GrammarControllerMappingFunction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrammarControllerMappingFunction::IsInitialized() const {

  return true;
}

void GrammarControllerMappingFunction::Swap(GrammarControllerMappingFunction* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(theta_, other->theta_);
    std::swap(n_intervals_, other->n_intervals_);
    std::swap(i_interval_, other->i_interval_);
    std::swap(multi_, other->multi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrammarControllerMappingFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrammarControllerMappingFunction_descriptor_;
  metadata.reflection = GrammarControllerMappingFunction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinearMappingFuction1D::kLinearTimeMapFieldNumber;
#endif  // !_MSC_VER

LinearMappingFuction1D::LinearMappingFuction1D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinearMappingFuction1D::InitAsDefaultInstance() {
  lineartimemap_ = const_cast< ::FabByExample::proto::symbolic::LinearExpr*>(&::FabByExample::proto::symbolic::LinearExpr::default_instance());
}

LinearMappingFuction1D::LinearMappingFuction1D(const LinearMappingFuction1D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinearMappingFuction1D::SharedCtor() {
  _cached_size_ = 0;
  lineartimemap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinearMappingFuction1D::~LinearMappingFuction1D() {
  SharedDtor();
}

void LinearMappingFuction1D::SharedDtor() {
  if (this != default_instance_) {
    delete lineartimemap_;
  }
}

void LinearMappingFuction1D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinearMappingFuction1D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearMappingFuction1D_descriptor_;
}

const LinearMappingFuction1D& LinearMappingFuction1D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

LinearMappingFuction1D* LinearMappingFuction1D::default_instance_ = NULL;

LinearMappingFuction1D* LinearMappingFuction1D::New() const {
  return new LinearMappingFuction1D;
}

void LinearMappingFuction1D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lineartimemap()) {
      if (lineartimemap_ != NULL) lineartimemap_->::FabByExample::proto::symbolic::LinearExpr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinearMappingFuction1D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.LinearExpr linearTimeMap = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lineartimemap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinearMappingFuction1D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.LinearExpr linearTimeMap = 1;
  if (has_lineartimemap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lineartimemap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinearMappingFuction1D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.LinearExpr linearTimeMap = 1;
  if (has_lineartimemap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lineartimemap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinearMappingFuction1D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.LinearExpr linearTimeMap = 1;
    if (has_lineartimemap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lineartimemap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinearMappingFuction1D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinearMappingFuction1D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinearMappingFuction1D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinearMappingFuction1D::MergeFrom(const LinearMappingFuction1D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lineartimemap()) {
      mutable_lineartimemap()->::FabByExample::proto::symbolic::LinearExpr::MergeFrom(from.lineartimemap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinearMappingFuction1D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearMappingFuction1D::CopyFrom(const LinearMappingFuction1D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearMappingFuction1D::IsInitialized() const {

  return true;
}

void LinearMappingFuction1D::Swap(LinearMappingFuction1D* other) {
  if (other != this) {
    std::swap(lineartimemap_, other->lineartimemap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinearMappingFuction1D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinearMappingFuction1D_descriptor_;
  metadata.reflection = LinearMappingFuction1D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PiecewiseLinearFunction1D::kTimesandvaluesFieldNumber;
#endif  // !_MSC_VER

PiecewiseLinearFunction1D::PiecewiseLinearFunction1D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PiecewiseLinearFunction1D::InitAsDefaultInstance() {
}

PiecewiseLinearFunction1D::PiecewiseLinearFunction1D(const PiecewiseLinearFunction1D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PiecewiseLinearFunction1D::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PiecewiseLinearFunction1D::~PiecewiseLinearFunction1D() {
  SharedDtor();
}

void PiecewiseLinearFunction1D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PiecewiseLinearFunction1D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PiecewiseLinearFunction1D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PiecewiseLinearFunction1D_descriptor_;
}

const PiecewiseLinearFunction1D& PiecewiseLinearFunction1D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

PiecewiseLinearFunction1D* PiecewiseLinearFunction1D::default_instance_ = NULL;

PiecewiseLinearFunction1D* PiecewiseLinearFunction1D::New() const {
  return new PiecewiseLinearFunction1D;
}

void PiecewiseLinearFunction1D::Clear() {
  timesandvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PiecewiseLinearFunction1D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FabByExample.proto.symbolic.TimeAndValuePair timesandvalues = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timesandvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timesandvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_timesandvalues;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PiecewiseLinearFunction1D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FabByExample.proto.symbolic.TimeAndValuePair timesandvalues = 1;
  for (int i = 0; i < this->timesandvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timesandvalues(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PiecewiseLinearFunction1D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FabByExample.proto.symbolic.TimeAndValuePair timesandvalues = 1;
  for (int i = 0; i < this->timesandvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timesandvalues(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PiecewiseLinearFunction1D::ByteSize() const {
  int total_size = 0;

  // repeated .FabByExample.proto.symbolic.TimeAndValuePair timesandvalues = 1;
  total_size += 1 * this->timesandvalues_size();
  for (int i = 0; i < this->timesandvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timesandvalues(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PiecewiseLinearFunction1D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PiecewiseLinearFunction1D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PiecewiseLinearFunction1D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PiecewiseLinearFunction1D::MergeFrom(const PiecewiseLinearFunction1D& from) {
  GOOGLE_CHECK_NE(&from, this);
  timesandvalues_.MergeFrom(from.timesandvalues_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PiecewiseLinearFunction1D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PiecewiseLinearFunction1D::CopyFrom(const PiecewiseLinearFunction1D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PiecewiseLinearFunction1D::IsInitialized() const {

  return true;
}

void PiecewiseLinearFunction1D::Swap(PiecewiseLinearFunction1D* other) {
  if (other != this) {
    timesandvalues_.Swap(&other->timesandvalues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PiecewiseLinearFunction1D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PiecewiseLinearFunction1D_descriptor_;
  metadata.reflection = PiecewiseLinearFunction1D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeAndValuePair::kTimeStampFieldNumber;
const int TimeAndValuePair::kValueFieldNumber;
#endif  // !_MSC_VER

TimeAndValuePair::TimeAndValuePair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeAndValuePair::InitAsDefaultInstance() {
}

TimeAndValuePair::TimeAndValuePair(const TimeAndValuePair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeAndValuePair::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeAndValuePair::~TimeAndValuePair() {
  SharedDtor();
}

void TimeAndValuePair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeAndValuePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeAndValuePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeAndValuePair_descriptor_;
}

const TimeAndValuePair& TimeAndValuePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

TimeAndValuePair* TimeAndValuePair::default_instance_ = NULL;

TimeAndValuePair* TimeAndValuePair::New() const {
  return new TimeAndValuePair;
}

void TimeAndValuePair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeAndValuePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timeStamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // optional double value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeAndValuePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double timeStamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeAndValuePair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double timeStamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeAndValuePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double timeStamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeAndValuePair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeAndValuePair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeAndValuePair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeAndValuePair::MergeFrom(const TimeAndValuePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeAndValuePair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeAndValuePair::CopyFrom(const TimeAndValuePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeAndValuePair::IsInitialized() const {

  return true;
}

void TimeAndValuePair::Swap(TimeAndValuePair* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeAndValuePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeAndValuePair_descriptor_;
  metadata.reflection = TimeAndValuePair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PWLinear::kTimeFieldNumber;
const int PWLinear::kValueFieldNumber;
#endif  // !_MSC_VER

PWLinear::PWLinear()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PWLinear::InitAsDefaultInstance() {
}

PWLinear::PWLinear(const PWLinear& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PWLinear::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PWLinear::~PWLinear() {
  SharedDtor();
}

void PWLinear::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PWLinear::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PWLinear::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PWLinear_descriptor_;
}

const PWLinear& PWLinear::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_symbolic_2eproto();
  return *default_instance_;
}

PWLinear* PWLinear::default_instance_ = NULL;

PWLinear* PWLinear::New() const {
  return new PWLinear;
}

void PWLinear::Clear() {
  time_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PWLinear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FabByExample.proto.symbolic.LinearExpr time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_time;
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated .FabByExample.proto.symbolic.LinearExpr value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PWLinear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FabByExample.proto.symbolic.LinearExpr time = 1;
  for (int i = 0; i < this->time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->time(i), output);
  }

  // repeated .FabByExample.proto.symbolic.LinearExpr value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PWLinear::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FabByExample.proto.symbolic.LinearExpr time = 1;
  for (int i = 0; i < this->time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->time(i), target);
  }

  // repeated .FabByExample.proto.symbolic.LinearExpr value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PWLinear::ByteSize() const {
  int total_size = 0;

  // repeated .FabByExample.proto.symbolic.LinearExpr time = 1;
  total_size += 1 * this->time_size();
  for (int i = 0; i < this->time_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->time(i));
  }

  // repeated .FabByExample.proto.symbolic.LinearExpr value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PWLinear::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PWLinear* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PWLinear*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PWLinear::MergeFrom(const PWLinear& from) {
  GOOGLE_CHECK_NE(&from, this);
  time_.MergeFrom(from.time_);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PWLinear::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PWLinear::CopyFrom(const PWLinear& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PWLinear::IsInitialized() const {

  return true;
}

void PWLinear::Swap(PWLinear* other) {
  if (other != this) {
    time_.Swap(&other->time_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PWLinear::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PWLinear_descriptor_;
  metadata.reflection = PWLinear_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace symbolic
}  // namespace proto
}  // namespace FabByExample

// @@protoc_insertion_point(global_scope)
