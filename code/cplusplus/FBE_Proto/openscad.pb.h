// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: openscad.proto

#ifndef PROTOBUF_openscad_2eproto__INCLUDED
#define PROTOBUF_openscad_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace FabByExample {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_openscad_2eproto();
void protobuf_AssignDesc_openscad_2eproto();
void protobuf_ShutdownFile_openscad_2eproto();

class OpenscadParameter;
class OpenscadDesign;

// ===================================================================

class OpenscadParameter : public ::google::protobuf::Message {
 public:
  OpenscadParameter();
  virtual ~OpenscadParameter();

  OpenscadParameter(const OpenscadParameter& from);

  inline OpenscadParameter& operator=(const OpenscadParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenscadParameter& default_instance();

  void Swap(OpenscadParameter* other);

  // implements Message ----------------------------------------------

  OpenscadParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenscadParameter& from);
  void MergeFrom(const OpenscadParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required double initial_value = 2;
  inline bool has_initial_value() const;
  inline void clear_initial_value();
  static const int kInitialValueFieldNumber = 2;
  inline double initial_value() const;
  inline void set_initial_value(double value);

  // optional double min = 3;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 3;
  inline double min() const;
  inline void set_min(double value);

  // optional double max = 4;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 4;
  inline double max() const;
  inline void set_max(double value);

  // @@protoc_insertion_point(class_scope:FabByExample.proto.OpenscadParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_initial_value();
  inline void clear_has_initial_value();
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  double initial_value_;
  double min_;
  double max_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_openscad_2eproto();
  friend void protobuf_AssignDesc_openscad_2eproto();
  friend void protobuf_ShutdownFile_openscad_2eproto();

  void InitAsDefaultInstance();
  static OpenscadParameter* default_instance_;
};
// -------------------------------------------------------------------

class OpenscadDesign : public ::google::protobuf::Message {
 public:
  OpenscadDesign();
  virtual ~OpenscadDesign();

  OpenscadDesign(const OpenscadDesign& from);

  inline OpenscadDesign& operator=(const OpenscadDesign& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenscadDesign& default_instance();

  void Swap(OpenscadDesign* other);

  // implements Message ----------------------------------------------

  OpenscadDesign* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenscadDesign& from);
  void MergeFrom(const OpenscadDesign& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .FabByExample.proto.OpenscadParameter parameter = 1;
  inline int parameter_size() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 1;
  inline const ::FabByExample::proto::OpenscadParameter& parameter(int index) const;
  inline ::FabByExample::proto::OpenscadParameter* mutable_parameter(int index);
  inline ::FabByExample::proto::OpenscadParameter* add_parameter();
  inline const ::google::protobuf::RepeatedPtrField< ::FabByExample::proto::OpenscadParameter >&
      parameter() const;
  inline ::google::protobuf::RepeatedPtrField< ::FabByExample::proto::OpenscadParameter >*
      mutable_parameter();

  // required string code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:FabByExample.proto.OpenscadDesign)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::FabByExample::proto::OpenscadParameter > parameter_;
  ::std::string* code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_openscad_2eproto();
  friend void protobuf_AssignDesc_openscad_2eproto();
  friend void protobuf_ShutdownFile_openscad_2eproto();

  void InitAsDefaultInstance();
  static OpenscadDesign* default_instance_;
};
// ===================================================================


// ===================================================================

// OpenscadParameter

// required string name = 1;
inline bool OpenscadParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenscadParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenscadParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenscadParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OpenscadParameter::name() const {
  return *name_;
}
inline void OpenscadParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OpenscadParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OpenscadParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpenscadParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OpenscadParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void OpenscadParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// required double initial_value = 2;
inline bool OpenscadParameter::has_initial_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenscadParameter::set_has_initial_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenscadParameter::clear_has_initial_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenscadParameter::clear_initial_value() {
  initial_value_ = 0;
  clear_has_initial_value();
}
inline double OpenscadParameter::initial_value() const {
  return initial_value_;
}
inline void OpenscadParameter::set_initial_value(double value) {
  set_has_initial_value();
  initial_value_ = value;
}

// optional double min = 3;
inline bool OpenscadParameter::has_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenscadParameter::set_has_min() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenscadParameter::clear_has_min() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenscadParameter::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline double OpenscadParameter::min() const {
  return min_;
}
inline void OpenscadParameter::set_min(double value) {
  set_has_min();
  min_ = value;
}

// optional double max = 4;
inline bool OpenscadParameter::has_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpenscadParameter::set_has_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpenscadParameter::clear_has_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpenscadParameter::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline double OpenscadParameter::max() const {
  return max_;
}
inline void OpenscadParameter::set_max(double value) {
  set_has_max();
  max_ = value;
}

// -------------------------------------------------------------------

// OpenscadDesign

// repeated .FabByExample.proto.OpenscadParameter parameter = 1;
inline int OpenscadDesign::parameter_size() const {
  return parameter_.size();
}
inline void OpenscadDesign::clear_parameter() {
  parameter_.Clear();
}
inline const ::FabByExample::proto::OpenscadParameter& OpenscadDesign::parameter(int index) const {
  return parameter_.Get(index);
}
inline ::FabByExample::proto::OpenscadParameter* OpenscadDesign::mutable_parameter(int index) {
  return parameter_.Mutable(index);
}
inline ::FabByExample::proto::OpenscadParameter* OpenscadDesign::add_parameter() {
  return parameter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FabByExample::proto::OpenscadParameter >&
OpenscadDesign::parameter() const {
  return parameter_;
}
inline ::google::protobuf::RepeatedPtrField< ::FabByExample::proto::OpenscadParameter >*
OpenscadDesign::mutable_parameter() {
  return &parameter_;
}

// required string code = 2;
inline bool OpenscadDesign::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenscadDesign::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenscadDesign::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenscadDesign::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyString()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& OpenscadDesign::code() const {
  return *code_;
}
inline void OpenscadDesign::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyString()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void OpenscadDesign::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyString()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void OpenscadDesign::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyString()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpenscadDesign::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyString()) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* OpenscadDesign::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void OpenscadDesign::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyString()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace FabByExample

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_openscad_2eproto__INCLUDED
