// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: design.proto

#ifndef PROTOBUF_design_2eproto__INCLUDED
#define PROTOBUF_design_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace FabByExample {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_design_2eproto();
void protobuf_AssignDesc_design_2eproto();
void protobuf_ShutdownFile_design_2eproto();

class Design;
class Transformation;
class Functionality;
class Node;
class LeafNode;

enum Functionality_Type {
  Functionality_Type_ROT = 0,
  Functionality_Type_TRANS = 1,
  Functionality_Type_PROT = 2
};
bool Functionality_Type_IsValid(int value);
const Functionality_Type Functionality_Type_Type_MIN = Functionality_Type_ROT;
const Functionality_Type Functionality_Type_Type_MAX = Functionality_Type_PROT;
const int Functionality_Type_Type_ARRAYSIZE = Functionality_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Functionality_Type_descriptor();
inline const ::std::string& Functionality_Type_Name(Functionality_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Functionality_Type_descriptor(), value);
}
inline bool Functionality_Type_Parse(
    const ::std::string& name, Functionality_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Functionality_Type>(
    Functionality_Type_descriptor(), name, value);
}
enum Functionality_Axis {
  Functionality_Axis_NONE = 0,
  Functionality_Axis_X = 1,
  Functionality_Axis_Y = 2,
  Functionality_Axis_Z = 3
};
bool Functionality_Axis_IsValid(int value);
const Functionality_Axis Functionality_Axis_Axis_MIN = Functionality_Axis_NONE;
const Functionality_Axis Functionality_Axis_Axis_MAX = Functionality_Axis_Z;
const int Functionality_Axis_Axis_ARRAYSIZE = Functionality_Axis_Axis_MAX + 1;

const ::google::protobuf::EnumDescriptor* Functionality_Axis_descriptor();
inline const ::std::string& Functionality_Axis_Name(Functionality_Axis value) {
  return ::google::protobuf::internal::NameOfEnum(
    Functionality_Axis_descriptor(), value);
}
inline bool Functionality_Axis_Parse(
    const ::std::string& name, Functionality_Axis* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Functionality_Axis>(
    Functionality_Axis_descriptor(), name, value);
}
enum LeafNode_Type {
  LeafNode_Type_PART = 1,
  LeafNode_Type_CONNECTOR = 2
};
bool LeafNode_Type_IsValid(int value);
const LeafNode_Type LeafNode_Type_Type_MIN = LeafNode_Type_PART;
const LeafNode_Type LeafNode_Type_Type_MAX = LeafNode_Type_CONNECTOR;
const int LeafNode_Type_Type_ARRAYSIZE = LeafNode_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LeafNode_Type_descriptor();
inline const ::std::string& LeafNode_Type_Name(LeafNode_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LeafNode_Type_descriptor(), value);
}
inline bool LeafNode_Type_Parse(
    const ::std::string& name, LeafNode_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LeafNode_Type>(
    LeafNode_Type_descriptor(), name, value);
}
// ===================================================================

class Design : public ::google::protobuf::Message {
 public:
  Design();
  virtual ~Design();

  Design(const Design& from);

  inline Design& operator=(const Design& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Design& default_instance();

  void Swap(Design* other);

  // implements Message ----------------------------------------------

  Design* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Design& from);
  void MergeFrom(const Design& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .FabByExample.proto.Node root = 2;
  inline bool has_root() const;
  inline void clear_root();
  static const int kRootFieldNumber = 2;
  inline const ::FabByExample::proto::Node& root() const;
  inline ::FabByExample::proto::Node* mutable_root();
  inline ::FabByExample::proto::Node* release_root();
  inline void set_allocated_root(::FabByExample::proto::Node* root);

  // @@protoc_insertion_point(class_scope:FabByExample.proto.Design)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_root();
  inline void clear_has_root();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::FabByExample::proto::Node* root_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_design_2eproto();
  friend void protobuf_AssignDesc_design_2eproto();
  friend void protobuf_ShutdownFile_design_2eproto();

  void InitAsDefaultInstance();
  static Design* default_instance_;
};
// -------------------------------------------------------------------

class Transformation : public ::google::protobuf::Message {
 public:
  Transformation();
  virtual ~Transformation();

  Transformation(const Transformation& from);

  inline Transformation& operator=(const Transformation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transformation& default_instance();

  void Swap(Transformation* other);

  // implements Message ----------------------------------------------

  Transformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transformation& from);
  void MergeFrom(const Transformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .FabByExample.proto.Matrix rotation_matrix = 1;
  inline bool has_rotation_matrix() const;
  inline void clear_rotation_matrix();
  static const int kRotationMatrixFieldNumber = 1;
  inline const ::FabByExample::proto::Matrix& rotation_matrix() const;
  inline ::FabByExample::proto::Matrix* mutable_rotation_matrix();
  inline ::FabByExample::proto::Matrix* release_rotation_matrix();
  inline void set_allocated_rotation_matrix(::FabByExample::proto::Matrix* rotation_matrix);

  // optional .FabByExample.proto.Vector translation_vector = 2;
  inline bool has_translation_vector() const;
  inline void clear_translation_vector();
  static const int kTranslationVectorFieldNumber = 2;
  inline const ::FabByExample::proto::Vector& translation_vector() const;
  inline ::FabByExample::proto::Vector* mutable_translation_vector();
  inline ::FabByExample::proto::Vector* release_translation_vector();
  inline void set_allocated_translation_vector(::FabByExample::proto::Vector* translation_vector);

  // @@protoc_insertion_point(class_scope:FabByExample.proto.Transformation)
 private:
  inline void set_has_rotation_matrix();
  inline void clear_has_rotation_matrix();
  inline void set_has_translation_vector();
  inline void clear_has_translation_vector();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::FabByExample::proto::Matrix* rotation_matrix_;
  ::FabByExample::proto::Vector* translation_vector_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_design_2eproto();
  friend void protobuf_AssignDesc_design_2eproto();
  friend void protobuf_ShutdownFile_design_2eproto();

  void InitAsDefaultInstance();
  static Transformation* default_instance_;
};
// -------------------------------------------------------------------

class Functionality : public ::google::protobuf::Message {
 public:
  Functionality();
  virtual ~Functionality();

  Functionality(const Functionality& from);

  inline Functionality& operator=(const Functionality& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Functionality& default_instance();

  void Swap(Functionality* other);

  // implements Message ----------------------------------------------

  Functionality* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Functionality& from);
  void MergeFrom(const Functionality& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Functionality_Type Type;
  static const Type ROT = Functionality_Type_ROT;
  static const Type TRANS = Functionality_Type_TRANS;
  static const Type PROT = Functionality_Type_PROT;
  static inline bool Type_IsValid(int value) {
    return Functionality_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Functionality_Type_Type_MIN;
  static const Type Type_MAX =
    Functionality_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Functionality_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Functionality_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Functionality_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Functionality_Type_Parse(name, value);
  }

  typedef Functionality_Axis Axis;
  static const Axis NONE = Functionality_Axis_NONE;
  static const Axis X = Functionality_Axis_X;
  static const Axis Y = Functionality_Axis_Y;
  static const Axis Z = Functionality_Axis_Z;
  static inline bool Axis_IsValid(int value) {
    return Functionality_Axis_IsValid(value);
  }
  static const Axis Axis_MIN =
    Functionality_Axis_Axis_MIN;
  static const Axis Axis_MAX =
    Functionality_Axis_Axis_MAX;
  static const int Axis_ARRAYSIZE =
    Functionality_Axis_Axis_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Axis_descriptor() {
    return Functionality_Axis_descriptor();
  }
  static inline const ::std::string& Axis_Name(Axis value) {
    return Functionality_Axis_Name(value);
  }
  static inline bool Axis_Parse(const ::std::string& name,
      Axis* value) {
    return Functionality_Axis_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .FabByExample.proto.Vector center = 2;
  inline bool has_center() const;
  inline void clear_center();
  static const int kCenterFieldNumber = 2;
  inline const ::FabByExample::proto::Vector& center() const;
  inline ::FabByExample::proto::Vector* mutable_center();
  inline ::FabByExample::proto::Vector* release_center();
  inline void set_allocated_center(::FabByExample::proto::Vector* center);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .FabByExample.proto.Functionality.Type type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::FabByExample::proto::Functionality_Type type() const;
  inline void set_type(::FabByExample::proto::Functionality_Type value);

  // optional .FabByExample.proto.Functionality.Axis axis = 5;
  inline bool has_axis() const;
  inline void clear_axis();
  static const int kAxisFieldNumber = 5;
  inline ::FabByExample::proto::Functionality_Axis axis() const;
  inline void set_axis(::FabByExample::proto::Functionality_Axis value);

  // @@protoc_insertion_point(class_scope:FabByExample.proto.Functionality)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_center();
  inline void clear_has_center();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_axis();
  inline void clear_has_axis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::FabByExample::proto::Vector* center_;
  ::google::protobuf::int32 id_;
  int type_;
  ::std::string* name_;
  int axis_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_design_2eproto();
  friend void protobuf_AssignDesc_design_2eproto();
  friend void protobuf_ShutdownFile_design_2eproto();

  void InitAsDefaultInstance();
  static Functionality* default_instance_;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .FabByExample.proto.Node children = 3;
  inline int children_size() const;
  inline void clear_children();
  static const int kChildrenFieldNumber = 3;
  inline const ::FabByExample::proto::Node& children(int index) const;
  inline ::FabByExample::proto::Node* mutable_children(int index);
  inline ::FabByExample::proto::Node* add_children();
  inline const ::google::protobuf::RepeatedPtrField< ::FabByExample::proto::Node >&
      children() const;
  inline ::google::protobuf::RepeatedPtrField< ::FabByExample::proto::Node >*
      mutable_children();

  // optional .FabByExample.proto.Transformation transformation = 4;
  inline bool has_transformation() const;
  inline void clear_transformation();
  static const int kTransformationFieldNumber = 4;
  inline const ::FabByExample::proto::Transformation& transformation() const;
  inline ::FabByExample::proto::Transformation* mutable_transformation();
  inline ::FabByExample::proto::Transformation* release_transformation();
  inline void set_allocated_transformation(::FabByExample::proto::Transformation* transformation);

  // optional .FabByExample.proto.Functionality func = 5;
  inline bool has_func() const;
  inline void clear_func();
  static const int kFuncFieldNumber = 5;
  inline const ::FabByExample::proto::Functionality& func() const;
  inline ::FabByExample::proto::Functionality* mutable_func();
  inline ::FabByExample::proto::Functionality* release_func();
  inline void set_allocated_func(::FabByExample::proto::Functionality* func);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Node)
  // @@protoc_insertion_point(class_scope:FabByExample.proto.Node)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_transformation();
  inline void clear_has_transformation();
  inline void set_has_func();
  inline void clear_has_func();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::FabByExample::proto::Node > children_;
  ::FabByExample::proto::Transformation* transformation_;
  ::FabByExample::proto::Functionality* func_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_design_2eproto();
  friend void protobuf_AssignDesc_design_2eproto();
  friend void protobuf_ShutdownFile_design_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class LeafNode : public ::google::protobuf::Message {
 public:
  LeafNode();
  virtual ~LeafNode();

  LeafNode(const LeafNode& from);

  inline LeafNode& operator=(const LeafNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeafNode& default_instance();

  void Swap(LeafNode* other);

  // implements Message ----------------------------------------------

  LeafNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeafNode& from);
  void MergeFrom(const LeafNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LeafNode_Type Type;
  static const Type PART = LeafNode_Type_PART;
  static const Type CONNECTOR = LeafNode_Type_CONNECTOR;
  static inline bool Type_IsValid(int value) {
    return LeafNode_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LeafNode_Type_Type_MIN;
  static const Type Type_MAX =
    LeafNode_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LeafNode_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LeafNode_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LeafNode_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LeafNode_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string geometry = 1;
  inline bool has_geometry() const;
  inline void clear_geometry();
  static const int kGeometryFieldNumber = 1;
  inline const ::std::string& geometry() const;
  inline void set_geometry(const ::std::string& value);
  inline void set_geometry(const char* value);
  inline void set_geometry(const char* value, size_t size);
  inline ::std::string* mutable_geometry();
  inline ::std::string* release_geometry();
  inline void set_allocated_geometry(::std::string* geometry);

  // optional .FabByExample.proto.LeafNode.Type type = 2 [default = PART];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::FabByExample::proto::LeafNode_Type type() const;
  inline void set_type(::FabByExample::proto::LeafNode_Type value);

  static const int kLeafNodeFieldNumber = 100;
  static ::google::protobuf::internal::ExtensionIdentifier< ::FabByExample::proto::Node,
      ::google::protobuf::internal::MessageTypeTraits< ::FabByExample::proto::LeafNode >, 11, false >
    leaf_node;
  // @@protoc_insertion_point(class_scope:FabByExample.proto.LeafNode)
 private:
  inline void set_has_geometry();
  inline void clear_has_geometry();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* geometry_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_design_2eproto();
  friend void protobuf_AssignDesc_design_2eproto();
  friend void protobuf_ShutdownFile_design_2eproto();

  void InitAsDefaultInstance();
  static LeafNode* default_instance_;
};
// ===================================================================


// ===================================================================

// Design

// optional string name = 1;
inline bool Design::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Design::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Design::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Design::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Design::name() const {
  return *name_;
}
inline void Design::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Design::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Design::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Design::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Design::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Design::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .FabByExample.proto.Node root = 2;
inline bool Design::has_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Design::set_has_root() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Design::clear_has_root() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Design::clear_root() {
  if (root_ != NULL) root_->::FabByExample::proto::Node::Clear();
  clear_has_root();
}
inline const ::FabByExample::proto::Node& Design::root() const {
  return root_ != NULL ? *root_ : *default_instance_->root_;
}
inline ::FabByExample::proto::Node* Design::mutable_root() {
  set_has_root();
  if (root_ == NULL) root_ = new ::FabByExample::proto::Node;
  return root_;
}
inline ::FabByExample::proto::Node* Design::release_root() {
  clear_has_root();
  ::FabByExample::proto::Node* temp = root_;
  root_ = NULL;
  return temp;
}
inline void Design::set_allocated_root(::FabByExample::proto::Node* root) {
  delete root_;
  root_ = root;
  if (root) {
    set_has_root();
  } else {
    clear_has_root();
  }
}

// -------------------------------------------------------------------

// Transformation

// optional .FabByExample.proto.Matrix rotation_matrix = 1;
inline bool Transformation::has_rotation_matrix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transformation::set_has_rotation_matrix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transformation::clear_has_rotation_matrix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transformation::clear_rotation_matrix() {
  if (rotation_matrix_ != NULL) rotation_matrix_->::FabByExample::proto::Matrix::Clear();
  clear_has_rotation_matrix();
}
inline const ::FabByExample::proto::Matrix& Transformation::rotation_matrix() const {
  return rotation_matrix_ != NULL ? *rotation_matrix_ : *default_instance_->rotation_matrix_;
}
inline ::FabByExample::proto::Matrix* Transformation::mutable_rotation_matrix() {
  set_has_rotation_matrix();
  if (rotation_matrix_ == NULL) rotation_matrix_ = new ::FabByExample::proto::Matrix;
  return rotation_matrix_;
}
inline ::FabByExample::proto::Matrix* Transformation::release_rotation_matrix() {
  clear_has_rotation_matrix();
  ::FabByExample::proto::Matrix* temp = rotation_matrix_;
  rotation_matrix_ = NULL;
  return temp;
}
inline void Transformation::set_allocated_rotation_matrix(::FabByExample::proto::Matrix* rotation_matrix) {
  delete rotation_matrix_;
  rotation_matrix_ = rotation_matrix;
  if (rotation_matrix) {
    set_has_rotation_matrix();
  } else {
    clear_has_rotation_matrix();
  }
}

// optional .FabByExample.proto.Vector translation_vector = 2;
inline bool Transformation::has_translation_vector() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transformation::set_has_translation_vector() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transformation::clear_has_translation_vector() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transformation::clear_translation_vector() {
  if (translation_vector_ != NULL) translation_vector_->::FabByExample::proto::Vector::Clear();
  clear_has_translation_vector();
}
inline const ::FabByExample::proto::Vector& Transformation::translation_vector() const {
  return translation_vector_ != NULL ? *translation_vector_ : *default_instance_->translation_vector_;
}
inline ::FabByExample::proto::Vector* Transformation::mutable_translation_vector() {
  set_has_translation_vector();
  if (translation_vector_ == NULL) translation_vector_ = new ::FabByExample::proto::Vector;
  return translation_vector_;
}
inline ::FabByExample::proto::Vector* Transformation::release_translation_vector() {
  clear_has_translation_vector();
  ::FabByExample::proto::Vector* temp = translation_vector_;
  translation_vector_ = NULL;
  return temp;
}
inline void Transformation::set_allocated_translation_vector(::FabByExample::proto::Vector* translation_vector) {
  delete translation_vector_;
  translation_vector_ = translation_vector;
  if (translation_vector) {
    set_has_translation_vector();
  } else {
    clear_has_translation_vector();
  }
}

// -------------------------------------------------------------------

// Functionality

// optional int32 ID = 1;
inline bool Functionality::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Functionality::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Functionality::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Functionality::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Functionality::id() const {
  return id_;
}
inline void Functionality::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .FabByExample.proto.Vector center = 2;
inline bool Functionality::has_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Functionality::set_has_center() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Functionality::clear_has_center() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Functionality::clear_center() {
  if (center_ != NULL) center_->::FabByExample::proto::Vector::Clear();
  clear_has_center();
}
inline const ::FabByExample::proto::Vector& Functionality::center() const {
  return center_ != NULL ? *center_ : *default_instance_->center_;
}
inline ::FabByExample::proto::Vector* Functionality::mutable_center() {
  set_has_center();
  if (center_ == NULL) center_ = new ::FabByExample::proto::Vector;
  return center_;
}
inline ::FabByExample::proto::Vector* Functionality::release_center() {
  clear_has_center();
  ::FabByExample::proto::Vector* temp = center_;
  center_ = NULL;
  return temp;
}
inline void Functionality::set_allocated_center(::FabByExample::proto::Vector* center) {
  delete center_;
  center_ = center;
  if (center) {
    set_has_center();
  } else {
    clear_has_center();
  }
}

// optional string name = 3;
inline bool Functionality::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Functionality::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Functionality::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Functionality::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Functionality::name() const {
  return *name_;
}
inline void Functionality::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Functionality::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Functionality::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Functionality::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Functionality::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Functionality::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .FabByExample.proto.Functionality.Type type = 4;
inline bool Functionality::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Functionality::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Functionality::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Functionality::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::FabByExample::proto::Functionality_Type Functionality::type() const {
  return static_cast< ::FabByExample::proto::Functionality_Type >(type_);
}
inline void Functionality::set_type(::FabByExample::proto::Functionality_Type value) {
  assert(::FabByExample::proto::Functionality_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .FabByExample.proto.Functionality.Axis axis = 5;
inline bool Functionality::has_axis() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Functionality::set_has_axis() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Functionality::clear_has_axis() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Functionality::clear_axis() {
  axis_ = 0;
  clear_has_axis();
}
inline ::FabByExample::proto::Functionality_Axis Functionality::axis() const {
  return static_cast< ::FabByExample::proto::Functionality_Axis >(axis_);
}
inline void Functionality::set_axis(::FabByExample::proto::Functionality_Axis value) {
  assert(::FabByExample::proto::Functionality_Axis_IsValid(value));
  set_has_axis();
  axis_ = value;
}

// -------------------------------------------------------------------

// Node

// optional string name = 1;
inline bool Node::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Node::name() const {
  return *name_;
}
inline void Node::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Node::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Node::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Node::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void Node::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional int32 id = 2;
inline bool Node::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Node::id() const {
  return id_;
}
inline void Node::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .FabByExample.proto.Node children = 3;
inline int Node::children_size() const {
  return children_.size();
}
inline void Node::clear_children() {
  children_.Clear();
}
inline const ::FabByExample::proto::Node& Node::children(int index) const {
  return children_.Get(index);
}
inline ::FabByExample::proto::Node* Node::mutable_children(int index) {
  return children_.Mutable(index);
}
inline ::FabByExample::proto::Node* Node::add_children() {
  return children_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FabByExample::proto::Node >&
Node::children() const {
  return children_;
}
inline ::google::protobuf::RepeatedPtrField< ::FabByExample::proto::Node >*
Node::mutable_children() {
  return &children_;
}

// optional .FabByExample.proto.Transformation transformation = 4;
inline bool Node::has_transformation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Node::set_has_transformation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Node::clear_has_transformation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Node::clear_transformation() {
  if (transformation_ != NULL) transformation_->::FabByExample::proto::Transformation::Clear();
  clear_has_transformation();
}
inline const ::FabByExample::proto::Transformation& Node::transformation() const {
  return transformation_ != NULL ? *transformation_ : *default_instance_->transformation_;
}
inline ::FabByExample::proto::Transformation* Node::mutable_transformation() {
  set_has_transformation();
  if (transformation_ == NULL) transformation_ = new ::FabByExample::proto::Transformation;
  return transformation_;
}
inline ::FabByExample::proto::Transformation* Node::release_transformation() {
  clear_has_transformation();
  ::FabByExample::proto::Transformation* temp = transformation_;
  transformation_ = NULL;
  return temp;
}
inline void Node::set_allocated_transformation(::FabByExample::proto::Transformation* transformation) {
  delete transformation_;
  transformation_ = transformation;
  if (transformation) {
    set_has_transformation();
  } else {
    clear_has_transformation();
  }
}

// optional .FabByExample.proto.Functionality func = 5;
inline bool Node::has_func() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Node::set_has_func() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Node::clear_has_func() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Node::clear_func() {
  if (func_ != NULL) func_->::FabByExample::proto::Functionality::Clear();
  clear_has_func();
}
inline const ::FabByExample::proto::Functionality& Node::func() const {
  return func_ != NULL ? *func_ : *default_instance_->func_;
}
inline ::FabByExample::proto::Functionality* Node::mutable_func() {
  set_has_func();
  if (func_ == NULL) func_ = new ::FabByExample::proto::Functionality;
  return func_;
}
inline ::FabByExample::proto::Functionality* Node::release_func() {
  clear_has_func();
  ::FabByExample::proto::Functionality* temp = func_;
  func_ = NULL;
  return temp;
}
inline void Node::set_allocated_func(::FabByExample::proto::Functionality* func) {
  delete func_;
  func_ = func;
  if (func) {
    set_has_func();
  } else {
    clear_has_func();
  }
}

// -------------------------------------------------------------------

// LeafNode

// optional string geometry = 1;
inline bool LeafNode::has_geometry() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeafNode::set_has_geometry() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeafNode::clear_has_geometry() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeafNode::clear_geometry() {
  if (geometry_ != &::google::protobuf::internal::GetEmptyString()) {
    geometry_->clear();
  }
  clear_has_geometry();
}
inline const ::std::string& LeafNode::geometry() const {
  return *geometry_;
}
inline void LeafNode::set_geometry(const ::std::string& value) {
  set_has_geometry();
  if (geometry_ == &::google::protobuf::internal::GetEmptyString()) {
    geometry_ = new ::std::string;
  }
  geometry_->assign(value);
}
inline void LeafNode::set_geometry(const char* value) {
  set_has_geometry();
  if (geometry_ == &::google::protobuf::internal::GetEmptyString()) {
    geometry_ = new ::std::string;
  }
  geometry_->assign(value);
}
inline void LeafNode::set_geometry(const char* value, size_t size) {
  set_has_geometry();
  if (geometry_ == &::google::protobuf::internal::GetEmptyString()) {
    geometry_ = new ::std::string;
  }
  geometry_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LeafNode::mutable_geometry() {
  set_has_geometry();
  if (geometry_ == &::google::protobuf::internal::GetEmptyString()) {
    geometry_ = new ::std::string;
  }
  return geometry_;
}
inline ::std::string* LeafNode::release_geometry() {
  clear_has_geometry();
  if (geometry_ == &::google::protobuf::internal::GetEmptyString()) {
    return NULL;
  } else {
    ::std::string* temp = geometry_;
    geometry_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
    return temp;
  }
}
inline void LeafNode::set_allocated_geometry(::std::string* geometry) {
  if (geometry_ != &::google::protobuf::internal::GetEmptyString()) {
    delete geometry_;
  }
  if (geometry) {
    set_has_geometry();
    geometry_ = geometry;
  } else {
    clear_has_geometry();
    geometry_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  }
}

// optional .FabByExample.proto.LeafNode.Type type = 2 [default = PART];
inline bool LeafNode::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeafNode::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeafNode::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeafNode::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::FabByExample::proto::LeafNode_Type LeafNode::type() const {
  return static_cast< ::FabByExample::proto::LeafNode_Type >(type_);
}
inline void LeafNode::set_type(::FabByExample::proto::LeafNode_Type value) {
  assert(::FabByExample::proto::LeafNode_Type_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace FabByExample

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FabByExample::proto::Functionality_Type>() {
  return ::FabByExample::proto::Functionality_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FabByExample::proto::Functionality_Axis>() {
  return ::FabByExample::proto::Functionality_Axis_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FabByExample::proto::LeafNode_Type>() {
  return ::FabByExample::proto::LeafNode_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_design_2eproto__INCLUDED
