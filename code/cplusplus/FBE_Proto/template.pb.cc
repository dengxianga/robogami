// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: template.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "template.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FabByExample {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* TemplateSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TemplateSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GaitInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GaitInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavedGait_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavedGait_reflection_ = NULL;
const ::google::protobuf::Descriptor* Template_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Template_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContactInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContactInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymmetryChoices_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymmetryChoices_reflection_ = NULL;
const ::google::protobuf::Descriptor* Semantics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Semantics_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Semantics_PrintMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Semantics_PartType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Patch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Patch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServoPointPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServoPointPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServoSpacingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServoSpacingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServoLinePatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServoLinePatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeripheralPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeripheralPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edge2SPatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge2SPatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Connection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Connection_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectionMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionMode_reflection_ = NULL;
const ::google::protobuf::Descriptor* FoldConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoldConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* JointConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JointConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintType_reflection_ = NULL;
const ::google::protobuf::Descriptor* BendConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BendConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* FillConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FillConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlexConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlexConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* MappingFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MappingFunction_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymbolicWayPointsMappingFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymbolicWayPointsMappingFunction_reflection_ = NULL;
const ::google::protobuf::Descriptor* SymbolicWayPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SymbolicWayPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScadMappingFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScadMappingFunction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternalMeshAffineMappingFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalMeshAffineMappingFunction_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompositionMappingFunction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompositionMappingFunction_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinearMappingFunction3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinearMappingFunction3_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinearMappingFunction2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinearMappingFunction2_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeasibleSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeasibleSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConstraintList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConstraintList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Constraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Constraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinearConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinearConstraint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LinearConstraint_ConstraintSemantics_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LinearConstraint_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Articulation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Articulation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_template_2eproto() {
  protobuf_AddDesc_template_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "template.proto");
  GOOGLE_CHECK(file != NULL);
  TemplateSet_descriptor_ = file->message_type(0);
  static const int TemplateSet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateSet, template__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateSet, root_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateSet, gaitinfo_),
  };
  TemplateSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TemplateSet_descriptor_,
      TemplateSet::default_instance_,
      TemplateSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TemplateSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TemplateSet));
  GaitInformation_descriptor_ = file->message_type(1);
  static const int GaitInformation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaitInformation, savedgaits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaitInformation, gaitsequence_),
  };
  GaitInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GaitInformation_descriptor_,
      GaitInformation::default_instance_,
      GaitInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaitInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaitInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GaitInformation));
  SavedGait_descriptor_ = file->message_type(2);
  static const int SavedGait_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedGait, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedGait, desireddirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedGait, jointinfo_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedGait, jointinfo_angle_),
  };
  SavedGait_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavedGait_descriptor_,
      SavedGait::default_instance_,
      SavedGait_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedGait, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavedGait, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavedGait));
  Template_descriptor_ = file->message_type(3);
  static const int Template_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, mapping_function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, feasible_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, child_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, connection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, patch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, independent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, semantics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, contactpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, contactinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, symmetrychoices_),
  };
  Template_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Template_descriptor_,
      Template::default_instance_,
      Template_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Template, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Template));
  ContactInfo_descriptor_ = file->message_type(4);
  static const int ContactInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, hasbeenconstraint_),
  };
  ContactInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContactInfo_descriptor_,
      ContactInfo::default_instance_,
      ContactInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContactInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContactInfo));
  SymmetryChoices_descriptor_ = file->message_type(5);
  static const int SymmetryChoices_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymmetryChoices, symm_ground_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymmetryChoices, symm_legw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymmetryChoices, symm_legl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymmetryChoices, symm_spacing_),
  };
  SymmetryChoices_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymmetryChoices_descriptor_,
      SymmetryChoices::default_instance_,
      SymmetryChoices_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymmetryChoices, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymmetryChoices, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymmetryChoices));
  Semantics_descriptor_ = file->message_type(6);
  static const int Semantics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Semantics, printmethod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Semantics, parttype_),
  };
  Semantics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Semantics_descriptor_,
      Semantics::default_instance_,
      Semantics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Semantics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Semantics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Semantics));
  Semantics_PrintMethod_descriptor_ = Semantics_descriptor_->enum_type(0);
  Semantics_PartType_descriptor_ = Semantics_descriptor_->enum_type(1);
  Patch_descriptor_ = file->message_type(7);
  static const int Patch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Patch, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Patch, edge2spatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Patch, servopointpatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Patch, servolinepatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Patch, peripheralpatch_),
  };
  Patch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Patch_descriptor_,
      Patch::default_instance_,
      Patch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Patch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Patch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Patch));
  ServoPointPatch_descriptor_ = file->message_type(8);
  static const int ServoPointPatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoPointPatch, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoPointPatch, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoPointPatch, separation_),
  };
  ServoPointPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServoPointPatch_descriptor_,
      ServoPointPatch::default_instance_,
      ServoPointPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoPointPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoPointPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServoPointPatch));
  ServoSpacingInfo_descriptor_ = file->message_type(9);
  static const int ServoSpacingInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoSpacingInfo, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoSpacingInfo, separation_h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoSpacingInfo, separation_w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoSpacingInfo, associatedtemplates_),
  };
  ServoSpacingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServoSpacingInfo_descriptor_,
      ServoSpacingInfo::default_instance_,
      ServoSpacingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoSpacingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoSpacingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServoSpacingInfo));
  ServoLinePatch_descriptor_ = file->message_type(10);
  static const int ServoLinePatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoLinePatch, startpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoLinePatch, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoLinePatch, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoLinePatch, servospacing_),
  };
  ServoLinePatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServoLinePatch_descriptor_,
      ServoLinePatch::default_instance_,
      ServoLinePatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoLinePatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServoLinePatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServoLinePatch));
  PeripheralPatch_descriptor_ = file->message_type(11);
  static const int PeripheralPatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeripheralPatch, edgeid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeripheralPatch, edgeid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeripheralPatch, normal_),
  };
  PeripheralPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeripheralPatch_descriptor_,
      PeripheralPatch::default_instance_,
      PeripheralPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeripheralPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeripheralPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeripheralPatch));
  Edge2SPatch_descriptor_ = file->message_type(12);
  static const int Edge2SPatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge2SPatch, edgeid_),
  };
  Edge2SPatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Edge2SPatch_descriptor_,
      Edge2SPatch::default_instance_,
      Edge2SPatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge2SPatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge2SPatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Edge2SPatch));
  Connection_descriptor_ = file->message_type(13);
  static const int Connection_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, parentpatchref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, patchref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, connectionmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, jointconnection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, fillconnection_),
  };
  Connection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Connection_descriptor_,
      Connection::default_instance_,
      Connection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Connection));
  ConnectionMode_descriptor_ = file->message_type(14);
  static const int ConnectionMode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMode, foldconnection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMode, bendconnection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMode, flexconnection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMode, jointconnection_),
  };
  ConnectionMode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectionMode_descriptor_,
      ConnectionMode::default_instance_,
      ConnectionMode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionMode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectionMode));
  FoldConnection_descriptor_ = file->message_type(15);
  static const int FoldConnection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoldConnection, angle_),
  };
  FoldConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoldConnection_descriptor_,
      FoldConnection::default_instance_,
      FoldConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoldConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoldConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoldConnection));
  JointConnection_descriptor_ = file->message_type(16);
  static const int JointConnection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointConnection, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointConnection, articulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointConnection, printtype_),
  };
  JointConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JointConnection_descriptor_,
      JointConnection::default_instance_,
      JointConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JointConnection));
  PrintType_descriptor_ = file->message_type(17);
  static const int PrintType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintType, ballandsocket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintType, prismatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintType, revolute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintType, none_),
  };
  PrintType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintType_descriptor_,
      PrintType::default_instance_,
      PrintType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintType));
  BendConnection_descriptor_ = file->message_type(18);
  static const int BendConnection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BendConnection, angle_),
  };
  BendConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BendConnection_descriptor_,
      BendConnection::default_instance_,
      BendConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BendConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BendConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BendConnection));
  FillConnection_descriptor_ = file->message_type(19);
  static const int FillConnection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillConnection, angle_),
  };
  FillConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FillConnection_descriptor_,
      FillConnection::default_instance_,
      FillConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FillConnection));
  FlexConnection_descriptor_ = file->message_type(20);
  static const int FlexConnection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlexConnection, angle_),
  };
  FlexConnection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlexConnection_descriptor_,
      FlexConnection::default_instance_,
      FlexConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlexConnection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlexConnection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlexConnection));
  MappingFunction_descriptor_ = file->message_type(21);
  static const int MappingFunction_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MappingFunction, linear_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MappingFunction, linear_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MappingFunction, composition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MappingFunction, external_mesh_affine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MappingFunction, scad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MappingFunction, symbolicwaypointsmappingfunction_),
  };
  MappingFunction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MappingFunction_descriptor_,
      MappingFunction::default_instance_,
      MappingFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MappingFunction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MappingFunction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MappingFunction));
  SymbolicWayPointsMappingFunction_descriptor_ = file->message_type(22);
  static const int SymbolicWayPointsMappingFunction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolicWayPointsMappingFunction, symbolicwaypoint_),
  };
  SymbolicWayPointsMappingFunction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymbolicWayPointsMappingFunction_descriptor_,
      SymbolicWayPointsMappingFunction::default_instance_,
      SymbolicWayPointsMappingFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolicWayPointsMappingFunction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolicWayPointsMappingFunction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymbolicWayPointsMappingFunction));
  SymbolicWayPoint_descriptor_ = file->message_type(23);
  static const int SymbolicWayPoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolicWayPoint, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolicWayPoint, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolicWayPoint, contact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolicWayPoint, ismoving_),
  };
  SymbolicWayPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SymbolicWayPoint_descriptor_,
      SymbolicWayPoint::default_instance_,
      SymbolicWayPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolicWayPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymbolicWayPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SymbolicWayPoint));
  ScadMappingFunction_descriptor_ = file->message_type(24);
  static const int ScadMappingFunction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadMappingFunction, scad_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadMappingFunction, design_),
  };
  ScadMappingFunction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScadMappingFunction_descriptor_,
      ScadMappingFunction::default_instance_,
      ScadMappingFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadMappingFunction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScadMappingFunction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScadMappingFunction));
  ExternalMeshAffineMappingFunction_descriptor_ = file->message_type(25);
  static const int ExternalMeshAffineMappingFunction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalMeshAffineMappingFunction, stl_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalMeshAffineMappingFunction, stl_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalMeshAffineMappingFunction, transform_),
  };
  ExternalMeshAffineMappingFunction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExternalMeshAffineMappingFunction_descriptor_,
      ExternalMeshAffineMappingFunction::default_instance_,
      ExternalMeshAffineMappingFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalMeshAffineMappingFunction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalMeshAffineMappingFunction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExternalMeshAffineMappingFunction));
  CompositionMappingFunction_descriptor_ = file->message_type(26);
  static const int CompositionMappingFunction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionMappingFunction, template_id_),
  };
  CompositionMappingFunction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompositionMappingFunction_descriptor_,
      CompositionMappingFunction::default_instance_,
      CompositionMappingFunction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionMappingFunction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositionMappingFunction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompositionMappingFunction));
  LinearMappingFunction3_descriptor_ = file->message_type(27);
  static const int LinearMappingFunction3_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearMappingFunction3, mesh_),
  };
  LinearMappingFunction3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinearMappingFunction3_descriptor_,
      LinearMappingFunction3::default_instance_,
      LinearMappingFunction3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearMappingFunction3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearMappingFunction3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinearMappingFunction3));
  LinearMappingFunction2_descriptor_ = file->message_type(28);
  static const int LinearMappingFunction2_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearMappingFunction2, drawing_),
  };
  LinearMappingFunction2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinearMappingFunction2_descriptor_,
      LinearMappingFunction2::default_instance_,
      LinearMappingFunction2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearMappingFunction2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearMappingFunction2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinearMappingFunction2));
  FeasibleSet_descriptor_ = file->message_type(29);
  static const int FeasibleSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibleSet, constraint_list_),
  };
  FeasibleSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeasibleSet_descriptor_,
      FeasibleSet::default_instance_,
      FeasibleSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibleSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeasibleSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeasibleSet));
  ConstraintList_descriptor_ = file->message_type(30);
  static const int ConstraintList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintList, constraint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintList, inherited_template_id_),
  };
  ConstraintList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConstraintList_descriptor_,
      ConstraintList::default_instance_,
      ConstraintList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConstraintList));
  Constraint_descriptor_ = file->message_type(31);
  static const int Constraint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constraint, linear_constraint_),
  };
  Constraint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Constraint_descriptor_,
      Constraint::default_instance_,
      Constraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constraint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constraint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Constraint));
  LinearConstraint_descriptor_ = file->message_type(32);
  static const int LinearConstraint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearConstraint, expr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearConstraint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearConstraint, constraintsemantics_),
  };
  LinearConstraint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinearConstraint_descriptor_,
      LinearConstraint::default_instance_,
      LinearConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearConstraint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearConstraint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinearConstraint));
  LinearConstraint_ConstraintSemantics_descriptor_ = LinearConstraint_descriptor_->enum_type(0);
  LinearConstraint_Type_descriptor_ = LinearConstraint_descriptor_->enum_type(1);
  Articulation_descriptor_ = file->message_type(33);
  static const int Articulation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Articulation, transforms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Articulation, center_),
  };
  Articulation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Articulation_descriptor_,
      Articulation::default_instance_,
      Articulation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Articulation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Articulation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Articulation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_template_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TemplateSet_descriptor_, &TemplateSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GaitInformation_descriptor_, &GaitInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavedGait_descriptor_, &SavedGait::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Template_descriptor_, &Template::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContactInfo_descriptor_, &ContactInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymmetryChoices_descriptor_, &SymmetryChoices::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Semantics_descriptor_, &Semantics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Patch_descriptor_, &Patch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServoPointPatch_descriptor_, &ServoPointPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServoSpacingInfo_descriptor_, &ServoSpacingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServoLinePatch_descriptor_, &ServoLinePatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeripheralPatch_descriptor_, &PeripheralPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Edge2SPatch_descriptor_, &Edge2SPatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Connection_descriptor_, &Connection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectionMode_descriptor_, &ConnectionMode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoldConnection_descriptor_, &FoldConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JointConnection_descriptor_, &JointConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintType_descriptor_, &PrintType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BendConnection_descriptor_, &BendConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FillConnection_descriptor_, &FillConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlexConnection_descriptor_, &FlexConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MappingFunction_descriptor_, &MappingFunction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymbolicWayPointsMappingFunction_descriptor_, &SymbolicWayPointsMappingFunction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SymbolicWayPoint_descriptor_, &SymbolicWayPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScadMappingFunction_descriptor_, &ScadMappingFunction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExternalMeshAffineMappingFunction_descriptor_, &ExternalMeshAffineMappingFunction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompositionMappingFunction_descriptor_, &CompositionMappingFunction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinearMappingFunction3_descriptor_, &LinearMappingFunction3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinearMappingFunction2_descriptor_, &LinearMappingFunction2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeasibleSet_descriptor_, &FeasibleSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConstraintList_descriptor_, &ConstraintList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Constraint_descriptor_, &Constraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinearConstraint_descriptor_, &LinearConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Articulation_descriptor_, &Articulation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_template_2eproto() {
  delete TemplateSet::default_instance_;
  delete TemplateSet_reflection_;
  delete GaitInformation::default_instance_;
  delete GaitInformation_reflection_;
  delete SavedGait::default_instance_;
  delete SavedGait_reflection_;
  delete Template::default_instance_;
  delete Template_reflection_;
  delete ContactInfo::default_instance_;
  delete ContactInfo_reflection_;
  delete SymmetryChoices::default_instance_;
  delete SymmetryChoices_reflection_;
  delete Semantics::default_instance_;
  delete Semantics_reflection_;
  delete Patch::default_instance_;
  delete Patch_reflection_;
  delete ServoPointPatch::default_instance_;
  delete ServoPointPatch_reflection_;
  delete ServoSpacingInfo::default_instance_;
  delete ServoSpacingInfo_reflection_;
  delete ServoLinePatch::default_instance_;
  delete ServoLinePatch_reflection_;
  delete PeripheralPatch::default_instance_;
  delete PeripheralPatch_reflection_;
  delete Edge2SPatch::default_instance_;
  delete Edge2SPatch_reflection_;
  delete Connection::default_instance_;
  delete Connection_reflection_;
  delete ConnectionMode::default_instance_;
  delete ConnectionMode_reflection_;
  delete FoldConnection::default_instance_;
  delete FoldConnection_reflection_;
  delete JointConnection::default_instance_;
  delete JointConnection_reflection_;
  delete PrintType::default_instance_;
  delete PrintType_reflection_;
  delete BendConnection::default_instance_;
  delete BendConnection_reflection_;
  delete FillConnection::default_instance_;
  delete FillConnection_reflection_;
  delete FlexConnection::default_instance_;
  delete FlexConnection_reflection_;
  delete MappingFunction::default_instance_;
  delete MappingFunction_reflection_;
  delete SymbolicWayPointsMappingFunction::default_instance_;
  delete SymbolicWayPointsMappingFunction_reflection_;
  delete SymbolicWayPoint::default_instance_;
  delete SymbolicWayPoint_reflection_;
  delete ScadMappingFunction::default_instance_;
  delete ScadMappingFunction_reflection_;
  delete ExternalMeshAffineMappingFunction::default_instance_;
  delete ExternalMeshAffineMappingFunction_reflection_;
  delete CompositionMappingFunction::default_instance_;
  delete CompositionMappingFunction_reflection_;
  delete LinearMappingFunction3::default_instance_;
  delete LinearMappingFunction3_reflection_;
  delete LinearMappingFunction2::default_instance_;
  delete LinearMappingFunction2_reflection_;
  delete FeasibleSet::default_instance_;
  delete FeasibleSet_reflection_;
  delete ConstraintList::default_instance_;
  delete ConstraintList_reflection_;
  delete Constraint::default_instance_;
  delete Constraint_reflection_;
  delete LinearConstraint::default_instance_;
  delete LinearConstraint_reflection_;
  delete Articulation::default_instance_;
  delete Articulation_reflection_;
}

void protobuf_AddDesc_template_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::FabByExample::proto::symbolic::protobuf_AddDesc_symbolic_2eproto();
  ::FabByExample::proto::protobuf_AddDesc_openscad_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016template.proto\022\022FabByExample.proto\032\016sy"
    "mbolic.proto\032\016openscad.proto\"\216\001\n\013Templat"
    "eSet\022.\n\010template\030\001 \003(\0132\034.FabByExample.pr"
    "oto.Template\022\030\n\020root_template_id\030\002 \001(\005\0225"
    "\n\010gaitInfo\030\003 \001(\0132#.FabByExample.proto.Ga"
    "itInformation\"Z\n\017GaitInformation\0221\n\nsave"
    "dGaits\030\001 \003(\0132\035.FabByExample.proto.SavedG"
    "ait\022\024\n\014gaitSequence\030\002 \003(\005\"b\n\tSavedGait\022\014"
    "\n\004name\030\001 \001(\t\022\030\n\020desiredDirection\030\002 \001(\001\022\024"
    "\n\014jointInfo_id\030\003 \003(\005\022\027\n\017jointInfo_angle\030"
    "\004 \003(\001\"\306\004\n\010Template\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002"
    " \001(\t\0229\n\tparameter\030\003 \003(\0132&.FabByExample.p"
    "roto.symbolic.Parameter\022=\n\020mapping_funct"
    "ion\030\004 \001(\0132#.FabByExample.proto.MappingFu"
    "nction\0225\n\014feasible_set\030\005 \001(\0132\037.FabByExam"
    "ple.proto.FeasibleSet\022\031\n\021child_template_"
    "id\030\006 \003(\005\0222\n\nconnection\030\007 \003(\0132\036.FabByExam"
    "ple.proto.Connection\022(\n\005patch\030\010 \003(\0132\031.Fa"
    "bByExample.proto.Patch\022\023\n\013independent\030\t "
    "\001(\010\0220\n\tsemantics\030\n \001(\0132\035.FabByExample.pr"
    "oto.Semantics\022;\n\rcontactPoints\030\013 \003(\0132$.F"
    "abByExample.proto.symbolic.Point3S\0224\n\013co"
    "ntactInfo\030\014 \003(\0132\037.FabByExample.proto.Con"
    "tactInfo\022<\n\017symmetryChoices\030\r \001(\0132#.FabB"
    "yExample.proto.SymmetryChoices\"]\n\013Contac"
    "tInfo\0223\n\005point\030\001 \001(\0132$.FabByExample.prot"
    "o.symbolic.Point3S\022\031\n\021hasBeenConstraint\030"
    "\002 \001(\010\"b\n\017SymmetryChoices\022\023\n\013symm_ground\030"
    "\001 \001(\010\022\021\n\tsymm_legW\030\002 \001(\010\022\021\n\tsymm_legL\030\003 "
    "\001(\010\022\024\n\014symm_spacing\030\004 \001(\010\"\210\002\n\tSemantics\022"
    ">\n\013printMethod\030\001 \001(\0162).FabByExample.prot"
    "o.Semantics.PrintMethod\0228\n\010partType\030\002 \001("
    "\0162&.FabByExample.proto.Semantics.PartTyp"
    "e\"0\n\013PrintMethod\022\022\n\016PRINT_AND_FOLD\020\001\022\r\n\t"
    "DIRECT_3D\020\002\"O\n\010PartType\022\007\n\003LEG\020\001\022\010\n\004BODY"
    "\020\002\022\016\n\nPERIPHERAL\020\003\022\010\n\004FACE\020\004\022\013\n\007GENERAL\020"
    "\005\022\t\n\005WHEEL\020\006\"\201\002\n\005Patch\022\n\n\002id\030\001 \001(\005\0224\n\013ed"
    "ge2SPatch\030\002 \001(\0132\037.FabByExample.proto.Edg"
    "e2SPatch\022<\n\017servoPointPatch\030\003 \001(\0132#.FabB"
    "yExample.proto.ServoPointPatch\022:\n\016servoL"
    "inePatch\030\004 \001(\0132\".FabByExample.proto.Serv"
    "oLinePatch\022<\n\017peripheralpatch\030\005 \001(\0132#.Fa"
    "bByExample.proto.PeripheralPatch\"\224\001\n\017Ser"
    "voPointPatch\0224\n\006center\030\001 \001(\0132$.FabByExam"
    "ple.proto.symbolic.Point3S\022\016\n\006normal\030\002 \003"
    "(\001\022;\n\nseparation\030\003 \001(\0132\'.FabByExample.pr"
    "oto.symbolic.LinearExpr\"\345\001\n\020ServoSpacing"
    "Info\0226\n\005alpha\030\001 \001(\0132\'.FabByExample.proto"
    ".symbolic.LinearExpr\022=\n\014separation_h\030\002 \001"
    "(\0132\'.FabByExample.proto.symbolic.LinearE"
    "xpr\022=\n\014separation_w\030\003 \003(\0132\'.FabByExample"
    ".proto.symbolic.LinearExpr\022\033\n\023associated"
    "Templates\030\004 \003(\005\"\316\001\n\016ServoLinePatch\0228\n\nst"
    "artPoint\030\001 \001(\0132$.FabByExample.proto.symb"
    "olic.Point3S\0226\n\010endPoint\030\002 \001(\0132$.FabByEx"
    "ample.proto.symbolic.Point3S\022\016\n\006normal\030\003"
    " \003(\001\022:\n\014servospacing\030\004 \003(\0132$.FabByExampl"
    "e.proto.ServoSpacingInfo\"C\n\017PeripheralPa"
    "tch\022\017\n\007edgeId1\030\001 \001(\005\022\017\n\007edgeId2\030\002 \001(\005\022\016\n"
    "\006normal\030\003 \003(\001\"\035\n\013Edge2SPatch\022\016\n\006edgeId\030\001"
    " \001(\005\"\354\001\n\nConnection\022\026\n\016parentPatchRef\030\001 "
    "\001(\005\022\020\n\010patchRef\030\002 \003(\005\022:\n\016connectionMode\030"
    "\003 \001(\0132\".FabByExample.proto.ConnectionMod"
    "e\022<\n\017jointConnection\030\004 \001(\0132#.FabByExampl"
    "e.proto.JointConnection\022:\n\016fillConnectio"
    "n\030\005 \001(\0132\".FabByExample.proto.FillConnect"
    "ion\"\202\002\n\016ConnectionMode\022:\n\016foldConnection"
    "\030\001 \001(\0132\".FabByExample.proto.FoldConnecti"
    "on\022:\n\016bendConnection\030\002 \001(\0132\".FabByExampl"
    "e.proto.BendConnection\022:\n\016flexConnection"
    "\030\003 \001(\0132\".FabByExample.proto.FlexConnecti"
    "on\022<\n\017jointConnection\030\004 \001(\0132#.FabByExamp"
    "le.proto.JointConnection\"\037\n\016FoldConnecti"
    "on\022\r\n\005angle\030\001 \001(\001\"\213\001\n\017JointConnection\022\r\n"
    "\005angle\030\001 \001(\001\0227\n\rarticulations\030\002 \001(\0132 .Fa"
    "bByExample.proto.Articulation\0220\n\tprintTy"
    "pe\030\003 \001(\0132\035.FabByExample.proto.PrintType\""
    "U\n\tPrintType\022\025\n\rballAndSocket\030\001 \001(\010\022\021\n\tp"
    "rismatic\030\002 \001(\010\022\020\n\010revolute\030\003 \001(\010\022\014\n\004none"
    "\030\004 \001(\010\"\037\n\016BendConnection\022\r\n\005angle\030\001 \001(\001\""
    "\037\n\016FillConnection\022\r\n\005angle\030\001 \001(\001\"\037\n\016Flex"
    "Connection\022\r\n\005angle\030\001 \001(\001\"\276\003\n\017MappingFun"
    "ction\022<\n\010linear_3\030\001 \001(\0132*.FabByExample.p"
    "roto.LinearMappingFunction3\022<\n\010linear_2\030"
    "\002 \001(\0132*.FabByExample.proto.LinearMapping"
    "Function2\022C\n\013composition\030\003 \001(\0132..FabByEx"
    "ample.proto.CompositionMappingFunction\022S"
    "\n\024external_mesh_affine\030\004 \001(\01325.FabByExam"
    "ple.proto.ExternalMeshAffineMappingFunct"
    "ion\0225\n\004scad\030\005 \001(\0132\'.FabByExample.proto.S"
    "cadMappingFunction\022^\n symbolicWayPointsM"
    "appingFunction\030\006 \001(\01324.FabByExample.prot"
    "o.SymbolicWayPointsMappingFunction\"b\n Sy"
    "mbolicWayPointsMappingFunction\022>\n\020symbol"
    "icWayPoint\030\001 \003(\0132$.FabByExample.proto.Sy"
    "mbolicWayPoint\"\244\001\n\020SymbolicWayPoint\0225\n\004t"
    "ime\030\001 \001(\0132\'.FabByExample.proto.symbolic."
    "LinearExpr\0226\n\005value\030\002 \001(\0132\'.FabByExample"
    ".proto.symbolic.LinearExpr\022\017\n\007contact\030\003 "
    "\001(\010\022\020\n\010ismoving\030\004 \001(\010\"`\n\023ScadMappingFunc"
    "tion\022\025\n\rscad_filename\030\001 \001(\t\0222\n\006design\030\002 "
    "\001(\0132\".FabByExample.proto.OpenscadDesign\""
    "\213\001\n!ExternalMeshAffineMappingFunction\022\024\n"
    "\014stl_filename\030\001 \001(\t\022\020\n\010stl_data\030\002 \001(\014\022>\n"
    "\ttransform\030\003 \001(\0132+.FabByExample.proto.sy"
    "mbolic.AffineMatrix3S\"1\n\032CompositionMapp"
    "ingFunction\022\023\n\013template_id\030\001 \003(\005\"K\n\026Line"
    "arMappingFunction3\0221\n\004mesh\030\001 \001(\0132#.FabBy"
    "Example.proto.symbolic.Mesh3S\"Q\n\026LinearM"
    "appingFunction2\0227\n\007drawing\030\001 \001(\0132&.FabBy"
    "Example.proto.symbolic.Drawing2S\"J\n\013Feas"
    "ibleSet\022;\n\017constraint_list\030\001 \001(\0132\".FabBy"
    "Example.proto.ConstraintList\"c\n\016Constrai"
    "ntList\0222\n\nconstraint\030\001 \003(\0132\036.FabByExampl"
    "e.proto.Constraint\022\035\n\025inherited_template"
    "_id\030\002 \003(\005\"M\n\nConstraint\022\?\n\021linear_constr"
    "aint\030\001 \001(\0132$.FabByExample.proto.LinearCo"
    "nstraint\"\350\002\n\020LinearConstraint\0225\n\004expr\030\001 "
    "\001(\0132\'.FabByExample.proto.symbolic.Linear"
    "Expr\0227\n\004type\030\002 \001(\0162).FabByExample.proto."
    "LinearConstraint.Type\022U\n\023constraintSeman"
    "tics\030\003 \001(\01628.FabByExample.proto.LinearCo"
    "nstraint.ConstraintSemantics\"c\n\023Constrai"
    "ntSemantics\022\013\n\007GENERAL\020\001\022\017\n\013SYMM_GROUND\020"
    "\002\022\r\n\tSYMM_LEGW\020\003\022\r\n\tSYMM_LEGL\020\004\022\020\n\014SYMM_"
    "SPACING\020\005\"(\n\004Type\022\014\n\010EQUALITY\020\001\022\022\n\016LESS_"
    "THAN_ZERO\020\002\"\200\001\n\014Articulation\022:\n\ntransfor"
    "ms\030\001 \003(\0132&.FabByExample.proto.symbolic.T"
    "ransform\0224\n\006center\030\002 \001(\0132$.FabByExample."
    "proto.symbolic.Point3S", 5182);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "template.proto", &protobuf_RegisterTypes);
  TemplateSet::default_instance_ = new TemplateSet();
  GaitInformation::default_instance_ = new GaitInformation();
  SavedGait::default_instance_ = new SavedGait();
  Template::default_instance_ = new Template();
  ContactInfo::default_instance_ = new ContactInfo();
  SymmetryChoices::default_instance_ = new SymmetryChoices();
  Semantics::default_instance_ = new Semantics();
  Patch::default_instance_ = new Patch();
  ServoPointPatch::default_instance_ = new ServoPointPatch();
  ServoSpacingInfo::default_instance_ = new ServoSpacingInfo();
  ServoLinePatch::default_instance_ = new ServoLinePatch();
  PeripheralPatch::default_instance_ = new PeripheralPatch();
  Edge2SPatch::default_instance_ = new Edge2SPatch();
  Connection::default_instance_ = new Connection();
  ConnectionMode::default_instance_ = new ConnectionMode();
  FoldConnection::default_instance_ = new FoldConnection();
  JointConnection::default_instance_ = new JointConnection();
  PrintType::default_instance_ = new PrintType();
  BendConnection::default_instance_ = new BendConnection();
  FillConnection::default_instance_ = new FillConnection();
  FlexConnection::default_instance_ = new FlexConnection();
  MappingFunction::default_instance_ = new MappingFunction();
  SymbolicWayPointsMappingFunction::default_instance_ = new SymbolicWayPointsMappingFunction();
  SymbolicWayPoint::default_instance_ = new SymbolicWayPoint();
  ScadMappingFunction::default_instance_ = new ScadMappingFunction();
  ExternalMeshAffineMappingFunction::default_instance_ = new ExternalMeshAffineMappingFunction();
  CompositionMappingFunction::default_instance_ = new CompositionMappingFunction();
  LinearMappingFunction3::default_instance_ = new LinearMappingFunction3();
  LinearMappingFunction2::default_instance_ = new LinearMappingFunction2();
  FeasibleSet::default_instance_ = new FeasibleSet();
  ConstraintList::default_instance_ = new ConstraintList();
  Constraint::default_instance_ = new Constraint();
  LinearConstraint::default_instance_ = new LinearConstraint();
  Articulation::default_instance_ = new Articulation();
  TemplateSet::default_instance_->InitAsDefaultInstance();
  GaitInformation::default_instance_->InitAsDefaultInstance();
  SavedGait::default_instance_->InitAsDefaultInstance();
  Template::default_instance_->InitAsDefaultInstance();
  ContactInfo::default_instance_->InitAsDefaultInstance();
  SymmetryChoices::default_instance_->InitAsDefaultInstance();
  Semantics::default_instance_->InitAsDefaultInstance();
  Patch::default_instance_->InitAsDefaultInstance();
  ServoPointPatch::default_instance_->InitAsDefaultInstance();
  ServoSpacingInfo::default_instance_->InitAsDefaultInstance();
  ServoLinePatch::default_instance_->InitAsDefaultInstance();
  PeripheralPatch::default_instance_->InitAsDefaultInstance();
  Edge2SPatch::default_instance_->InitAsDefaultInstance();
  Connection::default_instance_->InitAsDefaultInstance();
  ConnectionMode::default_instance_->InitAsDefaultInstance();
  FoldConnection::default_instance_->InitAsDefaultInstance();
  JointConnection::default_instance_->InitAsDefaultInstance();
  PrintType::default_instance_->InitAsDefaultInstance();
  BendConnection::default_instance_->InitAsDefaultInstance();
  FillConnection::default_instance_->InitAsDefaultInstance();
  FlexConnection::default_instance_->InitAsDefaultInstance();
  MappingFunction::default_instance_->InitAsDefaultInstance();
  SymbolicWayPointsMappingFunction::default_instance_->InitAsDefaultInstance();
  SymbolicWayPoint::default_instance_->InitAsDefaultInstance();
  ScadMappingFunction::default_instance_->InitAsDefaultInstance();
  ExternalMeshAffineMappingFunction::default_instance_->InitAsDefaultInstance();
  CompositionMappingFunction::default_instance_->InitAsDefaultInstance();
  LinearMappingFunction3::default_instance_->InitAsDefaultInstance();
  LinearMappingFunction2::default_instance_->InitAsDefaultInstance();
  FeasibleSet::default_instance_->InitAsDefaultInstance();
  ConstraintList::default_instance_->InitAsDefaultInstance();
  Constraint::default_instance_->InitAsDefaultInstance();
  LinearConstraint::default_instance_->InitAsDefaultInstance();
  Articulation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_template_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_template_2eproto {
  StaticDescriptorInitializer_template_2eproto() {
    protobuf_AddDesc_template_2eproto();
  }
} static_descriptor_initializer_template_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TemplateSet::kTemplateFieldNumber;
const int TemplateSet::kRootTemplateIdFieldNumber;
const int TemplateSet::kGaitInfoFieldNumber;
#endif  // !_MSC_VER

TemplateSet::TemplateSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TemplateSet::InitAsDefaultInstance() {
  gaitinfo_ = const_cast< ::FabByExample::proto::GaitInformation*>(&::FabByExample::proto::GaitInformation::default_instance());
}

TemplateSet::TemplateSet(const TemplateSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TemplateSet::SharedCtor() {
  _cached_size_ = 0;
  root_template_id_ = 0;
  gaitinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TemplateSet::~TemplateSet() {
  SharedDtor();
}

void TemplateSet::SharedDtor() {
  if (this != default_instance_) {
    delete gaitinfo_;
  }
}

void TemplateSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TemplateSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TemplateSet_descriptor_;
}

const TemplateSet& TemplateSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

TemplateSet* TemplateSet::default_instance_ = NULL;

TemplateSet* TemplateSet::New() const {
  return new TemplateSet;
}

void TemplateSet::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    root_template_id_ = 0;
    if (has_gaitinfo()) {
      if (gaitinfo_ != NULL) gaitinfo_->::FabByExample::proto::GaitInformation::Clear();
    }
  }
  template__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TemplateSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FabByExample.proto.Template template = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_template:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_template_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_template;
        if (input->ExpectTag(16)) goto parse_root_template_id;
        break;
      }

      // optional int32 root_template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_root_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &root_template_id_)));
          set_has_root_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gaitInfo;
        break;
      }

      // optional .FabByExample.proto.GaitInformation gaitInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gaitInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gaitinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TemplateSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FabByExample.proto.Template template = 1;
  for (int i = 0; i < this->template__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->template_(i), output);
  }

  // optional int32 root_template_id = 2;
  if (has_root_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->root_template_id(), output);
  }

  // optional .FabByExample.proto.GaitInformation gaitInfo = 3;
  if (has_gaitinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gaitinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TemplateSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FabByExample.proto.Template template = 1;
  for (int i = 0; i < this->template__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->template_(i), target);
  }

  // optional int32 root_template_id = 2;
  if (has_root_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->root_template_id(), target);
  }

  // optional .FabByExample.proto.GaitInformation gaitInfo = 3;
  if (has_gaitinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gaitinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TemplateSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 root_template_id = 2;
    if (has_root_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->root_template_id());
    }

    // optional .FabByExample.proto.GaitInformation gaitInfo = 3;
    if (has_gaitinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gaitinfo());
    }

  }
  // repeated .FabByExample.proto.Template template = 1;
  total_size += 1 * this->template__size();
  for (int i = 0; i < this->template__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->template_(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TemplateSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TemplateSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TemplateSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TemplateSet::MergeFrom(const TemplateSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  template__.MergeFrom(from.template__);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_root_template_id()) {
      set_root_template_id(from.root_template_id());
    }
    if (from.has_gaitinfo()) {
      mutable_gaitinfo()->::FabByExample::proto::GaitInformation::MergeFrom(from.gaitinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TemplateSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TemplateSet::CopyFrom(const TemplateSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TemplateSet::IsInitialized() const {

  for (int i = 0; i < template__size(); i++) {
    if (!this->template_(i).IsInitialized()) return false;
  }
  return true;
}

void TemplateSet::Swap(TemplateSet* other) {
  if (other != this) {
    template__.Swap(&other->template__);
    std::swap(root_template_id_, other->root_template_id_);
    std::swap(gaitinfo_, other->gaitinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TemplateSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TemplateSet_descriptor_;
  metadata.reflection = TemplateSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GaitInformation::kSavedGaitsFieldNumber;
const int GaitInformation::kGaitSequenceFieldNumber;
#endif  // !_MSC_VER

GaitInformation::GaitInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GaitInformation::InitAsDefaultInstance() {
}

GaitInformation::GaitInformation(const GaitInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GaitInformation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GaitInformation::~GaitInformation() {
  SharedDtor();
}

void GaitInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GaitInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GaitInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GaitInformation_descriptor_;
}

const GaitInformation& GaitInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

GaitInformation* GaitInformation::default_instance_ = NULL;

GaitInformation* GaitInformation::New() const {
  return new GaitInformation;
}

void GaitInformation::Clear() {
  savedgaits_.Clear();
  gaitsequence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GaitInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FabByExample.proto.SavedGait savedGaits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_savedGaits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_savedgaits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_savedGaits;
        if (input->ExpectTag(16)) goto parse_gaitSequence;
        break;
      }

      // repeated int32 gaitSequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gaitSequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_gaitsequence())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gaitsequence())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gaitSequence;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GaitInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FabByExample.proto.SavedGait savedGaits = 1;
  for (int i = 0; i < this->savedgaits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->savedgaits(i), output);
  }

  // repeated int32 gaitSequence = 2;
  for (int i = 0; i < this->gaitsequence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->gaitsequence(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GaitInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FabByExample.proto.SavedGait savedGaits = 1;
  for (int i = 0; i < this->savedgaits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->savedgaits(i), target);
  }

  // repeated int32 gaitSequence = 2;
  for (int i = 0; i < this->gaitsequence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->gaitsequence(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GaitInformation::ByteSize() const {
  int total_size = 0;

  // repeated .FabByExample.proto.SavedGait savedGaits = 1;
  total_size += 1 * this->savedgaits_size();
  for (int i = 0; i < this->savedgaits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->savedgaits(i));
  }

  // repeated int32 gaitSequence = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->gaitsequence_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gaitsequence(i));
    }
    total_size += 1 * this->gaitsequence_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GaitInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GaitInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GaitInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GaitInformation::MergeFrom(const GaitInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  savedgaits_.MergeFrom(from.savedgaits_);
  gaitsequence_.MergeFrom(from.gaitsequence_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GaitInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GaitInformation::CopyFrom(const GaitInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaitInformation::IsInitialized() const {

  return true;
}

void GaitInformation::Swap(GaitInformation* other) {
  if (other != this) {
    savedgaits_.Swap(&other->savedgaits_);
    gaitsequence_.Swap(&other->gaitsequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GaitInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GaitInformation_descriptor_;
  metadata.reflection = GaitInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SavedGait::kNameFieldNumber;
const int SavedGait::kDesiredDirectionFieldNumber;
const int SavedGait::kJointInfoIdFieldNumber;
const int SavedGait::kJointInfoAngleFieldNumber;
#endif  // !_MSC_VER

SavedGait::SavedGait()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavedGait::InitAsDefaultInstance() {
}

SavedGait::SavedGait(const SavedGait& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavedGait::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  desireddirection_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavedGait::~SavedGait() {
  SharedDtor();
}

void SavedGait::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SavedGait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavedGait::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavedGait_descriptor_;
}

const SavedGait& SavedGait::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

SavedGait* SavedGait::default_instance_ = NULL;

SavedGait* SavedGait::New() const {
  return new SavedGait;
}

void SavedGait::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    desireddirection_ = 0;
  }
  jointinfo_id_.Clear();
  jointinfo_angle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavedGait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_desiredDirection;
        break;
      }

      // optional double desiredDirection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_desiredDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &desireddirection_)));
          set_has_desireddirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jointInfo_id;
        break;
      }

      // repeated int32 jointInfo_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jointInfo_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_jointinfo_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jointinfo_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_jointInfo_id;
        if (input->ExpectTag(33)) goto parse_jointInfo_angle;
        break;
      }

      // repeated double jointInfo_angle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jointInfo_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_jointinfo_angle())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_jointinfo_angle())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_jointInfo_angle;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavedGait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional double desiredDirection = 2;
  if (has_desireddirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->desireddirection(), output);
  }

  // repeated int32 jointInfo_id = 3;
  for (int i = 0; i < this->jointinfo_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->jointinfo_id(i), output);
  }

  // repeated double jointInfo_angle = 4;
  for (int i = 0; i < this->jointinfo_angle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->jointinfo_angle(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavedGait::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double desiredDirection = 2;
  if (has_desireddirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->desireddirection(), target);
  }

  // repeated int32 jointInfo_id = 3;
  for (int i = 0; i < this->jointinfo_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->jointinfo_id(i), target);
  }

  // repeated double jointInfo_angle = 4;
  for (int i = 0; i < this->jointinfo_angle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->jointinfo_angle(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavedGait::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double desiredDirection = 2;
    if (has_desireddirection()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 jointInfo_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->jointinfo_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jointinfo_id(i));
    }
    total_size += 1 * this->jointinfo_id_size() + data_size;
  }

  // repeated double jointInfo_angle = 4;
  {
    int data_size = 0;
    data_size = 8 * this->jointinfo_angle_size();
    total_size += 1 * this->jointinfo_angle_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavedGait::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavedGait* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavedGait*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavedGait::MergeFrom(const SavedGait& from) {
  GOOGLE_CHECK_NE(&from, this);
  jointinfo_id_.MergeFrom(from.jointinfo_id_);
  jointinfo_angle_.MergeFrom(from.jointinfo_angle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desireddirection()) {
      set_desireddirection(from.desireddirection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavedGait::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavedGait::CopyFrom(const SavedGait& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedGait::IsInitialized() const {

  return true;
}

void SavedGait::Swap(SavedGait* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(desireddirection_, other->desireddirection_);
    jointinfo_id_.Swap(&other->jointinfo_id_);
    jointinfo_angle_.Swap(&other->jointinfo_angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavedGait::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavedGait_descriptor_;
  metadata.reflection = SavedGait_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Template::kIdFieldNumber;
const int Template::kNameFieldNumber;
const int Template::kParameterFieldNumber;
const int Template::kMappingFunctionFieldNumber;
const int Template::kFeasibleSetFieldNumber;
const int Template::kChildTemplateIdFieldNumber;
const int Template::kConnectionFieldNumber;
const int Template::kPatchFieldNumber;
const int Template::kIndependentFieldNumber;
const int Template::kSemanticsFieldNumber;
const int Template::kContactPointsFieldNumber;
const int Template::kContactInfoFieldNumber;
const int Template::kSymmetryChoicesFieldNumber;
#endif  // !_MSC_VER

Template::Template()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Template::InitAsDefaultInstance() {
  mapping_function_ = const_cast< ::FabByExample::proto::MappingFunction*>(&::FabByExample::proto::MappingFunction::default_instance());
  feasible_set_ = const_cast< ::FabByExample::proto::FeasibleSet*>(&::FabByExample::proto::FeasibleSet::default_instance());
  semantics_ = const_cast< ::FabByExample::proto::Semantics*>(&::FabByExample::proto::Semantics::default_instance());
  symmetrychoices_ = const_cast< ::FabByExample::proto::SymmetryChoices*>(&::FabByExample::proto::SymmetryChoices::default_instance());
}

Template::Template(const Template& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Template::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  mapping_function_ = NULL;
  feasible_set_ = NULL;
  independent_ = false;
  semantics_ = NULL;
  symmetrychoices_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Template::~Template() {
  SharedDtor();
}

void Template::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete mapping_function_;
    delete feasible_set_;
    delete semantics_;
    delete symmetrychoices_;
  }
}

void Template::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Template::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Template_descriptor_;
}

const Template& Template::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

Template* Template::default_instance_ = NULL;

Template* Template::New() const {
  return new Template;
}

void Template::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    if (has_mapping_function()) {
      if (mapping_function_ != NULL) mapping_function_->::FabByExample::proto::MappingFunction::Clear();
    }
    if (has_feasible_set()) {
      if (feasible_set_ != NULL) feasible_set_->::FabByExample::proto::FeasibleSet::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    independent_ = false;
    if (has_semantics()) {
      if (semantics_ != NULL) semantics_->::FabByExample::proto::Semantics::Clear();
    }
    if (has_symmetrychoices()) {
      if (symmetrychoices_ != NULL) symmetrychoices_->::FabByExample::proto::SymmetryChoices::Clear();
    }
  }
  parameter_.Clear();
  child_template_id_.Clear();
  connection_.Clear();
  patch_.Clear();
  contactpoints_.Clear();
  contactinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Template::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameter;
        break;
      }

      // repeated .FabByExample.proto.symbolic.Parameter parameter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameter;
        if (input->ExpectTag(34)) goto parse_mapping_function;
        break;
      }

      // optional .FabByExample.proto.MappingFunction mapping_function = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapping_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapping_function()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_feasible_set;
        break;
      }

      // optional .FabByExample.proto.FeasibleSet feasible_set = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feasible_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feasible_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_child_template_id;
        break;
      }

      // repeated int32 child_template_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_child_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_child_template_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_child_template_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_child_template_id;
        if (input->ExpectTag(58)) goto parse_connection;
        break;
      }

      // repeated .FabByExample.proto.Connection connection = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_connection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_connection;
        if (input->ExpectTag(66)) goto parse_patch;
        break;
      }

      // repeated .FabByExample.proto.Patch patch = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_patch;
        if (input->ExpectTag(72)) goto parse_independent;
        break;
      }

      // optional bool independent = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_independent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &independent_)));
          set_has_independent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_semantics;
        break;
      }

      // optional .FabByExample.proto.Semantics semantics = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_semantics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_semantics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_contactPoints;
        break;
      }

      // repeated .FabByExample.proto.symbolic.Point3S contactPoints = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contactPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactpoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_contactPoints;
        if (input->ExpectTag(98)) goto parse_contactInfo;
        break;
      }

      // repeated .FabByExample.proto.ContactInfo contactInfo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contactInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contactinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_contactInfo;
        if (input->ExpectTag(106)) goto parse_symmetryChoices;
        break;
      }

      // optional .FabByExample.proto.SymmetryChoices symmetryChoices = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symmetryChoices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symmetrychoices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Template::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // repeated .FabByExample.proto.symbolic.Parameter parameter = 3;
  for (int i = 0; i < this->parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parameter(i), output);
  }

  // optional .FabByExample.proto.MappingFunction mapping_function = 4;
  if (has_mapping_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mapping_function(), output);
  }

  // optional .FabByExample.proto.FeasibleSet feasible_set = 5;
  if (has_feasible_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->feasible_set(), output);
  }

  // repeated int32 child_template_id = 6;
  for (int i = 0; i < this->child_template_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->child_template_id(i), output);
  }

  // repeated .FabByExample.proto.Connection connection = 7;
  for (int i = 0; i < this->connection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->connection(i), output);
  }

  // repeated .FabByExample.proto.Patch patch = 8;
  for (int i = 0; i < this->patch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->patch(i), output);
  }

  // optional bool independent = 9;
  if (has_independent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->independent(), output);
  }

  // optional .FabByExample.proto.Semantics semantics = 10;
  if (has_semantics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->semantics(), output);
  }

  // repeated .FabByExample.proto.symbolic.Point3S contactPoints = 11;
  for (int i = 0; i < this->contactpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->contactpoints(i), output);
  }

  // repeated .FabByExample.proto.ContactInfo contactInfo = 12;
  for (int i = 0; i < this->contactinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->contactinfo(i), output);
  }

  // optional .FabByExample.proto.SymmetryChoices symmetryChoices = 13;
  if (has_symmetrychoices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->symmetrychoices(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Template::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .FabByExample.proto.symbolic.Parameter parameter = 3;
  for (int i = 0; i < this->parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parameter(i), target);
  }

  // optional .FabByExample.proto.MappingFunction mapping_function = 4;
  if (has_mapping_function()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mapping_function(), target);
  }

  // optional .FabByExample.proto.FeasibleSet feasible_set = 5;
  if (has_feasible_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->feasible_set(), target);
  }

  // repeated int32 child_template_id = 6;
  for (int i = 0; i < this->child_template_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->child_template_id(i), target);
  }

  // repeated .FabByExample.proto.Connection connection = 7;
  for (int i = 0; i < this->connection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->connection(i), target);
  }

  // repeated .FabByExample.proto.Patch patch = 8;
  for (int i = 0; i < this->patch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->patch(i), target);
  }

  // optional bool independent = 9;
  if (has_independent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->independent(), target);
  }

  // optional .FabByExample.proto.Semantics semantics = 10;
  if (has_semantics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->semantics(), target);
  }

  // repeated .FabByExample.proto.symbolic.Point3S contactPoints = 11;
  for (int i = 0; i < this->contactpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->contactpoints(i), target);
  }

  // repeated .FabByExample.proto.ContactInfo contactInfo = 12;
  for (int i = 0; i < this->contactinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->contactinfo(i), target);
  }

  // optional .FabByExample.proto.SymmetryChoices symmetryChoices = 13;
  if (has_symmetrychoices()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->symmetrychoices(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Template::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .FabByExample.proto.MappingFunction mapping_function = 4;
    if (has_mapping_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapping_function());
    }

    // optional .FabByExample.proto.FeasibleSet feasible_set = 5;
    if (has_feasible_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feasible_set());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool independent = 9;
    if (has_independent()) {
      total_size += 1 + 1;
    }

    // optional .FabByExample.proto.Semantics semantics = 10;
    if (has_semantics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->semantics());
    }

    // optional .FabByExample.proto.SymmetryChoices symmetryChoices = 13;
    if (has_symmetrychoices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symmetrychoices());
    }

  }
  // repeated .FabByExample.proto.symbolic.Parameter parameter = 3;
  total_size += 1 * this->parameter_size();
  for (int i = 0; i < this->parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameter(i));
  }

  // repeated int32 child_template_id = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->child_template_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->child_template_id(i));
    }
    total_size += 1 * this->child_template_id_size() + data_size;
  }

  // repeated .FabByExample.proto.Connection connection = 7;
  total_size += 1 * this->connection_size();
  for (int i = 0; i < this->connection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connection(i));
  }

  // repeated .FabByExample.proto.Patch patch = 8;
  total_size += 1 * this->patch_size();
  for (int i = 0; i < this->patch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patch(i));
  }

  // repeated .FabByExample.proto.symbolic.Point3S contactPoints = 11;
  total_size += 1 * this->contactpoints_size();
  for (int i = 0; i < this->contactpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactpoints(i));
  }

  // repeated .FabByExample.proto.ContactInfo contactInfo = 12;
  total_size += 1 * this->contactinfo_size();
  for (int i = 0; i < this->contactinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contactinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Template::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Template* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Template*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Template::MergeFrom(const Template& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_.MergeFrom(from.parameter_);
  child_template_id_.MergeFrom(from.child_template_id_);
  connection_.MergeFrom(from.connection_);
  patch_.MergeFrom(from.patch_);
  contactpoints_.MergeFrom(from.contactpoints_);
  contactinfo_.MergeFrom(from.contactinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mapping_function()) {
      mutable_mapping_function()->::FabByExample::proto::MappingFunction::MergeFrom(from.mapping_function());
    }
    if (from.has_feasible_set()) {
      mutable_feasible_set()->::FabByExample::proto::FeasibleSet::MergeFrom(from.feasible_set());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_independent()) {
      set_independent(from.independent());
    }
    if (from.has_semantics()) {
      mutable_semantics()->::FabByExample::proto::Semantics::MergeFrom(from.semantics());
    }
    if (from.has_symmetrychoices()) {
      mutable_symmetrychoices()->::FabByExample::proto::SymmetryChoices::MergeFrom(from.symmetrychoices());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Template::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Template::CopyFrom(const Template& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Template::IsInitialized() const {

  if (has_mapping_function()) {
    if (!this->mapping_function().IsInitialized()) return false;
  }
  return true;
}

void Template::Swap(Template* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    parameter_.Swap(&other->parameter_);
    std::swap(mapping_function_, other->mapping_function_);
    std::swap(feasible_set_, other->feasible_set_);
    child_template_id_.Swap(&other->child_template_id_);
    connection_.Swap(&other->connection_);
    patch_.Swap(&other->patch_);
    std::swap(independent_, other->independent_);
    std::swap(semantics_, other->semantics_);
    contactpoints_.Swap(&other->contactpoints_);
    contactinfo_.Swap(&other->contactinfo_);
    std::swap(symmetrychoices_, other->symmetrychoices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Template::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Template_descriptor_;
  metadata.reflection = Template_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContactInfo::kPointFieldNumber;
const int ContactInfo::kHasBeenConstraintFieldNumber;
#endif  // !_MSC_VER

ContactInfo::ContactInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContactInfo::InitAsDefaultInstance() {
  point_ = const_cast< ::FabByExample::proto::symbolic::Point3S*>(&::FabByExample::proto::symbolic::Point3S::default_instance());
}

ContactInfo::ContactInfo(const ContactInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContactInfo::SharedCtor() {
  _cached_size_ = 0;
  point_ = NULL;
  hasbeenconstraint_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContactInfo::~ContactInfo() {
  SharedDtor();
}

void ContactInfo::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void ContactInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContactInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContactInfo_descriptor_;
}

const ContactInfo& ContactInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

ContactInfo* ContactInfo::default_instance_ = NULL;

ContactInfo* ContactInfo::New() const {
  return new ContactInfo;
}

void ContactInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_point()) {
      if (point_ != NULL) point_->::FabByExample::proto::symbolic::Point3S::Clear();
    }
    hasbeenconstraint_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContactInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.Point3S point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasBeenConstraint;
        break;
      }

      // optional bool hasBeenConstraint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasBeenConstraint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasbeenconstraint_)));
          set_has_hasbeenconstraint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContactInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.Point3S point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(), output);
  }

  // optional bool hasBeenConstraint = 2;
  if (has_hasbeenconstraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasbeenconstraint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContactInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.Point3S point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(), target);
  }

  // optional bool hasBeenConstraint = 2;
  if (has_hasbeenconstraint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasbeenconstraint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContactInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.Point3S point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }

    // optional bool hasBeenConstraint = 2;
    if (has_hasbeenconstraint()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContactInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContactInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContactInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContactInfo::MergeFrom(const ContactInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      mutable_point()->::FabByExample::proto::symbolic::Point3S::MergeFrom(from.point());
    }
    if (from.has_hasbeenconstraint()) {
      set_hasbeenconstraint(from.hasbeenconstraint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContactInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContactInfo::CopyFrom(const ContactInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactInfo::IsInitialized() const {

  return true;
}

void ContactInfo::Swap(ContactInfo* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    std::swap(hasbeenconstraint_, other->hasbeenconstraint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContactInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContactInfo_descriptor_;
  metadata.reflection = ContactInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SymmetryChoices::kSymmGroundFieldNumber;
const int SymmetryChoices::kSymmLegWFieldNumber;
const int SymmetryChoices::kSymmLegLFieldNumber;
const int SymmetryChoices::kSymmSpacingFieldNumber;
#endif  // !_MSC_VER

SymmetryChoices::SymmetryChoices()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SymmetryChoices::InitAsDefaultInstance() {
}

SymmetryChoices::SymmetryChoices(const SymmetryChoices& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SymmetryChoices::SharedCtor() {
  _cached_size_ = 0;
  symm_ground_ = false;
  symm_legw_ = false;
  symm_legl_ = false;
  symm_spacing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymmetryChoices::~SymmetryChoices() {
  SharedDtor();
}

void SymmetryChoices::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SymmetryChoices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymmetryChoices::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymmetryChoices_descriptor_;
}

const SymmetryChoices& SymmetryChoices::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

SymmetryChoices* SymmetryChoices::default_instance_ = NULL;

SymmetryChoices* SymmetryChoices::New() const {
  return new SymmetryChoices;
}

void SymmetryChoices::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    symm_ground_ = false;
    symm_legw_ = false;
    symm_legl_ = false;
    symm_spacing_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymmetryChoices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool symm_ground = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &symm_ground_)));
          set_has_symm_ground();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_symm_legW;
        break;
      }

      // optional bool symm_legW = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_symm_legW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &symm_legw_)));
          set_has_symm_legw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_symm_legL;
        break;
      }

      // optional bool symm_legL = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_symm_legL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &symm_legl_)));
          set_has_symm_legl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_symm_spacing;
        break;
      }

      // optional bool symm_spacing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_symm_spacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &symm_spacing_)));
          set_has_symm_spacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SymmetryChoices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool symm_ground = 1;
  if (has_symm_ground()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->symm_ground(), output);
  }

  // optional bool symm_legW = 2;
  if (has_symm_legw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->symm_legw(), output);
  }

  // optional bool symm_legL = 3;
  if (has_symm_legl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->symm_legl(), output);
  }

  // optional bool symm_spacing = 4;
  if (has_symm_spacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->symm_spacing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SymmetryChoices::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool symm_ground = 1;
  if (has_symm_ground()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->symm_ground(), target);
  }

  // optional bool symm_legW = 2;
  if (has_symm_legw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->symm_legw(), target);
  }

  // optional bool symm_legL = 3;
  if (has_symm_legl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->symm_legl(), target);
  }

  // optional bool symm_spacing = 4;
  if (has_symm_spacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->symm_spacing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SymmetryChoices::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool symm_ground = 1;
    if (has_symm_ground()) {
      total_size += 1 + 1;
    }

    // optional bool symm_legW = 2;
    if (has_symm_legw()) {
      total_size += 1 + 1;
    }

    // optional bool symm_legL = 3;
    if (has_symm_legl()) {
      total_size += 1 + 1;
    }

    // optional bool symm_spacing = 4;
    if (has_symm_spacing()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymmetryChoices::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymmetryChoices* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymmetryChoices*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymmetryChoices::MergeFrom(const SymmetryChoices& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symm_ground()) {
      set_symm_ground(from.symm_ground());
    }
    if (from.has_symm_legw()) {
      set_symm_legw(from.symm_legw());
    }
    if (from.has_symm_legl()) {
      set_symm_legl(from.symm_legl());
    }
    if (from.has_symm_spacing()) {
      set_symm_spacing(from.symm_spacing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymmetryChoices::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymmetryChoices::CopyFrom(const SymmetryChoices& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymmetryChoices::IsInitialized() const {

  return true;
}

void SymmetryChoices::Swap(SymmetryChoices* other) {
  if (other != this) {
    std::swap(symm_ground_, other->symm_ground_);
    std::swap(symm_legw_, other->symm_legw_);
    std::swap(symm_legl_, other->symm_legl_);
    std::swap(symm_spacing_, other->symm_spacing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymmetryChoices::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymmetryChoices_descriptor_;
  metadata.reflection = SymmetryChoices_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Semantics_PrintMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Semantics_PrintMethod_descriptor_;
}
bool Semantics_PrintMethod_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Semantics_PrintMethod Semantics::PRINT_AND_FOLD;
const Semantics_PrintMethod Semantics::DIRECT_3D;
const Semantics_PrintMethod Semantics::PrintMethod_MIN;
const Semantics_PrintMethod Semantics::PrintMethod_MAX;
const int Semantics::PrintMethod_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Semantics_PartType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Semantics_PartType_descriptor_;
}
bool Semantics_PartType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Semantics_PartType Semantics::LEG;
const Semantics_PartType Semantics::BODY;
const Semantics_PartType Semantics::PERIPHERAL;
const Semantics_PartType Semantics::FACE;
const Semantics_PartType Semantics::GENERAL;
const Semantics_PartType Semantics::WHEEL;
const Semantics_PartType Semantics::PartType_MIN;
const Semantics_PartType Semantics::PartType_MAX;
const int Semantics::PartType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Semantics::kPrintMethodFieldNumber;
const int Semantics::kPartTypeFieldNumber;
#endif  // !_MSC_VER

Semantics::Semantics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Semantics::InitAsDefaultInstance() {
}

Semantics::Semantics(const Semantics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Semantics::SharedCtor() {
  _cached_size_ = 0;
  printmethod_ = 1;
  parttype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Semantics::~Semantics() {
  SharedDtor();
}

void Semantics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Semantics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Semantics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Semantics_descriptor_;
}

const Semantics& Semantics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

Semantics* Semantics::default_instance_ = NULL;

Semantics* Semantics::New() const {
  return new Semantics;
}

void Semantics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    printmethod_ = 1;
    parttype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Semantics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.Semantics.PrintMethod printMethod = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FabByExample::proto::Semantics_PrintMethod_IsValid(value)) {
            set_printmethod(static_cast< ::FabByExample::proto::Semantics_PrintMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_partType;
        break;
      }

      // optional .FabByExample.proto.Semantics.PartType partType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_partType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FabByExample::proto::Semantics_PartType_IsValid(value)) {
            set_parttype(static_cast< ::FabByExample::proto::Semantics_PartType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Semantics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.Semantics.PrintMethod printMethod = 1;
  if (has_printmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->printmethod(), output);
  }

  // optional .FabByExample.proto.Semantics.PartType partType = 2;
  if (has_parttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->parttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Semantics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.Semantics.PrintMethod printMethod = 1;
  if (has_printmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->printmethod(), target);
  }

  // optional .FabByExample.proto.Semantics.PartType partType = 2;
  if (has_parttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->parttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Semantics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.Semantics.PrintMethod printMethod = 1;
    if (has_printmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->printmethod());
    }

    // optional .FabByExample.proto.Semantics.PartType partType = 2;
    if (has_parttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->parttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Semantics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Semantics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Semantics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Semantics::MergeFrom(const Semantics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_printmethod()) {
      set_printmethod(from.printmethod());
    }
    if (from.has_parttype()) {
      set_parttype(from.parttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Semantics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Semantics::CopyFrom(const Semantics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Semantics::IsInitialized() const {

  return true;
}

void Semantics::Swap(Semantics* other) {
  if (other != this) {
    std::swap(printmethod_, other->printmethod_);
    std::swap(parttype_, other->parttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Semantics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Semantics_descriptor_;
  metadata.reflection = Semantics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Patch::kIdFieldNumber;
const int Patch::kEdge2SPatchFieldNumber;
const int Patch::kServoPointPatchFieldNumber;
const int Patch::kServoLinePatchFieldNumber;
const int Patch::kPeripheralpatchFieldNumber;
#endif  // !_MSC_VER

Patch::Patch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Patch::InitAsDefaultInstance() {
  edge2spatch_ = const_cast< ::FabByExample::proto::Edge2SPatch*>(&::FabByExample::proto::Edge2SPatch::default_instance());
  servopointpatch_ = const_cast< ::FabByExample::proto::ServoPointPatch*>(&::FabByExample::proto::ServoPointPatch::default_instance());
  servolinepatch_ = const_cast< ::FabByExample::proto::ServoLinePatch*>(&::FabByExample::proto::ServoLinePatch::default_instance());
  peripheralpatch_ = const_cast< ::FabByExample::proto::PeripheralPatch*>(&::FabByExample::proto::PeripheralPatch::default_instance());
}

Patch::Patch(const Patch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Patch::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  edge2spatch_ = NULL;
  servopointpatch_ = NULL;
  servolinepatch_ = NULL;
  peripheralpatch_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Patch::~Patch() {
  SharedDtor();
}

void Patch::SharedDtor() {
  if (this != default_instance_) {
    delete edge2spatch_;
    delete servopointpatch_;
    delete servolinepatch_;
    delete peripheralpatch_;
  }
}

void Patch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Patch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Patch_descriptor_;
}

const Patch& Patch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

Patch* Patch::default_instance_ = NULL;

Patch* Patch::New() const {
  return new Patch;
}

void Patch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_edge2spatch()) {
      if (edge2spatch_ != NULL) edge2spatch_->::FabByExample::proto::Edge2SPatch::Clear();
    }
    if (has_servopointpatch()) {
      if (servopointpatch_ != NULL) servopointpatch_->::FabByExample::proto::ServoPointPatch::Clear();
    }
    if (has_servolinepatch()) {
      if (servolinepatch_ != NULL) servolinepatch_->::FabByExample::proto::ServoLinePatch::Clear();
    }
    if (has_peripheralpatch()) {
      if (peripheralpatch_ != NULL) peripheralpatch_->::FabByExample::proto::PeripheralPatch::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Patch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_edge2SPatch;
        break;
      }

      // optional .FabByExample.proto.Edge2SPatch edge2SPatch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge2SPatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edge2spatch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_servoPointPatch;
        break;
      }

      // optional .FabByExample.proto.ServoPointPatch servoPointPatch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servoPointPatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servopointpatch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_servoLinePatch;
        break;
      }

      // optional .FabByExample.proto.ServoLinePatch servoLinePatch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servoLinePatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servolinepatch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_peripheralpatch;
        break;
      }

      // optional .FabByExample.proto.PeripheralPatch peripheralpatch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peripheralpatch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peripheralpatch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Patch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .FabByExample.proto.Edge2SPatch edge2SPatch = 2;
  if (has_edge2spatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edge2spatch(), output);
  }

  // optional .FabByExample.proto.ServoPointPatch servoPointPatch = 3;
  if (has_servopointpatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->servopointpatch(), output);
  }

  // optional .FabByExample.proto.ServoLinePatch servoLinePatch = 4;
  if (has_servolinepatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->servolinepatch(), output);
  }

  // optional .FabByExample.proto.PeripheralPatch peripheralpatch = 5;
  if (has_peripheralpatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->peripheralpatch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Patch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .FabByExample.proto.Edge2SPatch edge2SPatch = 2;
  if (has_edge2spatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->edge2spatch(), target);
  }

  // optional .FabByExample.proto.ServoPointPatch servoPointPatch = 3;
  if (has_servopointpatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->servopointpatch(), target);
  }

  // optional .FabByExample.proto.ServoLinePatch servoLinePatch = 4;
  if (has_servolinepatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->servolinepatch(), target);
  }

  // optional .FabByExample.proto.PeripheralPatch peripheralpatch = 5;
  if (has_peripheralpatch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->peripheralpatch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Patch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .FabByExample.proto.Edge2SPatch edge2SPatch = 2;
    if (has_edge2spatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edge2spatch());
    }

    // optional .FabByExample.proto.ServoPointPatch servoPointPatch = 3;
    if (has_servopointpatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servopointpatch());
    }

    // optional .FabByExample.proto.ServoLinePatch servoLinePatch = 4;
    if (has_servolinepatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servolinepatch());
    }

    // optional .FabByExample.proto.PeripheralPatch peripheralpatch = 5;
    if (has_peripheralpatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peripheralpatch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Patch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Patch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Patch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Patch::MergeFrom(const Patch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_edge2spatch()) {
      mutable_edge2spatch()->::FabByExample::proto::Edge2SPatch::MergeFrom(from.edge2spatch());
    }
    if (from.has_servopointpatch()) {
      mutable_servopointpatch()->::FabByExample::proto::ServoPointPatch::MergeFrom(from.servopointpatch());
    }
    if (from.has_servolinepatch()) {
      mutable_servolinepatch()->::FabByExample::proto::ServoLinePatch::MergeFrom(from.servolinepatch());
    }
    if (from.has_peripheralpatch()) {
      mutable_peripheralpatch()->::FabByExample::proto::PeripheralPatch::MergeFrom(from.peripheralpatch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Patch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Patch::CopyFrom(const Patch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Patch::IsInitialized() const {

  return true;
}

void Patch::Swap(Patch* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(edge2spatch_, other->edge2spatch_);
    std::swap(servopointpatch_, other->servopointpatch_);
    std::swap(servolinepatch_, other->servolinepatch_);
    std::swap(peripheralpatch_, other->peripheralpatch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Patch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Patch_descriptor_;
  metadata.reflection = Patch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServoPointPatch::kCenterFieldNumber;
const int ServoPointPatch::kNormalFieldNumber;
const int ServoPointPatch::kSeparationFieldNumber;
#endif  // !_MSC_VER

ServoPointPatch::ServoPointPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServoPointPatch::InitAsDefaultInstance() {
  center_ = const_cast< ::FabByExample::proto::symbolic::Point3S*>(&::FabByExample::proto::symbolic::Point3S::default_instance());
  separation_ = const_cast< ::FabByExample::proto::symbolic::LinearExpr*>(&::FabByExample::proto::symbolic::LinearExpr::default_instance());
}

ServoPointPatch::ServoPointPatch(const ServoPointPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServoPointPatch::SharedCtor() {
  _cached_size_ = 0;
  center_ = NULL;
  separation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServoPointPatch::~ServoPointPatch() {
  SharedDtor();
}

void ServoPointPatch::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
    delete separation_;
  }
}

void ServoPointPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServoPointPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServoPointPatch_descriptor_;
}

const ServoPointPatch& ServoPointPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

ServoPointPatch* ServoPointPatch::default_instance_ = NULL;

ServoPointPatch* ServoPointPatch::New() const {
  return new ServoPointPatch;
}

void ServoPointPatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_center()) {
      if (center_ != NULL) center_->::FabByExample::proto::symbolic::Point3S::Clear();
    }
    if (has_separation()) {
      if (separation_ != NULL) separation_->::FabByExample::proto::symbolic::LinearExpr::Clear();
    }
  }
  normal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServoPointPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.Point3S center = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_normal;
        break;
      }

      // repeated double normal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_normal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_normal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_normal;
        if (input->ExpectTag(26)) goto parse_separation;
        break;
      }

      // optional .FabByExample.proto.symbolic.LinearExpr separation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_separation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_separation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServoPointPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.Point3S center = 1;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->center(), output);
  }

  // repeated double normal = 2;
  for (int i = 0; i < this->normal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->normal(i), output);
  }

  // optional .FabByExample.proto.symbolic.LinearExpr separation = 3;
  if (has_separation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->separation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServoPointPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.Point3S center = 1;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->center(), target);
  }

  // repeated double normal = 2;
  for (int i = 0; i < this->normal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->normal(i), target);
  }

  // optional .FabByExample.proto.symbolic.LinearExpr separation = 3;
  if (has_separation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->separation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServoPointPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.Point3S center = 1;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

    // optional .FabByExample.proto.symbolic.LinearExpr separation = 3;
    if (has_separation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->separation());
    }

  }
  // repeated double normal = 2;
  {
    int data_size = 0;
    data_size = 8 * this->normal_size();
    total_size += 1 * this->normal_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServoPointPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServoPointPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServoPointPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServoPointPatch::MergeFrom(const ServoPointPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  normal_.MergeFrom(from.normal_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center()) {
      mutable_center()->::FabByExample::proto::symbolic::Point3S::MergeFrom(from.center());
    }
    if (from.has_separation()) {
      mutable_separation()->::FabByExample::proto::symbolic::LinearExpr::MergeFrom(from.separation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServoPointPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoPointPatch::CopyFrom(const ServoPointPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoPointPatch::IsInitialized() const {

  return true;
}

void ServoPointPatch::Swap(ServoPointPatch* other) {
  if (other != this) {
    std::swap(center_, other->center_);
    normal_.Swap(&other->normal_);
    std::swap(separation_, other->separation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServoPointPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServoPointPatch_descriptor_;
  metadata.reflection = ServoPointPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServoSpacingInfo::kAlphaFieldNumber;
const int ServoSpacingInfo::kSeparationHFieldNumber;
const int ServoSpacingInfo::kSeparationWFieldNumber;
const int ServoSpacingInfo::kAssociatedTemplatesFieldNumber;
#endif  // !_MSC_VER

ServoSpacingInfo::ServoSpacingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServoSpacingInfo::InitAsDefaultInstance() {
  alpha_ = const_cast< ::FabByExample::proto::symbolic::LinearExpr*>(&::FabByExample::proto::symbolic::LinearExpr::default_instance());
  separation_h_ = const_cast< ::FabByExample::proto::symbolic::LinearExpr*>(&::FabByExample::proto::symbolic::LinearExpr::default_instance());
}

ServoSpacingInfo::ServoSpacingInfo(const ServoSpacingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServoSpacingInfo::SharedCtor() {
  _cached_size_ = 0;
  alpha_ = NULL;
  separation_h_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServoSpacingInfo::~ServoSpacingInfo() {
  SharedDtor();
}

void ServoSpacingInfo::SharedDtor() {
  if (this != default_instance_) {
    delete alpha_;
    delete separation_h_;
  }
}

void ServoSpacingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServoSpacingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServoSpacingInfo_descriptor_;
}

const ServoSpacingInfo& ServoSpacingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

ServoSpacingInfo* ServoSpacingInfo::default_instance_ = NULL;

ServoSpacingInfo* ServoSpacingInfo::New() const {
  return new ServoSpacingInfo;
}

void ServoSpacingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alpha()) {
      if (alpha_ != NULL) alpha_->::FabByExample::proto::symbolic::LinearExpr::Clear();
    }
    if (has_separation_h()) {
      if (separation_h_ != NULL) separation_h_->::FabByExample::proto::symbolic::LinearExpr::Clear();
    }
  }
  separation_w_.Clear();
  associatedtemplates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServoSpacingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.LinearExpr alpha = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alpha()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_separation_h;
        break;
      }

      // optional .FabByExample.proto.symbolic.LinearExpr separation_h = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_separation_h:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_separation_h()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_separation_w;
        break;
      }

      // repeated .FabByExample.proto.symbolic.LinearExpr separation_w = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_separation_w:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_separation_w()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_separation_w;
        if (input->ExpectTag(32)) goto parse_associatedTemplates;
        break;
      }

      // repeated int32 associatedTemplates = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_associatedTemplates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_associatedtemplates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_associatedtemplates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_associatedTemplates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServoSpacingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.LinearExpr alpha = 1;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alpha(), output);
  }

  // optional .FabByExample.proto.symbolic.LinearExpr separation_h = 2;
  if (has_separation_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->separation_h(), output);
  }

  // repeated .FabByExample.proto.symbolic.LinearExpr separation_w = 3;
  for (int i = 0; i < this->separation_w_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->separation_w(i), output);
  }

  // repeated int32 associatedTemplates = 4;
  for (int i = 0; i < this->associatedtemplates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->associatedtemplates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServoSpacingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.LinearExpr alpha = 1;
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alpha(), target);
  }

  // optional .FabByExample.proto.symbolic.LinearExpr separation_h = 2;
  if (has_separation_h()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->separation_h(), target);
  }

  // repeated .FabByExample.proto.symbolic.LinearExpr separation_w = 3;
  for (int i = 0; i < this->separation_w_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->separation_w(i), target);
  }

  // repeated int32 associatedTemplates = 4;
  for (int i = 0; i < this->associatedtemplates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->associatedtemplates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServoSpacingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.LinearExpr alpha = 1;
    if (has_alpha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alpha());
    }

    // optional .FabByExample.proto.symbolic.LinearExpr separation_h = 2;
    if (has_separation_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->separation_h());
    }

  }
  // repeated .FabByExample.proto.symbolic.LinearExpr separation_w = 3;
  total_size += 1 * this->separation_w_size();
  for (int i = 0; i < this->separation_w_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->separation_w(i));
  }

  // repeated int32 associatedTemplates = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->associatedtemplates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->associatedtemplates(i));
    }
    total_size += 1 * this->associatedtemplates_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServoSpacingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServoSpacingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServoSpacingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServoSpacingInfo::MergeFrom(const ServoSpacingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  separation_w_.MergeFrom(from.separation_w_);
  associatedtemplates_.MergeFrom(from.associatedtemplates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alpha()) {
      mutable_alpha()->::FabByExample::proto::symbolic::LinearExpr::MergeFrom(from.alpha());
    }
    if (from.has_separation_h()) {
      mutable_separation_h()->::FabByExample::proto::symbolic::LinearExpr::MergeFrom(from.separation_h());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServoSpacingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoSpacingInfo::CopyFrom(const ServoSpacingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoSpacingInfo::IsInitialized() const {

  return true;
}

void ServoSpacingInfo::Swap(ServoSpacingInfo* other) {
  if (other != this) {
    std::swap(alpha_, other->alpha_);
    std::swap(separation_h_, other->separation_h_);
    separation_w_.Swap(&other->separation_w_);
    associatedtemplates_.Swap(&other->associatedtemplates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServoSpacingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServoSpacingInfo_descriptor_;
  metadata.reflection = ServoSpacingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServoLinePatch::kStartPointFieldNumber;
const int ServoLinePatch::kEndPointFieldNumber;
const int ServoLinePatch::kNormalFieldNumber;
const int ServoLinePatch::kServospacingFieldNumber;
#endif  // !_MSC_VER

ServoLinePatch::ServoLinePatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServoLinePatch::InitAsDefaultInstance() {
  startpoint_ = const_cast< ::FabByExample::proto::symbolic::Point3S*>(&::FabByExample::proto::symbolic::Point3S::default_instance());
  endpoint_ = const_cast< ::FabByExample::proto::symbolic::Point3S*>(&::FabByExample::proto::symbolic::Point3S::default_instance());
}

ServoLinePatch::ServoLinePatch(const ServoLinePatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServoLinePatch::SharedCtor() {
  _cached_size_ = 0;
  startpoint_ = NULL;
  endpoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServoLinePatch::~ServoLinePatch() {
  SharedDtor();
}

void ServoLinePatch::SharedDtor() {
  if (this != default_instance_) {
    delete startpoint_;
    delete endpoint_;
  }
}

void ServoLinePatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServoLinePatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServoLinePatch_descriptor_;
}

const ServoLinePatch& ServoLinePatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

ServoLinePatch* ServoLinePatch::default_instance_ = NULL;

ServoLinePatch* ServoLinePatch::New() const {
  return new ServoLinePatch;
}

void ServoLinePatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_startpoint()) {
      if (startpoint_ != NULL) startpoint_->::FabByExample::proto::symbolic::Point3S::Clear();
    }
    if (has_endpoint()) {
      if (endpoint_ != NULL) endpoint_->::FabByExample::proto::symbolic::Point3S::Clear();
    }
  }
  normal_.Clear();
  servospacing_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServoLinePatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.Point3S startPoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_endPoint;
        break;
      }

      // optional .FabByExample.proto.symbolic.Point3S endPoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_normal;
        break;
      }

      // repeated double normal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_normal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_normal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_normal;
        if (input->ExpectTag(34)) goto parse_servospacing;
        break;
      }

      // repeated .FabByExample.proto.ServoSpacingInfo servospacing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servospacing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servospacing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_servospacing;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServoLinePatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.Point3S startPoint = 1;
  if (has_startpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->startpoint(), output);
  }

  // optional .FabByExample.proto.symbolic.Point3S endPoint = 2;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->endpoint(), output);
  }

  // repeated double normal = 3;
  for (int i = 0; i < this->normal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->normal(i), output);
  }

  // repeated .FabByExample.proto.ServoSpacingInfo servospacing = 4;
  for (int i = 0; i < this->servospacing_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->servospacing(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServoLinePatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.Point3S startPoint = 1;
  if (has_startpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->startpoint(), target);
  }

  // optional .FabByExample.proto.symbolic.Point3S endPoint = 2;
  if (has_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->endpoint(), target);
  }

  // repeated double normal = 3;
  for (int i = 0; i < this->normal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->normal(i), target);
  }

  // repeated .FabByExample.proto.ServoSpacingInfo servospacing = 4;
  for (int i = 0; i < this->servospacing_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->servospacing(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServoLinePatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.Point3S startPoint = 1;
    if (has_startpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startpoint());
    }

    // optional .FabByExample.proto.symbolic.Point3S endPoint = 2;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpoint());
    }

  }
  // repeated double normal = 3;
  {
    int data_size = 0;
    data_size = 8 * this->normal_size();
    total_size += 1 * this->normal_size() + data_size;
  }

  // repeated .FabByExample.proto.ServoSpacingInfo servospacing = 4;
  total_size += 1 * this->servospacing_size();
  for (int i = 0; i < this->servospacing_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servospacing(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServoLinePatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServoLinePatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServoLinePatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServoLinePatch::MergeFrom(const ServoLinePatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  normal_.MergeFrom(from.normal_);
  servospacing_.MergeFrom(from.servospacing_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startpoint()) {
      mutable_startpoint()->::FabByExample::proto::symbolic::Point3S::MergeFrom(from.startpoint());
    }
    if (from.has_endpoint()) {
      mutable_endpoint()->::FabByExample::proto::symbolic::Point3S::MergeFrom(from.endpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServoLinePatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoLinePatch::CopyFrom(const ServoLinePatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoLinePatch::IsInitialized() const {

  return true;
}

void ServoLinePatch::Swap(ServoLinePatch* other) {
  if (other != this) {
    std::swap(startpoint_, other->startpoint_);
    std::swap(endpoint_, other->endpoint_);
    normal_.Swap(&other->normal_);
    servospacing_.Swap(&other->servospacing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServoLinePatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServoLinePatch_descriptor_;
  metadata.reflection = ServoLinePatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeripheralPatch::kEdgeId1FieldNumber;
const int PeripheralPatch::kEdgeId2FieldNumber;
const int PeripheralPatch::kNormalFieldNumber;
#endif  // !_MSC_VER

PeripheralPatch::PeripheralPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeripheralPatch::InitAsDefaultInstance() {
}

PeripheralPatch::PeripheralPatch(const PeripheralPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeripheralPatch::SharedCtor() {
  _cached_size_ = 0;
  edgeid1_ = 0;
  edgeid2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeripheralPatch::~PeripheralPatch() {
  SharedDtor();
}

void PeripheralPatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PeripheralPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeripheralPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeripheralPatch_descriptor_;
}

const PeripheralPatch& PeripheralPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

PeripheralPatch* PeripheralPatch::default_instance_ = NULL;

PeripheralPatch* PeripheralPatch::New() const {
  return new PeripheralPatch;
}

void PeripheralPatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    edgeid1_ = 0;
    edgeid2_ = 0;
  }
  normal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeripheralPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 edgeId1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edgeid1_)));
          set_has_edgeid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_edgeId2;
        break;
      }

      // optional int32 edgeId2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edgeId2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edgeid2_)));
          set_has_edgeid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_normal;
        break;
      }

      // repeated double normal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_normal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_normal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_normal;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeripheralPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 edgeId1 = 1;
  if (has_edgeid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->edgeid1(), output);
  }

  // optional int32 edgeId2 = 2;
  if (has_edgeid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->edgeid2(), output);
  }

  // repeated double normal = 3;
  for (int i = 0; i < this->normal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->normal(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeripheralPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 edgeId1 = 1;
  if (has_edgeid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->edgeid1(), target);
  }

  // optional int32 edgeId2 = 2;
  if (has_edgeid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->edgeid2(), target);
  }

  // repeated double normal = 3;
  for (int i = 0; i < this->normal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->normal(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeripheralPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 edgeId1 = 1;
    if (has_edgeid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edgeid1());
    }

    // optional int32 edgeId2 = 2;
    if (has_edgeid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edgeid2());
    }

  }
  // repeated double normal = 3;
  {
    int data_size = 0;
    data_size = 8 * this->normal_size();
    total_size += 1 * this->normal_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeripheralPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeripheralPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeripheralPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeripheralPatch::MergeFrom(const PeripheralPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  normal_.MergeFrom(from.normal_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_edgeid1()) {
      set_edgeid1(from.edgeid1());
    }
    if (from.has_edgeid2()) {
      set_edgeid2(from.edgeid2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeripheralPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeripheralPatch::CopyFrom(const PeripheralPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeripheralPatch::IsInitialized() const {

  return true;
}

void PeripheralPatch::Swap(PeripheralPatch* other) {
  if (other != this) {
    std::swap(edgeid1_, other->edgeid1_);
    std::swap(edgeid2_, other->edgeid2_);
    normal_.Swap(&other->normal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeripheralPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeripheralPatch_descriptor_;
  metadata.reflection = PeripheralPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Edge2SPatch::kEdgeIdFieldNumber;
#endif  // !_MSC_VER

Edge2SPatch::Edge2SPatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Edge2SPatch::InitAsDefaultInstance() {
}

Edge2SPatch::Edge2SPatch(const Edge2SPatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Edge2SPatch::SharedCtor() {
  _cached_size_ = 0;
  edgeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Edge2SPatch::~Edge2SPatch() {
  SharedDtor();
}

void Edge2SPatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Edge2SPatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge2SPatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge2SPatch_descriptor_;
}

const Edge2SPatch& Edge2SPatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

Edge2SPatch* Edge2SPatch::default_instance_ = NULL;

Edge2SPatch* Edge2SPatch::New() const {
  return new Edge2SPatch;
}

void Edge2SPatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    edgeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Edge2SPatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 edgeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edgeid_)));
          set_has_edgeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Edge2SPatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 edgeId = 1;
  if (has_edgeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->edgeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Edge2SPatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 edgeId = 1;
  if (has_edgeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->edgeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Edge2SPatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 edgeId = 1;
    if (has_edgeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edgeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge2SPatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Edge2SPatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Edge2SPatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Edge2SPatch::MergeFrom(const Edge2SPatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_edgeid()) {
      set_edgeid(from.edgeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Edge2SPatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge2SPatch::CopyFrom(const Edge2SPatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge2SPatch::IsInitialized() const {

  return true;
}

void Edge2SPatch::Swap(Edge2SPatch* other) {
  if (other != this) {
    std::swap(edgeid_, other->edgeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Edge2SPatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge2SPatch_descriptor_;
  metadata.reflection = Edge2SPatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Connection::kParentPatchRefFieldNumber;
const int Connection::kPatchRefFieldNumber;
const int Connection::kConnectionModeFieldNumber;
const int Connection::kJointConnectionFieldNumber;
const int Connection::kFillConnectionFieldNumber;
#endif  // !_MSC_VER

Connection::Connection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Connection::InitAsDefaultInstance() {
  connectionmode_ = const_cast< ::FabByExample::proto::ConnectionMode*>(&::FabByExample::proto::ConnectionMode::default_instance());
  jointconnection_ = const_cast< ::FabByExample::proto::JointConnection*>(&::FabByExample::proto::JointConnection::default_instance());
  fillconnection_ = const_cast< ::FabByExample::proto::FillConnection*>(&::FabByExample::proto::FillConnection::default_instance());
}

Connection::Connection(const Connection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Connection::SharedCtor() {
  _cached_size_ = 0;
  parentpatchref_ = 0;
  connectionmode_ = NULL;
  jointconnection_ = NULL;
  fillconnection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Connection::~Connection() {
  SharedDtor();
}

void Connection::SharedDtor() {
  if (this != default_instance_) {
    delete connectionmode_;
    delete jointconnection_;
    delete fillconnection_;
  }
}

void Connection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Connection_descriptor_;
}

const Connection& Connection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

Connection* Connection::default_instance_ = NULL;

Connection* Connection::New() const {
  return new Connection;
}

void Connection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    parentpatchref_ = 0;
    if (has_connectionmode()) {
      if (connectionmode_ != NULL) connectionmode_->::FabByExample::proto::ConnectionMode::Clear();
    }
    if (has_jointconnection()) {
      if (jointconnection_ != NULL) jointconnection_->::FabByExample::proto::JointConnection::Clear();
    }
    if (has_fillconnection()) {
      if (fillconnection_ != NULL) fillconnection_->::FabByExample::proto::FillConnection::Clear();
    }
  }
  patchref_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Connection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 parentPatchRef = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parentpatchref_)));
          set_has_parentpatchref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_patchRef;
        break;
      }

      // repeated int32 patchRef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patchRef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_patchref())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_patchref())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_patchRef;
        if (input->ExpectTag(26)) goto parse_connectionMode;
        break;
      }

      // optional .FabByExample.proto.ConnectionMode connectionMode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connectionMode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connectionmode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jointConnection;
        break;
      }

      // optional .FabByExample.proto.JointConnection jointConnection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jointConnection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jointconnection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fillConnection;
        break;
      }

      // optional .FabByExample.proto.FillConnection fillConnection = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fillConnection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fillconnection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Connection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 parentPatchRef = 1;
  if (has_parentpatchref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->parentpatchref(), output);
  }

  // repeated int32 patchRef = 2;
  for (int i = 0; i < this->patchref_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->patchref(i), output);
  }

  // optional .FabByExample.proto.ConnectionMode connectionMode = 3;
  if (has_connectionmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->connectionmode(), output);
  }

  // optional .FabByExample.proto.JointConnection jointConnection = 4;
  if (has_jointconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->jointconnection(), output);
  }

  // optional .FabByExample.proto.FillConnection fillConnection = 5;
  if (has_fillconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fillconnection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Connection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 parentPatchRef = 1;
  if (has_parentpatchref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->parentpatchref(), target);
  }

  // repeated int32 patchRef = 2;
  for (int i = 0; i < this->patchref_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->patchref(i), target);
  }

  // optional .FabByExample.proto.ConnectionMode connectionMode = 3;
  if (has_connectionmode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->connectionmode(), target);
  }

  // optional .FabByExample.proto.JointConnection jointConnection = 4;
  if (has_jointconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->jointconnection(), target);
  }

  // optional .FabByExample.proto.FillConnection fillConnection = 5;
  if (has_fillconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fillconnection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Connection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 parentPatchRef = 1;
    if (has_parentpatchref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parentpatchref());
    }

    // optional .FabByExample.proto.ConnectionMode connectionMode = 3;
    if (has_connectionmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connectionmode());
    }

    // optional .FabByExample.proto.JointConnection jointConnection = 4;
    if (has_jointconnection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jointconnection());
    }

    // optional .FabByExample.proto.FillConnection fillConnection = 5;
    if (has_fillconnection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fillconnection());
    }

  }
  // repeated int32 patchRef = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->patchref_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->patchref(i));
    }
    total_size += 1 * this->patchref_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Connection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Connection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Connection::MergeFrom(const Connection& from) {
  GOOGLE_CHECK_NE(&from, this);
  patchref_.MergeFrom(from.patchref_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parentpatchref()) {
      set_parentpatchref(from.parentpatchref());
    }
    if (from.has_connectionmode()) {
      mutable_connectionmode()->::FabByExample::proto::ConnectionMode::MergeFrom(from.connectionmode());
    }
    if (from.has_jointconnection()) {
      mutable_jointconnection()->::FabByExample::proto::JointConnection::MergeFrom(from.jointconnection());
    }
    if (from.has_fillconnection()) {
      mutable_fillconnection()->::FabByExample::proto::FillConnection::MergeFrom(from.fillconnection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Connection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connection::CopyFrom(const Connection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connection::IsInitialized() const {

  return true;
}

void Connection::Swap(Connection* other) {
  if (other != this) {
    std::swap(parentpatchref_, other->parentpatchref_);
    patchref_.Swap(&other->patchref_);
    std::swap(connectionmode_, other->connectionmode_);
    std::swap(jointconnection_, other->jointconnection_);
    std::swap(fillconnection_, other->fillconnection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Connection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Connection_descriptor_;
  metadata.reflection = Connection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConnectionMode::kFoldConnectionFieldNumber;
const int ConnectionMode::kBendConnectionFieldNumber;
const int ConnectionMode::kFlexConnectionFieldNumber;
const int ConnectionMode::kJointConnectionFieldNumber;
#endif  // !_MSC_VER

ConnectionMode::ConnectionMode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectionMode::InitAsDefaultInstance() {
  foldconnection_ = const_cast< ::FabByExample::proto::FoldConnection*>(&::FabByExample::proto::FoldConnection::default_instance());
  bendconnection_ = const_cast< ::FabByExample::proto::BendConnection*>(&::FabByExample::proto::BendConnection::default_instance());
  flexconnection_ = const_cast< ::FabByExample::proto::FlexConnection*>(&::FabByExample::proto::FlexConnection::default_instance());
  jointconnection_ = const_cast< ::FabByExample::proto::JointConnection*>(&::FabByExample::proto::JointConnection::default_instance());
}

ConnectionMode::ConnectionMode(const ConnectionMode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectionMode::SharedCtor() {
  _cached_size_ = 0;
  foldconnection_ = NULL;
  bendconnection_ = NULL;
  flexconnection_ = NULL;
  jointconnection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectionMode::~ConnectionMode() {
  SharedDtor();
}

void ConnectionMode::SharedDtor() {
  if (this != default_instance_) {
    delete foldconnection_;
    delete bendconnection_;
    delete flexconnection_;
    delete jointconnection_;
  }
}

void ConnectionMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionMode_descriptor_;
}

const ConnectionMode& ConnectionMode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

ConnectionMode* ConnectionMode::default_instance_ = NULL;

ConnectionMode* ConnectionMode::New() const {
  return new ConnectionMode;
}

void ConnectionMode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_foldconnection()) {
      if (foldconnection_ != NULL) foldconnection_->::FabByExample::proto::FoldConnection::Clear();
    }
    if (has_bendconnection()) {
      if (bendconnection_ != NULL) bendconnection_->::FabByExample::proto::BendConnection::Clear();
    }
    if (has_flexconnection()) {
      if (flexconnection_ != NULL) flexconnection_->::FabByExample::proto::FlexConnection::Clear();
    }
    if (has_jointconnection()) {
      if (jointconnection_ != NULL) jointconnection_->::FabByExample::proto::JointConnection::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectionMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.FoldConnection foldConnection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_foldconnection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bendConnection;
        break;
      }

      // optional .FabByExample.proto.BendConnection bendConnection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bendConnection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bendconnection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_flexConnection;
        break;
      }

      // optional .FabByExample.proto.FlexConnection flexConnection = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flexConnection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flexconnection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_jointConnection;
        break;
      }

      // optional .FabByExample.proto.JointConnection jointConnection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jointConnection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jointconnection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectionMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.FoldConnection foldConnection = 1;
  if (has_foldconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->foldconnection(), output);
  }

  // optional .FabByExample.proto.BendConnection bendConnection = 2;
  if (has_bendconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bendconnection(), output);
  }

  // optional .FabByExample.proto.FlexConnection flexConnection = 3;
  if (has_flexconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->flexconnection(), output);
  }

  // optional .FabByExample.proto.JointConnection jointConnection = 4;
  if (has_jointconnection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->jointconnection(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectionMode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.FoldConnection foldConnection = 1;
  if (has_foldconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->foldconnection(), target);
  }

  // optional .FabByExample.proto.BendConnection bendConnection = 2;
  if (has_bendconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bendconnection(), target);
  }

  // optional .FabByExample.proto.FlexConnection flexConnection = 3;
  if (has_flexconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->flexconnection(), target);
  }

  // optional .FabByExample.proto.JointConnection jointConnection = 4;
  if (has_jointconnection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->jointconnection(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectionMode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.FoldConnection foldConnection = 1;
    if (has_foldconnection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->foldconnection());
    }

    // optional .FabByExample.proto.BendConnection bendConnection = 2;
    if (has_bendconnection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bendconnection());
    }

    // optional .FabByExample.proto.FlexConnection flexConnection = 3;
    if (has_flexconnection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flexconnection());
    }

    // optional .FabByExample.proto.JointConnection jointConnection = 4;
    if (has_jointconnection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jointconnection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionMode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectionMode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectionMode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectionMode::MergeFrom(const ConnectionMode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_foldconnection()) {
      mutable_foldconnection()->::FabByExample::proto::FoldConnection::MergeFrom(from.foldconnection());
    }
    if (from.has_bendconnection()) {
      mutable_bendconnection()->::FabByExample::proto::BendConnection::MergeFrom(from.bendconnection());
    }
    if (from.has_flexconnection()) {
      mutable_flexconnection()->::FabByExample::proto::FlexConnection::MergeFrom(from.flexconnection());
    }
    if (from.has_jointconnection()) {
      mutable_jointconnection()->::FabByExample::proto::JointConnection::MergeFrom(from.jointconnection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectionMode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionMode::CopyFrom(const ConnectionMode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionMode::IsInitialized() const {

  return true;
}

void ConnectionMode::Swap(ConnectionMode* other) {
  if (other != this) {
    std::swap(foldconnection_, other->foldconnection_);
    std::swap(bendconnection_, other->bendconnection_);
    std::swap(flexconnection_, other->flexconnection_);
    std::swap(jointconnection_, other->jointconnection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectionMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionMode_descriptor_;
  metadata.reflection = ConnectionMode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FoldConnection::kAngleFieldNumber;
#endif  // !_MSC_VER

FoldConnection::FoldConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FoldConnection::InitAsDefaultInstance() {
}

FoldConnection::FoldConnection(const FoldConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FoldConnection::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoldConnection::~FoldConnection() {
  SharedDtor();
}

void FoldConnection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FoldConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoldConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoldConnection_descriptor_;
}

const FoldConnection& FoldConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

FoldConnection* FoldConnection::default_instance_ = NULL;

FoldConnection* FoldConnection::New() const {
  return new FoldConnection;
}

void FoldConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoldConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FoldConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FoldConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FoldConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double angle = 1;
    if (has_angle()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoldConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoldConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoldConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoldConnection::MergeFrom(const FoldConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoldConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoldConnection::CopyFrom(const FoldConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoldConnection::IsInitialized() const {

  return true;
}

void FoldConnection::Swap(FoldConnection* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoldConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoldConnection_descriptor_;
  metadata.reflection = FoldConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JointConnection::kAngleFieldNumber;
const int JointConnection::kArticulationsFieldNumber;
const int JointConnection::kPrintTypeFieldNumber;
#endif  // !_MSC_VER

JointConnection::JointConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JointConnection::InitAsDefaultInstance() {
  articulations_ = const_cast< ::FabByExample::proto::Articulation*>(&::FabByExample::proto::Articulation::default_instance());
  printtype_ = const_cast< ::FabByExample::proto::PrintType*>(&::FabByExample::proto::PrintType::default_instance());
}

JointConnection::JointConnection(const JointConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JointConnection::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  articulations_ = NULL;
  printtype_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JointConnection::~JointConnection() {
  SharedDtor();
}

void JointConnection::SharedDtor() {
  if (this != default_instance_) {
    delete articulations_;
    delete printtype_;
  }
}

void JointConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JointConnection_descriptor_;
}

const JointConnection& JointConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

JointConnection* JointConnection::default_instance_ = NULL;

JointConnection* JointConnection::New() const {
  return new JointConnection;
}

void JointConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_ = 0;
    if (has_articulations()) {
      if (articulations_ != NULL) articulations_->::FabByExample::proto::Articulation::Clear();
    }
    if (has_printtype()) {
      if (printtype_ != NULL) printtype_->::FabByExample::proto::PrintType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JointConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_articulations;
        break;
      }

      // optional .FabByExample.proto.Articulation articulations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_articulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_articulations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_printType;
        break;
      }

      // optional .FabByExample.proto.PrintType printType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_printtype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JointConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->angle(), output);
  }

  // optional .FabByExample.proto.Articulation articulations = 2;
  if (has_articulations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->articulations(), output);
  }

  // optional .FabByExample.proto.PrintType printType = 3;
  if (has_printtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->printtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JointConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->angle(), target);
  }

  // optional .FabByExample.proto.Articulation articulations = 2;
  if (has_articulations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->articulations(), target);
  }

  // optional .FabByExample.proto.PrintType printType = 3;
  if (has_printtype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->printtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JointConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double angle = 1;
    if (has_angle()) {
      total_size += 1 + 8;
    }

    // optional .FabByExample.proto.Articulation articulations = 2;
    if (has_articulations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->articulations());
    }

    // optional .FabByExample.proto.PrintType printType = 3;
    if (has_printtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->printtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JointConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JointConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JointConnection::MergeFrom(const JointConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_articulations()) {
      mutable_articulations()->::FabByExample::proto::Articulation::MergeFrom(from.articulations());
    }
    if (from.has_printtype()) {
      mutable_printtype()->::FabByExample::proto::PrintType::MergeFrom(from.printtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JointConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointConnection::CopyFrom(const JointConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointConnection::IsInitialized() const {

  return true;
}

void JointConnection::Swap(JointConnection* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(articulations_, other->articulations_);
    std::swap(printtype_, other->printtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JointConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JointConnection_descriptor_;
  metadata.reflection = JointConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrintType::kBallAndSocketFieldNumber;
const int PrintType::kPrismaticFieldNumber;
const int PrintType::kRevoluteFieldNumber;
const int PrintType::kNoneFieldNumber;
#endif  // !_MSC_VER

PrintType::PrintType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintType::InitAsDefaultInstance() {
}

PrintType::PrintType(const PrintType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintType::SharedCtor() {
  _cached_size_ = 0;
  ballandsocket_ = false;
  prismatic_ = false;
  revolute_ = false;
  none_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintType::~PrintType() {
  SharedDtor();
}

void PrintType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrintType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintType_descriptor_;
}

const PrintType& PrintType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

PrintType* PrintType::default_instance_ = NULL;

PrintType* PrintType::New() const {
  return new PrintType;
}

void PrintType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ballandsocket_ = false;
    prismatic_ = false;
    revolute_ = false;
    none_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ballAndSocket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ballandsocket_)));
          set_has_ballandsocket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prismatic;
        break;
      }

      // optional bool prismatic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prismatic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prismatic_)));
          set_has_prismatic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_revolute;
        break;
      }

      // optional bool revolute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revolute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &revolute_)));
          set_has_revolute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_none;
        break;
      }

      // optional bool none = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_none:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &none_)));
          set_has_none();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool ballAndSocket = 1;
  if (has_ballandsocket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ballandsocket(), output);
  }

  // optional bool prismatic = 2;
  if (has_prismatic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->prismatic(), output);
  }

  // optional bool revolute = 3;
  if (has_revolute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->revolute(), output);
  }

  // optional bool none = 4;
  if (has_none()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->none(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool ballAndSocket = 1;
  if (has_ballandsocket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ballandsocket(), target);
  }

  // optional bool prismatic = 2;
  if (has_prismatic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->prismatic(), target);
  }

  // optional bool revolute = 3;
  if (has_revolute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->revolute(), target);
  }

  // optional bool none = 4;
  if (has_none()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->none(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool ballAndSocket = 1;
    if (has_ballandsocket()) {
      total_size += 1 + 1;
    }

    // optional bool prismatic = 2;
    if (has_prismatic()) {
      total_size += 1 + 1;
    }

    // optional bool revolute = 3;
    if (has_revolute()) {
      total_size += 1 + 1;
    }

    // optional bool none = 4;
    if (has_none()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintType::MergeFrom(const PrintType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ballandsocket()) {
      set_ballandsocket(from.ballandsocket());
    }
    if (from.has_prismatic()) {
      set_prismatic(from.prismatic());
    }
    if (from.has_revolute()) {
      set_revolute(from.revolute());
    }
    if (from.has_none()) {
      set_none(from.none());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintType::CopyFrom(const PrintType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintType::IsInitialized() const {

  return true;
}

void PrintType::Swap(PrintType* other) {
  if (other != this) {
    std::swap(ballandsocket_, other->ballandsocket_);
    std::swap(prismatic_, other->prismatic_);
    std::swap(revolute_, other->revolute_);
    std::swap(none_, other->none_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintType_descriptor_;
  metadata.reflection = PrintType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BendConnection::kAngleFieldNumber;
#endif  // !_MSC_VER

BendConnection::BendConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BendConnection::InitAsDefaultInstance() {
}

BendConnection::BendConnection(const BendConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BendConnection::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BendConnection::~BendConnection() {
  SharedDtor();
}

void BendConnection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BendConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BendConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BendConnection_descriptor_;
}

const BendConnection& BendConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

BendConnection* BendConnection::default_instance_ = NULL;

BendConnection* BendConnection::New() const {
  return new BendConnection;
}

void BendConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BendConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BendConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BendConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BendConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double angle = 1;
    if (has_angle()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BendConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BendConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BendConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BendConnection::MergeFrom(const BendConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BendConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BendConnection::CopyFrom(const BendConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BendConnection::IsInitialized() const {

  return true;
}

void BendConnection::Swap(BendConnection* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BendConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BendConnection_descriptor_;
  metadata.reflection = BendConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FillConnection::kAngleFieldNumber;
#endif  // !_MSC_VER

FillConnection::FillConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FillConnection::InitAsDefaultInstance() {
}

FillConnection::FillConnection(const FillConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FillConnection::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FillConnection::~FillConnection() {
  SharedDtor();
}

void FillConnection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FillConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillConnection_descriptor_;
}

const FillConnection& FillConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

FillConnection* FillConnection::default_instance_ = NULL;

FillConnection* FillConnection::New() const {
  return new FillConnection;
}

void FillConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FillConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FillConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FillConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FillConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double angle = 1;
    if (has_angle()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FillConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FillConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FillConnection::MergeFrom(const FillConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FillConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillConnection::CopyFrom(const FillConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillConnection::IsInitialized() const {

  return true;
}

void FillConnection::Swap(FillConnection* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FillConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FillConnection_descriptor_;
  metadata.reflection = FillConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlexConnection::kAngleFieldNumber;
#endif  // !_MSC_VER

FlexConnection::FlexConnection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlexConnection::InitAsDefaultInstance() {
}

FlexConnection::FlexConnection(const FlexConnection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlexConnection::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlexConnection::~FlexConnection() {
  SharedDtor();
}

void FlexConnection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlexConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlexConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlexConnection_descriptor_;
}

const FlexConnection& FlexConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

FlexConnection* FlexConnection::default_instance_ = NULL;

FlexConnection* FlexConnection::New() const {
  return new FlexConnection;
}

void FlexConnection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlexConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlexConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlexConnection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlexConnection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double angle = 1;
    if (has_angle()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlexConnection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlexConnection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlexConnection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlexConnection::MergeFrom(const FlexConnection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlexConnection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlexConnection::CopyFrom(const FlexConnection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlexConnection::IsInitialized() const {

  return true;
}

void FlexConnection::Swap(FlexConnection* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlexConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlexConnection_descriptor_;
  metadata.reflection = FlexConnection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MappingFunction::kLinear3FieldNumber;
const int MappingFunction::kLinear2FieldNumber;
const int MappingFunction::kCompositionFieldNumber;
const int MappingFunction::kExternalMeshAffineFieldNumber;
const int MappingFunction::kScadFieldNumber;
const int MappingFunction::kSymbolicWayPointsMappingFunctionFieldNumber;
#endif  // !_MSC_VER

MappingFunction::MappingFunction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MappingFunction::InitAsDefaultInstance() {
  linear_3_ = const_cast< ::FabByExample::proto::LinearMappingFunction3*>(&::FabByExample::proto::LinearMappingFunction3::default_instance());
  linear_2_ = const_cast< ::FabByExample::proto::LinearMappingFunction2*>(&::FabByExample::proto::LinearMappingFunction2::default_instance());
  composition_ = const_cast< ::FabByExample::proto::CompositionMappingFunction*>(&::FabByExample::proto::CompositionMappingFunction::default_instance());
  external_mesh_affine_ = const_cast< ::FabByExample::proto::ExternalMeshAffineMappingFunction*>(&::FabByExample::proto::ExternalMeshAffineMappingFunction::default_instance());
  scad_ = const_cast< ::FabByExample::proto::ScadMappingFunction*>(&::FabByExample::proto::ScadMappingFunction::default_instance());
  symbolicwaypointsmappingfunction_ = const_cast< ::FabByExample::proto::SymbolicWayPointsMappingFunction*>(&::FabByExample::proto::SymbolicWayPointsMappingFunction::default_instance());
}

MappingFunction::MappingFunction(const MappingFunction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MappingFunction::SharedCtor() {
  _cached_size_ = 0;
  linear_3_ = NULL;
  linear_2_ = NULL;
  composition_ = NULL;
  external_mesh_affine_ = NULL;
  scad_ = NULL;
  symbolicwaypointsmappingfunction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MappingFunction::~MappingFunction() {
  SharedDtor();
}

void MappingFunction::SharedDtor() {
  if (this != default_instance_) {
    delete linear_3_;
    delete linear_2_;
    delete composition_;
    delete external_mesh_affine_;
    delete scad_;
    delete symbolicwaypointsmappingfunction_;
  }
}

void MappingFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MappingFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MappingFunction_descriptor_;
}

const MappingFunction& MappingFunction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

MappingFunction* MappingFunction::default_instance_ = NULL;

MappingFunction* MappingFunction::New() const {
  return new MappingFunction;
}

void MappingFunction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_linear_3()) {
      if (linear_3_ != NULL) linear_3_->::FabByExample::proto::LinearMappingFunction3::Clear();
    }
    if (has_linear_2()) {
      if (linear_2_ != NULL) linear_2_->::FabByExample::proto::LinearMappingFunction2::Clear();
    }
    if (has_composition()) {
      if (composition_ != NULL) composition_->::FabByExample::proto::CompositionMappingFunction::Clear();
    }
    if (has_external_mesh_affine()) {
      if (external_mesh_affine_ != NULL) external_mesh_affine_->::FabByExample::proto::ExternalMeshAffineMappingFunction::Clear();
    }
    if (has_scad()) {
      if (scad_ != NULL) scad_->::FabByExample::proto::ScadMappingFunction::Clear();
    }
    if (has_symbolicwaypointsmappingfunction()) {
      if (symbolicwaypointsmappingfunction_ != NULL) symbolicwaypointsmappingfunction_->::FabByExample::proto::SymbolicWayPointsMappingFunction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MappingFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.LinearMappingFunction3 linear_3 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_linear_2;
        break;
      }

      // optional .FabByExample.proto.LinearMappingFunction2 linear_2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_linear_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_composition;
        break;
      }

      // optional .FabByExample.proto.CompositionMappingFunction composition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_composition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_composition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_external_mesh_affine;
        break;
      }

      // optional .FabByExample.proto.ExternalMeshAffineMappingFunction external_mesh_affine = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_external_mesh_affine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_external_mesh_affine()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_scad;
        break;
      }

      // optional .FabByExample.proto.ScadMappingFunction scad = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scad()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_symbolicWayPointsMappingFunction;
        break;
      }

      // optional .FabByExample.proto.SymbolicWayPointsMappingFunction symbolicWayPointsMappingFunction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbolicWayPointsMappingFunction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbolicwaypointsmappingfunction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MappingFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.LinearMappingFunction3 linear_3 = 1;
  if (has_linear_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->linear_3(), output);
  }

  // optional .FabByExample.proto.LinearMappingFunction2 linear_2 = 2;
  if (has_linear_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->linear_2(), output);
  }

  // optional .FabByExample.proto.CompositionMappingFunction composition = 3;
  if (has_composition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->composition(), output);
  }

  // optional .FabByExample.proto.ExternalMeshAffineMappingFunction external_mesh_affine = 4;
  if (has_external_mesh_affine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->external_mesh_affine(), output);
  }

  // optional .FabByExample.proto.ScadMappingFunction scad = 5;
  if (has_scad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->scad(), output);
  }

  // optional .FabByExample.proto.SymbolicWayPointsMappingFunction symbolicWayPointsMappingFunction = 6;
  if (has_symbolicwaypointsmappingfunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->symbolicwaypointsmappingfunction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MappingFunction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.LinearMappingFunction3 linear_3 = 1;
  if (has_linear_3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->linear_3(), target);
  }

  // optional .FabByExample.proto.LinearMappingFunction2 linear_2 = 2;
  if (has_linear_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->linear_2(), target);
  }

  // optional .FabByExample.proto.CompositionMappingFunction composition = 3;
  if (has_composition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->composition(), target);
  }

  // optional .FabByExample.proto.ExternalMeshAffineMappingFunction external_mesh_affine = 4;
  if (has_external_mesh_affine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->external_mesh_affine(), target);
  }

  // optional .FabByExample.proto.ScadMappingFunction scad = 5;
  if (has_scad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->scad(), target);
  }

  // optional .FabByExample.proto.SymbolicWayPointsMappingFunction symbolicWayPointsMappingFunction = 6;
  if (has_symbolicwaypointsmappingfunction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->symbolicwaypointsmappingfunction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MappingFunction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.LinearMappingFunction3 linear_3 = 1;
    if (has_linear_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_3());
    }

    // optional .FabByExample.proto.LinearMappingFunction2 linear_2 = 2;
    if (has_linear_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_2());
    }

    // optional .FabByExample.proto.CompositionMappingFunction composition = 3;
    if (has_composition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->composition());
    }

    // optional .FabByExample.proto.ExternalMeshAffineMappingFunction external_mesh_affine = 4;
    if (has_external_mesh_affine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->external_mesh_affine());
    }

    // optional .FabByExample.proto.ScadMappingFunction scad = 5;
    if (has_scad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scad());
    }

    // optional .FabByExample.proto.SymbolicWayPointsMappingFunction symbolicWayPointsMappingFunction = 6;
    if (has_symbolicwaypointsmappingfunction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbolicwaypointsmappingfunction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MappingFunction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MappingFunction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MappingFunction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MappingFunction::MergeFrom(const MappingFunction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linear_3()) {
      mutable_linear_3()->::FabByExample::proto::LinearMappingFunction3::MergeFrom(from.linear_3());
    }
    if (from.has_linear_2()) {
      mutable_linear_2()->::FabByExample::proto::LinearMappingFunction2::MergeFrom(from.linear_2());
    }
    if (from.has_composition()) {
      mutable_composition()->::FabByExample::proto::CompositionMappingFunction::MergeFrom(from.composition());
    }
    if (from.has_external_mesh_affine()) {
      mutable_external_mesh_affine()->::FabByExample::proto::ExternalMeshAffineMappingFunction::MergeFrom(from.external_mesh_affine());
    }
    if (from.has_scad()) {
      mutable_scad()->::FabByExample::proto::ScadMappingFunction::MergeFrom(from.scad());
    }
    if (from.has_symbolicwaypointsmappingfunction()) {
      mutable_symbolicwaypointsmappingfunction()->::FabByExample::proto::SymbolicWayPointsMappingFunction::MergeFrom(from.symbolicwaypointsmappingfunction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MappingFunction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MappingFunction::CopyFrom(const MappingFunction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MappingFunction::IsInitialized() const {

  if (has_scad()) {
    if (!this->scad().IsInitialized()) return false;
  }
  return true;
}

void MappingFunction::Swap(MappingFunction* other) {
  if (other != this) {
    std::swap(linear_3_, other->linear_3_);
    std::swap(linear_2_, other->linear_2_);
    std::swap(composition_, other->composition_);
    std::swap(external_mesh_affine_, other->external_mesh_affine_);
    std::swap(scad_, other->scad_);
    std::swap(symbolicwaypointsmappingfunction_, other->symbolicwaypointsmappingfunction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MappingFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MappingFunction_descriptor_;
  metadata.reflection = MappingFunction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SymbolicWayPointsMappingFunction::kSymbolicWayPointFieldNumber;
#endif  // !_MSC_VER

SymbolicWayPointsMappingFunction::SymbolicWayPointsMappingFunction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SymbolicWayPointsMappingFunction::InitAsDefaultInstance() {
}

SymbolicWayPointsMappingFunction::SymbolicWayPointsMappingFunction(const SymbolicWayPointsMappingFunction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SymbolicWayPointsMappingFunction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymbolicWayPointsMappingFunction::~SymbolicWayPointsMappingFunction() {
  SharedDtor();
}

void SymbolicWayPointsMappingFunction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SymbolicWayPointsMappingFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolicWayPointsMappingFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolicWayPointsMappingFunction_descriptor_;
}

const SymbolicWayPointsMappingFunction& SymbolicWayPointsMappingFunction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

SymbolicWayPointsMappingFunction* SymbolicWayPointsMappingFunction::default_instance_ = NULL;

SymbolicWayPointsMappingFunction* SymbolicWayPointsMappingFunction::New() const {
  return new SymbolicWayPointsMappingFunction;
}

void SymbolicWayPointsMappingFunction::Clear() {
  symbolicwaypoint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymbolicWayPointsMappingFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FabByExample.proto.SymbolicWayPoint symbolicWayPoint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbolicWayPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_symbolicwaypoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_symbolicWayPoint;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SymbolicWayPointsMappingFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FabByExample.proto.SymbolicWayPoint symbolicWayPoint = 1;
  for (int i = 0; i < this->symbolicwaypoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->symbolicwaypoint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SymbolicWayPointsMappingFunction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FabByExample.proto.SymbolicWayPoint symbolicWayPoint = 1;
  for (int i = 0; i < this->symbolicwaypoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->symbolicwaypoint(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SymbolicWayPointsMappingFunction::ByteSize() const {
  int total_size = 0;

  // repeated .FabByExample.proto.SymbolicWayPoint symbolicWayPoint = 1;
  total_size += 1 * this->symbolicwaypoint_size();
  for (int i = 0; i < this->symbolicwaypoint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbolicwaypoint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolicWayPointsMappingFunction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymbolicWayPointsMappingFunction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymbolicWayPointsMappingFunction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolicWayPointsMappingFunction::MergeFrom(const SymbolicWayPointsMappingFunction& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbolicwaypoint_.MergeFrom(from.symbolicwaypoint_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymbolicWayPointsMappingFunction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolicWayPointsMappingFunction::CopyFrom(const SymbolicWayPointsMappingFunction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolicWayPointsMappingFunction::IsInitialized() const {

  return true;
}

void SymbolicWayPointsMappingFunction::Swap(SymbolicWayPointsMappingFunction* other) {
  if (other != this) {
    symbolicwaypoint_.Swap(&other->symbolicwaypoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymbolicWayPointsMappingFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolicWayPointsMappingFunction_descriptor_;
  metadata.reflection = SymbolicWayPointsMappingFunction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SymbolicWayPoint::kTimeFieldNumber;
const int SymbolicWayPoint::kValueFieldNumber;
const int SymbolicWayPoint::kContactFieldNumber;
const int SymbolicWayPoint::kIsmovingFieldNumber;
#endif  // !_MSC_VER

SymbolicWayPoint::SymbolicWayPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SymbolicWayPoint::InitAsDefaultInstance() {
  time_ = const_cast< ::FabByExample::proto::symbolic::LinearExpr*>(&::FabByExample::proto::symbolic::LinearExpr::default_instance());
  value_ = const_cast< ::FabByExample::proto::symbolic::LinearExpr*>(&::FabByExample::proto::symbolic::LinearExpr::default_instance());
}

SymbolicWayPoint::SymbolicWayPoint(const SymbolicWayPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SymbolicWayPoint::SharedCtor() {
  _cached_size_ = 0;
  time_ = NULL;
  value_ = NULL;
  contact_ = false;
  ismoving_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SymbolicWayPoint::~SymbolicWayPoint() {
  SharedDtor();
}

void SymbolicWayPoint::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
    delete value_;
  }
}

void SymbolicWayPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolicWayPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolicWayPoint_descriptor_;
}

const SymbolicWayPoint& SymbolicWayPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

SymbolicWayPoint* SymbolicWayPoint::default_instance_ = NULL;

SymbolicWayPoint* SymbolicWayPoint::New() const {
  return new SymbolicWayPoint;
}

void SymbolicWayPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_time()) {
      if (time_ != NULL) time_->::FabByExample::proto::symbolic::LinearExpr::Clear();
    }
    if (has_value()) {
      if (value_ != NULL) value_->::FabByExample::proto::symbolic::LinearExpr::Clear();
    }
    contact_ = false;
    ismoving_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SymbolicWayPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.LinearExpr time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .FabByExample.proto.symbolic.LinearExpr value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contact;
        break;
      }

      // optional bool contact = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contact:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contact_)));
          set_has_contact();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ismoving;
        break;
      }

      // optional bool ismoving = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ismoving:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismoving_)));
          set_has_ismoving();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SymbolicWayPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.LinearExpr time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->time(), output);
  }

  // optional .FabByExample.proto.symbolic.LinearExpr value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  // optional bool contact = 3;
  if (has_contact()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->contact(), output);
  }

  // optional bool ismoving = 4;
  if (has_ismoving()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ismoving(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SymbolicWayPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.LinearExpr time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->time(), target);
  }

  // optional .FabByExample.proto.symbolic.LinearExpr value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  // optional bool contact = 3;
  if (has_contact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->contact(), target);
  }

  // optional bool ismoving = 4;
  if (has_ismoving()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ismoving(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SymbolicWayPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.LinearExpr time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // optional .FabByExample.proto.symbolic.LinearExpr value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

    // optional bool contact = 3;
    if (has_contact()) {
      total_size += 1 + 1;
    }

    // optional bool ismoving = 4;
    if (has_ismoving()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolicWayPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SymbolicWayPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SymbolicWayPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SymbolicWayPoint::MergeFrom(const SymbolicWayPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      mutable_time()->::FabByExample::proto::symbolic::LinearExpr::MergeFrom(from.time());
    }
    if (from.has_value()) {
      mutable_value()->::FabByExample::proto::symbolic::LinearExpr::MergeFrom(from.value());
    }
    if (from.has_contact()) {
      set_contact(from.contact());
    }
    if (from.has_ismoving()) {
      set_ismoving(from.ismoving());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SymbolicWayPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolicWayPoint::CopyFrom(const SymbolicWayPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolicWayPoint::IsInitialized() const {

  return true;
}

void SymbolicWayPoint::Swap(SymbolicWayPoint* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(value_, other->value_);
    std::swap(contact_, other->contact_);
    std::swap(ismoving_, other->ismoving_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SymbolicWayPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SymbolicWayPoint_descriptor_;
  metadata.reflection = SymbolicWayPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScadMappingFunction::kScadFilenameFieldNumber;
const int ScadMappingFunction::kDesignFieldNumber;
#endif  // !_MSC_VER

ScadMappingFunction::ScadMappingFunction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScadMappingFunction::InitAsDefaultInstance() {
  design_ = const_cast< ::FabByExample::proto::OpenscadDesign*>(&::FabByExample::proto::OpenscadDesign::default_instance());
}

ScadMappingFunction::ScadMappingFunction(const ScadMappingFunction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScadMappingFunction::SharedCtor() {
  _cached_size_ = 0;
  scad_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  design_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScadMappingFunction::~ScadMappingFunction() {
  SharedDtor();
}

void ScadMappingFunction::SharedDtor() {
  if (scad_filename_ != &::google::protobuf::internal::GetEmptyString()) {
    delete scad_filename_;
  }
  if (this != default_instance_) {
    delete design_;
  }
}

void ScadMappingFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScadMappingFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScadMappingFunction_descriptor_;
}

const ScadMappingFunction& ScadMappingFunction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

ScadMappingFunction* ScadMappingFunction::default_instance_ = NULL;

ScadMappingFunction* ScadMappingFunction::New() const {
  return new ScadMappingFunction;
}

void ScadMappingFunction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_scad_filename()) {
      if (scad_filename_ != &::google::protobuf::internal::GetEmptyString()) {
        scad_filename_->clear();
      }
    }
    if (has_design()) {
      if (design_ != NULL) design_->::FabByExample::proto::OpenscadDesign::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScadMappingFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string scad_filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scad_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scad_filename().data(), this->scad_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_design;
        break;
      }

      // optional .FabByExample.proto.OpenscadDesign design = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_design:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_design()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScadMappingFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string scad_filename = 1;
  if (has_scad_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scad_filename().data(), this->scad_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->scad_filename(), output);
  }

  // optional .FabByExample.proto.OpenscadDesign design = 2;
  if (has_design()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->design(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScadMappingFunction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string scad_filename = 1;
  if (has_scad_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scad_filename().data(), this->scad_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scad_filename(), target);
  }

  // optional .FabByExample.proto.OpenscadDesign design = 2;
  if (has_design()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->design(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScadMappingFunction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string scad_filename = 1;
    if (has_scad_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scad_filename());
    }

    // optional .FabByExample.proto.OpenscadDesign design = 2;
    if (has_design()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->design());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScadMappingFunction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScadMappingFunction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScadMappingFunction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScadMappingFunction::MergeFrom(const ScadMappingFunction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scad_filename()) {
      set_scad_filename(from.scad_filename());
    }
    if (from.has_design()) {
      mutable_design()->::FabByExample::proto::OpenscadDesign::MergeFrom(from.design());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScadMappingFunction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScadMappingFunction::CopyFrom(const ScadMappingFunction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScadMappingFunction::IsInitialized() const {

  if (has_design()) {
    if (!this->design().IsInitialized()) return false;
  }
  return true;
}

void ScadMappingFunction::Swap(ScadMappingFunction* other) {
  if (other != this) {
    std::swap(scad_filename_, other->scad_filename_);
    std::swap(design_, other->design_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScadMappingFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScadMappingFunction_descriptor_;
  metadata.reflection = ScadMappingFunction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExternalMeshAffineMappingFunction::kStlFilenameFieldNumber;
const int ExternalMeshAffineMappingFunction::kStlDataFieldNumber;
const int ExternalMeshAffineMappingFunction::kTransformFieldNumber;
#endif  // !_MSC_VER

ExternalMeshAffineMappingFunction::ExternalMeshAffineMappingFunction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExternalMeshAffineMappingFunction::InitAsDefaultInstance() {
  transform_ = const_cast< ::FabByExample::proto::symbolic::AffineMatrix3S*>(&::FabByExample::proto::symbolic::AffineMatrix3S::default_instance());
}

ExternalMeshAffineMappingFunction::ExternalMeshAffineMappingFunction(const ExternalMeshAffineMappingFunction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExternalMeshAffineMappingFunction::SharedCtor() {
  _cached_size_ = 0;
  stl_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  stl_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  transform_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExternalMeshAffineMappingFunction::~ExternalMeshAffineMappingFunction() {
  SharedDtor();
}

void ExternalMeshAffineMappingFunction::SharedDtor() {
  if (stl_filename_ != &::google::protobuf::internal::GetEmptyString()) {
    delete stl_filename_;
  }
  if (stl_data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete stl_data_;
  }
  if (this != default_instance_) {
    delete transform_;
  }
}

void ExternalMeshAffineMappingFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalMeshAffineMappingFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalMeshAffineMappingFunction_descriptor_;
}

const ExternalMeshAffineMappingFunction& ExternalMeshAffineMappingFunction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

ExternalMeshAffineMappingFunction* ExternalMeshAffineMappingFunction::default_instance_ = NULL;

ExternalMeshAffineMappingFunction* ExternalMeshAffineMappingFunction::New() const {
  return new ExternalMeshAffineMappingFunction;
}

void ExternalMeshAffineMappingFunction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stl_filename()) {
      if (stl_filename_ != &::google::protobuf::internal::GetEmptyString()) {
        stl_filename_->clear();
      }
    }
    if (has_stl_data()) {
      if (stl_data_ != &::google::protobuf::internal::GetEmptyString()) {
        stl_data_->clear();
      }
    }
    if (has_transform()) {
      if (transform_ != NULL) transform_->::FabByExample::proto::symbolic::AffineMatrix3S::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExternalMeshAffineMappingFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stl_filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stl_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stl_filename().data(), this->stl_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stl_data;
        break;
      }

      // optional bytes stl_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stl_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stl_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transform;
        break;
      }

      // optional .FabByExample.proto.symbolic.AffineMatrix3S transform = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExternalMeshAffineMappingFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string stl_filename = 1;
  if (has_stl_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stl_filename().data(), this->stl_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stl_filename(), output);
  }

  // optional bytes stl_data = 2;
  if (has_stl_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->stl_data(), output);
  }

  // optional .FabByExample.proto.symbolic.AffineMatrix3S transform = 3;
  if (has_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->transform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExternalMeshAffineMappingFunction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string stl_filename = 1;
  if (has_stl_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stl_filename().data(), this->stl_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stl_filename(), target);
  }

  // optional bytes stl_data = 2;
  if (has_stl_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->stl_data(), target);
  }

  // optional .FabByExample.proto.symbolic.AffineMatrix3S transform = 3;
  if (has_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->transform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExternalMeshAffineMappingFunction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stl_filename = 1;
    if (has_stl_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stl_filename());
    }

    // optional bytes stl_data = 2;
    if (has_stl_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stl_data());
    }

    // optional .FabByExample.proto.symbolic.AffineMatrix3S transform = 3;
    if (has_transform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalMeshAffineMappingFunction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExternalMeshAffineMappingFunction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternalMeshAffineMappingFunction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternalMeshAffineMappingFunction::MergeFrom(const ExternalMeshAffineMappingFunction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stl_filename()) {
      set_stl_filename(from.stl_filename());
    }
    if (from.has_stl_data()) {
      set_stl_data(from.stl_data());
    }
    if (from.has_transform()) {
      mutable_transform()->::FabByExample::proto::symbolic::AffineMatrix3S::MergeFrom(from.transform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExternalMeshAffineMappingFunction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalMeshAffineMappingFunction::CopyFrom(const ExternalMeshAffineMappingFunction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalMeshAffineMappingFunction::IsInitialized() const {

  return true;
}

void ExternalMeshAffineMappingFunction::Swap(ExternalMeshAffineMappingFunction* other) {
  if (other != this) {
    std::swap(stl_filename_, other->stl_filename_);
    std::swap(stl_data_, other->stl_data_);
    std::swap(transform_, other->transform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExternalMeshAffineMappingFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalMeshAffineMappingFunction_descriptor_;
  metadata.reflection = ExternalMeshAffineMappingFunction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompositionMappingFunction::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

CompositionMappingFunction::CompositionMappingFunction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompositionMappingFunction::InitAsDefaultInstance() {
}

CompositionMappingFunction::CompositionMappingFunction(const CompositionMappingFunction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompositionMappingFunction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompositionMappingFunction::~CompositionMappingFunction() {
  SharedDtor();
}

void CompositionMappingFunction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompositionMappingFunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompositionMappingFunction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompositionMappingFunction_descriptor_;
}

const CompositionMappingFunction& CompositionMappingFunction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

CompositionMappingFunction* CompositionMappingFunction::default_instance_ = NULL;

CompositionMappingFunction* CompositionMappingFunction::New() const {
  return new CompositionMappingFunction;
}

void CompositionMappingFunction::Clear() {
  template_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompositionMappingFunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_template_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_template_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_template_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompositionMappingFunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 template_id = 1;
  for (int i = 0; i < this->template_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->template_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompositionMappingFunction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 template_id = 1;
  for (int i = 0; i < this->template_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->template_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompositionMappingFunction::ByteSize() const {
  int total_size = 0;

  // repeated int32 template_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->template_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->template_id(i));
    }
    total_size += 1 * this->template_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompositionMappingFunction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompositionMappingFunction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompositionMappingFunction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompositionMappingFunction::MergeFrom(const CompositionMappingFunction& from) {
  GOOGLE_CHECK_NE(&from, this);
  template_id_.MergeFrom(from.template_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompositionMappingFunction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompositionMappingFunction::CopyFrom(const CompositionMappingFunction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositionMappingFunction::IsInitialized() const {

  return true;
}

void CompositionMappingFunction::Swap(CompositionMappingFunction* other) {
  if (other != this) {
    template_id_.Swap(&other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompositionMappingFunction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompositionMappingFunction_descriptor_;
  metadata.reflection = CompositionMappingFunction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinearMappingFunction3::kMeshFieldNumber;
#endif  // !_MSC_VER

LinearMappingFunction3::LinearMappingFunction3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinearMappingFunction3::InitAsDefaultInstance() {
  mesh_ = const_cast< ::FabByExample::proto::symbolic::Mesh3S*>(&::FabByExample::proto::symbolic::Mesh3S::default_instance());
}

LinearMappingFunction3::LinearMappingFunction3(const LinearMappingFunction3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinearMappingFunction3::SharedCtor() {
  _cached_size_ = 0;
  mesh_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinearMappingFunction3::~LinearMappingFunction3() {
  SharedDtor();
}

void LinearMappingFunction3::SharedDtor() {
  if (this != default_instance_) {
    delete mesh_;
  }
}

void LinearMappingFunction3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinearMappingFunction3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearMappingFunction3_descriptor_;
}

const LinearMappingFunction3& LinearMappingFunction3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

LinearMappingFunction3* LinearMappingFunction3::default_instance_ = NULL;

LinearMappingFunction3* LinearMappingFunction3::New() const {
  return new LinearMappingFunction3;
}

void LinearMappingFunction3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mesh()) {
      if (mesh_ != NULL) mesh_->::FabByExample::proto::symbolic::Mesh3S::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinearMappingFunction3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.Mesh3S mesh = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mesh()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinearMappingFunction3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.Mesh3S mesh = 1;
  if (has_mesh()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mesh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinearMappingFunction3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.Mesh3S mesh = 1;
  if (has_mesh()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mesh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinearMappingFunction3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.Mesh3S mesh = 1;
    if (has_mesh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mesh());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinearMappingFunction3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinearMappingFunction3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinearMappingFunction3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinearMappingFunction3::MergeFrom(const LinearMappingFunction3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mesh()) {
      mutable_mesh()->::FabByExample::proto::symbolic::Mesh3S::MergeFrom(from.mesh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinearMappingFunction3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearMappingFunction3::CopyFrom(const LinearMappingFunction3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearMappingFunction3::IsInitialized() const {

  return true;
}

void LinearMappingFunction3::Swap(LinearMappingFunction3* other) {
  if (other != this) {
    std::swap(mesh_, other->mesh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinearMappingFunction3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinearMappingFunction3_descriptor_;
  metadata.reflection = LinearMappingFunction3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinearMappingFunction2::kDrawingFieldNumber;
#endif  // !_MSC_VER

LinearMappingFunction2::LinearMappingFunction2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinearMappingFunction2::InitAsDefaultInstance() {
  drawing_ = const_cast< ::FabByExample::proto::symbolic::Drawing2S*>(&::FabByExample::proto::symbolic::Drawing2S::default_instance());
}

LinearMappingFunction2::LinearMappingFunction2(const LinearMappingFunction2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinearMappingFunction2::SharedCtor() {
  _cached_size_ = 0;
  drawing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinearMappingFunction2::~LinearMappingFunction2() {
  SharedDtor();
}

void LinearMappingFunction2::SharedDtor() {
  if (this != default_instance_) {
    delete drawing_;
  }
}

void LinearMappingFunction2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinearMappingFunction2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearMappingFunction2_descriptor_;
}

const LinearMappingFunction2& LinearMappingFunction2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

LinearMappingFunction2* LinearMappingFunction2::default_instance_ = NULL;

LinearMappingFunction2* LinearMappingFunction2::New() const {
  return new LinearMappingFunction2;
}

void LinearMappingFunction2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drawing()) {
      if (drawing_ != NULL) drawing_->::FabByExample::proto::symbolic::Drawing2S::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinearMappingFunction2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.Drawing2S drawing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drawing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinearMappingFunction2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.Drawing2S drawing = 1;
  if (has_drawing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->drawing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinearMappingFunction2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.Drawing2S drawing = 1;
  if (has_drawing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->drawing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinearMappingFunction2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.Drawing2S drawing = 1;
    if (has_drawing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drawing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinearMappingFunction2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinearMappingFunction2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinearMappingFunction2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinearMappingFunction2::MergeFrom(const LinearMappingFunction2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawing()) {
      mutable_drawing()->::FabByExample::proto::symbolic::Drawing2S::MergeFrom(from.drawing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinearMappingFunction2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearMappingFunction2::CopyFrom(const LinearMappingFunction2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearMappingFunction2::IsInitialized() const {

  return true;
}

void LinearMappingFunction2::Swap(LinearMappingFunction2* other) {
  if (other != this) {
    std::swap(drawing_, other->drawing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinearMappingFunction2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinearMappingFunction2_descriptor_;
  metadata.reflection = LinearMappingFunction2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeasibleSet::kConstraintListFieldNumber;
#endif  // !_MSC_VER

FeasibleSet::FeasibleSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeasibleSet::InitAsDefaultInstance() {
  constraint_list_ = const_cast< ::FabByExample::proto::ConstraintList*>(&::FabByExample::proto::ConstraintList::default_instance());
}

FeasibleSet::FeasibleSet(const FeasibleSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeasibleSet::SharedCtor() {
  _cached_size_ = 0;
  constraint_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeasibleSet::~FeasibleSet() {
  SharedDtor();
}

void FeasibleSet::SharedDtor() {
  if (this != default_instance_) {
    delete constraint_list_;
  }
}

void FeasibleSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeasibleSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeasibleSet_descriptor_;
}

const FeasibleSet& FeasibleSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

FeasibleSet* FeasibleSet::default_instance_ = NULL;

FeasibleSet* FeasibleSet::New() const {
  return new FeasibleSet;
}

void FeasibleSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_constraint_list()) {
      if (constraint_list_ != NULL) constraint_list_->::FabByExample::proto::ConstraintList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeasibleSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.ConstraintList constraint_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constraint_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeasibleSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.ConstraintList constraint_list = 1;
  if (has_constraint_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->constraint_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeasibleSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.ConstraintList constraint_list = 1;
  if (has_constraint_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->constraint_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeasibleSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.ConstraintList constraint_list = 1;
    if (has_constraint_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->constraint_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeasibleSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeasibleSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeasibleSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeasibleSet::MergeFrom(const FeasibleSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_constraint_list()) {
      mutable_constraint_list()->::FabByExample::proto::ConstraintList::MergeFrom(from.constraint_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeasibleSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeasibleSet::CopyFrom(const FeasibleSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeasibleSet::IsInitialized() const {

  return true;
}

void FeasibleSet::Swap(FeasibleSet* other) {
  if (other != this) {
    std::swap(constraint_list_, other->constraint_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeasibleSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeasibleSet_descriptor_;
  metadata.reflection = FeasibleSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConstraintList::kConstraintFieldNumber;
const int ConstraintList::kInheritedTemplateIdFieldNumber;
#endif  // !_MSC_VER

ConstraintList::ConstraintList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConstraintList::InitAsDefaultInstance() {
}

ConstraintList::ConstraintList(const ConstraintList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConstraintList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConstraintList::~ConstraintList() {
  SharedDtor();
}

void ConstraintList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConstraintList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstraintList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstraintList_descriptor_;
}

const ConstraintList& ConstraintList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

ConstraintList* ConstraintList::default_instance_ = NULL;

ConstraintList* ConstraintList::New() const {
  return new ConstraintList;
}

void ConstraintList::Clear() {
  constraint_.Clear();
  inherited_template_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConstraintList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FabByExample.proto.Constraint constraint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_constraint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constraint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_constraint;
        if (input->ExpectTag(16)) goto parse_inherited_template_id;
        break;
      }

      // repeated int32 inherited_template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inherited_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_inherited_template_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_inherited_template_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inherited_template_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConstraintList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FabByExample.proto.Constraint constraint = 1;
  for (int i = 0; i < this->constraint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->constraint(i), output);
  }

  // repeated int32 inherited_template_id = 2;
  for (int i = 0; i < this->inherited_template_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->inherited_template_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConstraintList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FabByExample.proto.Constraint constraint = 1;
  for (int i = 0; i < this->constraint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->constraint(i), target);
  }

  // repeated int32 inherited_template_id = 2;
  for (int i = 0; i < this->inherited_template_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->inherited_template_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConstraintList::ByteSize() const {
  int total_size = 0;

  // repeated .FabByExample.proto.Constraint constraint = 1;
  total_size += 1 * this->constraint_size();
  for (int i = 0; i < this->constraint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constraint(i));
  }

  // repeated int32 inherited_template_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->inherited_template_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->inherited_template_id(i));
    }
    total_size += 1 * this->inherited_template_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstraintList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConstraintList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConstraintList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConstraintList::MergeFrom(const ConstraintList& from) {
  GOOGLE_CHECK_NE(&from, this);
  constraint_.MergeFrom(from.constraint_);
  inherited_template_id_.MergeFrom(from.inherited_template_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConstraintList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstraintList::CopyFrom(const ConstraintList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintList::IsInitialized() const {

  return true;
}

void ConstraintList::Swap(ConstraintList* other) {
  if (other != this) {
    constraint_.Swap(&other->constraint_);
    inherited_template_id_.Swap(&other->inherited_template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConstraintList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConstraintList_descriptor_;
  metadata.reflection = ConstraintList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Constraint::kLinearConstraintFieldNumber;
#endif  // !_MSC_VER

Constraint::Constraint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Constraint::InitAsDefaultInstance() {
  linear_constraint_ = const_cast< ::FabByExample::proto::LinearConstraint*>(&::FabByExample::proto::LinearConstraint::default_instance());
}

Constraint::Constraint(const Constraint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Constraint::SharedCtor() {
  _cached_size_ = 0;
  linear_constraint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Constraint::~Constraint() {
  SharedDtor();
}

void Constraint::SharedDtor() {
  if (this != default_instance_) {
    delete linear_constraint_;
  }
}

void Constraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Constraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Constraint_descriptor_;
}

const Constraint& Constraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

Constraint* Constraint::default_instance_ = NULL;

Constraint* Constraint::New() const {
  return new Constraint;
}

void Constraint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_linear_constraint()) {
      if (linear_constraint_ != NULL) linear_constraint_->::FabByExample::proto::LinearConstraint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Constraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.LinearConstraint linear_constraint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_constraint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Constraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.LinearConstraint linear_constraint = 1;
  if (has_linear_constraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->linear_constraint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Constraint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.LinearConstraint linear_constraint = 1;
  if (has_linear_constraint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->linear_constraint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Constraint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.LinearConstraint linear_constraint = 1;
    if (has_linear_constraint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_constraint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Constraint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Constraint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Constraint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Constraint::MergeFrom(const Constraint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linear_constraint()) {
      mutable_linear_constraint()->::FabByExample::proto::LinearConstraint::MergeFrom(from.linear_constraint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Constraint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Constraint::CopyFrom(const Constraint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constraint::IsInitialized() const {

  return true;
}

void Constraint::Swap(Constraint* other) {
  if (other != this) {
    std::swap(linear_constraint_, other->linear_constraint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Constraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Constraint_descriptor_;
  metadata.reflection = Constraint_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LinearConstraint_ConstraintSemantics_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearConstraint_ConstraintSemantics_descriptor_;
}
bool LinearConstraint_ConstraintSemantics_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LinearConstraint_ConstraintSemantics LinearConstraint::GENERAL;
const LinearConstraint_ConstraintSemantics LinearConstraint::SYMM_GROUND;
const LinearConstraint_ConstraintSemantics LinearConstraint::SYMM_LEGW;
const LinearConstraint_ConstraintSemantics LinearConstraint::SYMM_LEGL;
const LinearConstraint_ConstraintSemantics LinearConstraint::SYMM_SPACING;
const LinearConstraint_ConstraintSemantics LinearConstraint::ConstraintSemantics_MIN;
const LinearConstraint_ConstraintSemantics LinearConstraint::ConstraintSemantics_MAX;
const int LinearConstraint::ConstraintSemantics_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LinearConstraint_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearConstraint_Type_descriptor_;
}
bool LinearConstraint_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LinearConstraint_Type LinearConstraint::EQUALITY;
const LinearConstraint_Type LinearConstraint::LESS_THAN_ZERO;
const LinearConstraint_Type LinearConstraint::Type_MIN;
const LinearConstraint_Type LinearConstraint::Type_MAX;
const int LinearConstraint::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LinearConstraint::kExprFieldNumber;
const int LinearConstraint::kTypeFieldNumber;
const int LinearConstraint::kConstraintSemanticsFieldNumber;
#endif  // !_MSC_VER

LinearConstraint::LinearConstraint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinearConstraint::InitAsDefaultInstance() {
  expr_ = const_cast< ::FabByExample::proto::symbolic::LinearExpr*>(&::FabByExample::proto::symbolic::LinearExpr::default_instance());
}

LinearConstraint::LinearConstraint(const LinearConstraint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinearConstraint::SharedCtor() {
  _cached_size_ = 0;
  expr_ = NULL;
  type_ = 1;
  constraintsemantics_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinearConstraint::~LinearConstraint() {
  SharedDtor();
}

void LinearConstraint::SharedDtor() {
  if (this != default_instance_) {
    delete expr_;
  }
}

void LinearConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinearConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearConstraint_descriptor_;
}

const LinearConstraint& LinearConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

LinearConstraint* LinearConstraint::default_instance_ = NULL;

LinearConstraint* LinearConstraint::New() const {
  return new LinearConstraint;
}

void LinearConstraint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_expr()) {
      if (expr_ != NULL) expr_->::FabByExample::proto::symbolic::LinearExpr::Clear();
    }
    type_ = 1;
    constraintsemantics_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinearConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FabByExample.proto.symbolic.LinearExpr expr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .FabByExample.proto.LinearConstraint.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FabByExample::proto::LinearConstraint_Type_IsValid(value)) {
            set_type(static_cast< ::FabByExample::proto::LinearConstraint_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_constraintSemantics;
        break;
      }

      // optional .FabByExample.proto.LinearConstraint.ConstraintSemantics constraintSemantics = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constraintSemantics:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FabByExample::proto::LinearConstraint_ConstraintSemantics_IsValid(value)) {
            set_constraintsemantics(static_cast< ::FabByExample::proto::LinearConstraint_ConstraintSemantics >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinearConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FabByExample.proto.symbolic.LinearExpr expr = 1;
  if (has_expr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->expr(), output);
  }

  // optional .FabByExample.proto.LinearConstraint.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .FabByExample.proto.LinearConstraint.ConstraintSemantics constraintSemantics = 3;
  if (has_constraintsemantics()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->constraintsemantics(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinearConstraint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FabByExample.proto.symbolic.LinearExpr expr = 1;
  if (has_expr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->expr(), target);
  }

  // optional .FabByExample.proto.LinearConstraint.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .FabByExample.proto.LinearConstraint.ConstraintSemantics constraintSemantics = 3;
  if (has_constraintsemantics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->constraintsemantics(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinearConstraint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FabByExample.proto.symbolic.LinearExpr expr = 1;
    if (has_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expr());
    }

    // optional .FabByExample.proto.LinearConstraint.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .FabByExample.proto.LinearConstraint.ConstraintSemantics constraintSemantics = 3;
    if (has_constraintsemantics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->constraintsemantics());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinearConstraint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinearConstraint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinearConstraint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinearConstraint::MergeFrom(const LinearConstraint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expr()) {
      mutable_expr()->::FabByExample::proto::symbolic::LinearExpr::MergeFrom(from.expr());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_constraintsemantics()) {
      set_constraintsemantics(from.constraintsemantics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinearConstraint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearConstraint::CopyFrom(const LinearConstraint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearConstraint::IsInitialized() const {

  return true;
}

void LinearConstraint::Swap(LinearConstraint* other) {
  if (other != this) {
    std::swap(expr_, other->expr_);
    std::swap(type_, other->type_);
    std::swap(constraintsemantics_, other->constraintsemantics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinearConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinearConstraint_descriptor_;
  metadata.reflection = LinearConstraint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Articulation::kTransformsFieldNumber;
const int Articulation::kCenterFieldNumber;
#endif  // !_MSC_VER

Articulation::Articulation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Articulation::InitAsDefaultInstance() {
  center_ = const_cast< ::FabByExample::proto::symbolic::Point3S*>(&::FabByExample::proto::symbolic::Point3S::default_instance());
}

Articulation::Articulation(const Articulation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Articulation::SharedCtor() {
  _cached_size_ = 0;
  center_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Articulation::~Articulation() {
  SharedDtor();
}

void Articulation::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
  }
}

void Articulation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Articulation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Articulation_descriptor_;
}

const Articulation& Articulation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_template_2eproto();
  return *default_instance_;
}

Articulation* Articulation::default_instance_ = NULL;

Articulation* Articulation::New() const {
  return new Articulation;
}

void Articulation::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_center()) {
      if (center_ != NULL) center_->::FabByExample::proto::symbolic::Point3S::Clear();
    }
  }
  transforms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Articulation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FabByExample.proto.symbolic.Transform transforms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transforms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transforms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_transforms;
        if (input->ExpectTag(18)) goto parse_center;
        break;
      }

      // optional .FabByExample.proto.symbolic.Point3S center = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Articulation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FabByExample.proto.symbolic.Transform transforms = 1;
  for (int i = 0; i < this->transforms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transforms(i), output);
  }

  // optional .FabByExample.proto.symbolic.Point3S center = 2;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->center(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Articulation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FabByExample.proto.symbolic.Transform transforms = 1;
  for (int i = 0; i < this->transforms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->transforms(i), target);
  }

  // optional .FabByExample.proto.symbolic.Point3S center = 2;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->center(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Articulation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .FabByExample.proto.symbolic.Point3S center = 2;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

  }
  // repeated .FabByExample.proto.symbolic.Transform transforms = 1;
  total_size += 1 * this->transforms_size();
  for (int i = 0; i < this->transforms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transforms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Articulation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Articulation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Articulation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Articulation::MergeFrom(const Articulation& from) {
  GOOGLE_CHECK_NE(&from, this);
  transforms_.MergeFrom(from.transforms_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_center()) {
      mutable_center()->::FabByExample::proto::symbolic::Point3S::MergeFrom(from.center());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Articulation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Articulation::CopyFrom(const Articulation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Articulation::IsInitialized() const {

  return true;
}

void Articulation::Swap(Articulation* other) {
  if (other != this) {
    transforms_.Swap(&other->transforms_);
    std::swap(center_, other->center_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Articulation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Articulation_descriptor_;
  metadata.reflection = Articulation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace FabByExample

// @@protoc_insertion_point(global_scope)
